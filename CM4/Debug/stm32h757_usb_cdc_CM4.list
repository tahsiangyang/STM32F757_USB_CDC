
stm32h757_usb_cdc_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf4  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08102e8c  08102e8c  00003e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08102e9c  08102e9c  00003e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08102ea0  08102ea0  00003ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  10000000  08102ea4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000080  10000010  08102eb4  00004010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000090  08102eb4  00004090  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b65c  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001af7  00000000  00000000  0000f69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a70  00000000  00000000  00011198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000007d1  00000000  00000000  00011c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003e702  00000000  00000000  000123d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c63c  00000000  00000000  00050adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00194c56  00000000  00000000  0005d117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001f1d6d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002a30  00000000  00000000  001f1db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005d  00000000  00000000  001f47e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08102e74 	.word	0x08102e74

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08102e74 	.word	0x08102e74

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	@ (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	@ (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	@ (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	@ (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8100308:	b480      	push	{r7}
 810030a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 810030c:	4b09      	ldr	r3, [pc, #36]	@ (8100334 <ExitRun0Mode+0x2c>)
 810030e:	68db      	ldr	r3, [r3, #12]
 8100310:	4a08      	ldr	r2, [pc, #32]	@ (8100334 <ExitRun0Mode+0x2c>)
 8100312:	f023 0302 	bic.w	r3, r3, #2
 8100316:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100318:	bf00      	nop
 810031a:	4b06      	ldr	r3, [pc, #24]	@ (8100334 <ExitRun0Mode+0x2c>)
 810031c:	685b      	ldr	r3, [r3, #4]
 810031e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8100322:	2b00      	cmp	r3, #0
 8100324:	d0f9      	beq.n	810031a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8100326:	bf00      	nop
 8100328:	bf00      	nop
 810032a:	46bd      	mov	sp, r7
 810032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100330:	4770      	bx	lr
 8100332:	bf00      	nop
 8100334:	58024800 	.word	0x58024800

08100338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100338:	b580      	push	{r7, lr}
 810033a:	b082      	sub	sp, #8
 810033c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810033e:	4b1c      	ldr	r3, [pc, #112]	@ (81003b0 <main+0x78>)
 8100340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100344:	4a1a      	ldr	r2, [pc, #104]	@ (81003b0 <main+0x78>)
 8100346:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810034a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810034e:	4b18      	ldr	r3, [pc, #96]	@ (81003b0 <main+0x78>)
 8100350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100358:	607b      	str	r3, [r7, #4]
 810035a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810035c:	2001      	movs	r0, #1
 810035e:	f000 ff9b 	bl	8101298 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100362:	f001 f825 	bl	81013b0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100366:	2201      	movs	r2, #1
 8100368:	2102      	movs	r1, #2
 810036a:	2000      	movs	r0, #0
 810036c:	f000 ffa6 	bl	81012bc <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100370:	4b10      	ldr	r3, [pc, #64]	@ (81003b4 <main+0x7c>)
 8100372:	681b      	ldr	r3, [r3, #0]
 8100374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8100378:	2b70      	cmp	r3, #112	@ 0x70
 810037a:	d108      	bne.n	810038e <main+0x56>
 810037c:	4b0e      	ldr	r3, [pc, #56]	@ (81003b8 <main+0x80>)
 810037e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100382:	4a0d      	ldr	r2, [pc, #52]	@ (81003b8 <main+0x80>)
 8100384:	f043 0301 	orr.w	r3, r3, #1
 8100388:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 810038c:	e007      	b.n	810039e <main+0x66>
 810038e:	4b0a      	ldr	r3, [pc, #40]	@ (81003b8 <main+0x80>)
 8100390:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100394:	4a08      	ldr	r2, [pc, #32]	@ (81003b8 <main+0x80>)
 8100396:	f043 0301 	orr.w	r3, r3, #1
 810039a:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810039e:	f000 fb0d 	bl	81009bc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81003a2:	f000 f843 	bl	810042c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 81003a6:	f000 f809 	bl	81003bc <MX_DFSDM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81003aa:	bf00      	nop
 81003ac:	e7fd      	b.n	81003aa <main+0x72>
 81003ae:	bf00      	nop
 81003b0:	58024400 	.word	0x58024400
 81003b4:	e000ed00 	.word	0xe000ed00
 81003b8:	58026400 	.word	0x58026400

081003bc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 81003bc:	b580      	push	{r7, lr}
 81003be:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 81003c0:	4b18      	ldr	r3, [pc, #96]	@ (8100424 <MX_DFSDM1_Init+0x68>)
 81003c2:	4a19      	ldr	r2, [pc, #100]	@ (8100428 <MX_DFSDM1_Init+0x6c>)
 81003c4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 81003c6:	4b17      	ldr	r3, [pc, #92]	@ (8100424 <MX_DFSDM1_Init+0x68>)
 81003c8:	2201      	movs	r2, #1
 81003ca:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 81003cc:	4b15      	ldr	r3, [pc, #84]	@ (8100424 <MX_DFSDM1_Init+0x68>)
 81003ce:	2200      	movs	r2, #0
 81003d0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 81003d2:	4b14      	ldr	r3, [pc, #80]	@ (8100424 <MX_DFSDM1_Init+0x68>)
 81003d4:	2202      	movs	r2, #2
 81003d6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 81003d8:	4b12      	ldr	r3, [pc, #72]	@ (8100424 <MX_DFSDM1_Init+0x68>)
 81003da:	2200      	movs	r2, #0
 81003dc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 81003de:	4b11      	ldr	r3, [pc, #68]	@ (8100424 <MX_DFSDM1_Init+0x68>)
 81003e0:	2200      	movs	r2, #0
 81003e2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 81003e4:	4b0f      	ldr	r3, [pc, #60]	@ (8100424 <MX_DFSDM1_Init+0x68>)
 81003e6:	2200      	movs	r2, #0
 81003e8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 81003ea:	4b0e      	ldr	r3, [pc, #56]	@ (8100424 <MX_DFSDM1_Init+0x68>)
 81003ec:	2200      	movs	r2, #0
 81003ee:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 81003f0:	4b0c      	ldr	r3, [pc, #48]	@ (8100424 <MX_DFSDM1_Init+0x68>)
 81003f2:	2204      	movs	r2, #4
 81003f4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 81003f6:	4b0b      	ldr	r3, [pc, #44]	@ (8100424 <MX_DFSDM1_Init+0x68>)
 81003f8:	2200      	movs	r2, #0
 81003fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 81003fc:	4b09      	ldr	r3, [pc, #36]	@ (8100424 <MX_DFSDM1_Init+0x68>)
 81003fe:	2201      	movs	r2, #1
 8100400:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8100402:	4b08      	ldr	r3, [pc, #32]	@ (8100424 <MX_DFSDM1_Init+0x68>)
 8100404:	2200      	movs	r2, #0
 8100406:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8100408:	4b06      	ldr	r3, [pc, #24]	@ (8100424 <MX_DFSDM1_Init+0x68>)
 810040a:	2200      	movs	r2, #0
 810040c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 810040e:	4805      	ldr	r0, [pc, #20]	@ (8100424 <MX_DFSDM1_Init+0x68>)
 8100410:	f000 fc7e 	bl	8100d10 <HAL_DFSDM_ChannelInit>
 8100414:	4603      	mov	r3, r0
 8100416:	2b00      	cmp	r3, #0
 8100418:	d001      	beq.n	810041e <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 810041a:	f000 f9d1 	bl	81007c0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 810041e:	bf00      	nop
 8100420:	bd80      	pop	{r7, pc}
 8100422:	bf00      	nop
 8100424:	1000002c 	.word	0x1000002c
 8100428:	40017020 	.word	0x40017020

0810042c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810042c:	b580      	push	{r7, lr}
 810042e:	b08e      	sub	sp, #56	@ 0x38
 8100430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100436:	2200      	movs	r2, #0
 8100438:	601a      	str	r2, [r3, #0]
 810043a:	605a      	str	r2, [r3, #4]
 810043c:	609a      	str	r2, [r3, #8]
 810043e:	60da      	str	r2, [r3, #12]
 8100440:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8100442:	4bbc      	ldr	r3, [pc, #752]	@ (8100734 <MX_GPIO_Init+0x308>)
 8100444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100448:	4aba      	ldr	r2, [pc, #744]	@ (8100734 <MX_GPIO_Init+0x308>)
 810044a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810044e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100452:	4bb8      	ldr	r3, [pc, #736]	@ (8100734 <MX_GPIO_Init+0x308>)
 8100454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810045c:	623b      	str	r3, [r7, #32]
 810045e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100460:	4bb4      	ldr	r3, [pc, #720]	@ (8100734 <MX_GPIO_Init+0x308>)
 8100462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100466:	4ab3      	ldr	r2, [pc, #716]	@ (8100734 <MX_GPIO_Init+0x308>)
 8100468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810046c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100470:	4bb0      	ldr	r3, [pc, #704]	@ (8100734 <MX_GPIO_Init+0x308>)
 8100472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810047a:	61fb      	str	r3, [r7, #28]
 810047c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810047e:	4bad      	ldr	r3, [pc, #692]	@ (8100734 <MX_GPIO_Init+0x308>)
 8100480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100484:	4aab      	ldr	r2, [pc, #684]	@ (8100734 <MX_GPIO_Init+0x308>)
 8100486:	f043 0308 	orr.w	r3, r3, #8
 810048a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810048e:	4ba9      	ldr	r3, [pc, #676]	@ (8100734 <MX_GPIO_Init+0x308>)
 8100490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100494:	f003 0308 	and.w	r3, r3, #8
 8100498:	61bb      	str	r3, [r7, #24]
 810049a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810049c:	4ba5      	ldr	r3, [pc, #660]	@ (8100734 <MX_GPIO_Init+0x308>)
 810049e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81004a2:	4aa4      	ldr	r2, [pc, #656]	@ (8100734 <MX_GPIO_Init+0x308>)
 81004a4:	f043 0304 	orr.w	r3, r3, #4
 81004a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81004ac:	4ba1      	ldr	r3, [pc, #644]	@ (8100734 <MX_GPIO_Init+0x308>)
 81004ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81004b2:	f003 0304 	and.w	r3, r3, #4
 81004b6:	617b      	str	r3, [r7, #20]
 81004b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81004ba:	4b9e      	ldr	r3, [pc, #632]	@ (8100734 <MX_GPIO_Init+0x308>)
 81004bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81004c0:	4a9c      	ldr	r2, [pc, #624]	@ (8100734 <MX_GPIO_Init+0x308>)
 81004c2:	f043 0310 	orr.w	r3, r3, #16
 81004c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81004ca:	4b9a      	ldr	r3, [pc, #616]	@ (8100734 <MX_GPIO_Init+0x308>)
 81004cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81004d0:	f003 0310 	and.w	r3, r3, #16
 81004d4:	613b      	str	r3, [r7, #16]
 81004d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81004d8:	4b96      	ldr	r3, [pc, #600]	@ (8100734 <MX_GPIO_Init+0x308>)
 81004da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81004de:	4a95      	ldr	r2, [pc, #596]	@ (8100734 <MX_GPIO_Init+0x308>)
 81004e0:	f043 0302 	orr.w	r3, r3, #2
 81004e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81004e8:	4b92      	ldr	r3, [pc, #584]	@ (8100734 <MX_GPIO_Init+0x308>)
 81004ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81004ee:	f003 0302 	and.w	r3, r3, #2
 81004f2:	60fb      	str	r3, [r7, #12]
 81004f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 81004f6:	4b8f      	ldr	r3, [pc, #572]	@ (8100734 <MX_GPIO_Init+0x308>)
 81004f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81004fc:	4a8d      	ldr	r2, [pc, #564]	@ (8100734 <MX_GPIO_Init+0x308>)
 81004fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8100502:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100506:	4b8b      	ldr	r3, [pc, #556]	@ (8100734 <MX_GPIO_Init+0x308>)
 8100508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810050c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8100510:	60bb      	str	r3, [r7, #8]
 8100512:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100514:	4b87      	ldr	r3, [pc, #540]	@ (8100734 <MX_GPIO_Init+0x308>)
 8100516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810051a:	4a86      	ldr	r2, [pc, #536]	@ (8100734 <MX_GPIO_Init+0x308>)
 810051c:	f043 0320 	orr.w	r3, r3, #32
 8100520:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100524:	4b83      	ldr	r3, [pc, #524]	@ (8100734 <MX_GPIO_Init+0x308>)
 8100526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810052a:	f003 0320 	and.w	r3, r3, #32
 810052e:	607b      	str	r3, [r7, #4]
 8100530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PI6 PI5 PI4 PI1
                           PI0 PI7 PI2 PI3
                           PI9 PI10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8100532:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8100536:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100538:	2302      	movs	r3, #2
 810053a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810053c:	2300      	movs	r3, #0
 810053e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100540:	2303      	movs	r3, #3
 8100542:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100544:	230c      	movs	r3, #12
 8100546:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8100548:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810054c:	4619      	mov	r1, r3
 810054e:	487a      	ldr	r0, [pc, #488]	@ (8100738 <MX_GPIO_Init+0x30c>)
 8100550:	f000 fcf2 	bl	8100f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 PG15 PG8 PG5
                           PG4 PG3 PG2 PG0
                           PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5
 8100554:	f248 533f 	movw	r3, #34111	@ 0x853f
 8100558:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810055a:	2302      	movs	r3, #2
 810055c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810055e:	2300      	movs	r3, #0
 8100560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100562:	2303      	movs	r3, #3
 8100564:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100566:	230c      	movs	r3, #12
 8100568:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810056a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810056e:	4619      	mov	r1, r3
 8100570:	4872      	ldr	r0, [pc, #456]	@ (810073c <MX_GPIO_Init+0x310>)
 8100572:	f000 fce1 	bl	8100f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8100576:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 810057a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810057c:	2302      	movs	r3, #2
 810057e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100580:	2300      	movs	r3, #0
 8100582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100584:	2300      	movs	r3, #0
 8100586:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8100588:	2309      	movs	r3, #9
 810058a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810058c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100590:	4619      	mov	r1, r3
 8100592:	486a      	ldr	r0, [pc, #424]	@ (810073c <MX_GPIO_Init+0x310>)
 8100594:	f000 fcd0 	bl	8100f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD4 PD6 PD7
                           PD0 PD1 PD15 PD14
                           PD11 PD12 PD13 PD10
                           PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 8100598:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 810059c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_10
                          |GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810059e:	2302      	movs	r3, #2
 81005a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81005a2:	2300      	movs	r3, #0
 81005a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81005a6:	2303      	movs	r3, #3
 81005a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81005aa:	230c      	movs	r3, #12
 81005ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81005ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81005b2:	4619      	mov	r1, r3
 81005b4:	4862      	ldr	r0, [pc, #392]	@ (8100740 <MX_GPIO_Init+0x314>)
 81005b6:	f000 fcbf 	bl	8100f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 81005ba:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 81005be:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81005c0:	2302      	movs	r3, #2
 81005c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81005c4:	2300      	movs	r3, #0
 81005c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81005c8:	2303      	movs	r3, #3
 81005ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 81005cc:	230c      	movs	r3, #12
 81005ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81005d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81005d4:	4619      	mov	r1, r3
 81005d6:	485b      	ldr	r0, [pc, #364]	@ (8100744 <MX_GPIO_Init+0x318>)
 81005d8:	f000 fcae 	bl	8100f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 81005dc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 81005e0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81005e2:	2302      	movs	r3, #2
 81005e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81005e6:	2300      	movs	r3, #0
 81005e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81005ea:	2303      	movs	r3, #3
 81005ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81005ee:	230c      	movs	r3, #12
 81005f0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81005f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81005f6:	4619      	mov	r1, r3
 81005f8:	4853      	ldr	r0, [pc, #332]	@ (8100748 <MX_GPIO_Init+0x31c>)
 81005fa:	f000 fc9d 	bl	8100f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 81005fe:	23c0      	movs	r3, #192	@ 0xc0
 8100600:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8100602:	2312      	movs	r3, #18
 8100604:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8100606:	2301      	movs	r3, #1
 8100608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810060a:	2300      	movs	r3, #0
 810060c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 810060e:	2304      	movs	r3, #4
 8100610:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100616:	4619      	mov	r1, r3
 8100618:	484c      	ldr	r0, [pc, #304]	@ (810074c <MX_GPIO_Init+0x320>)
 810061a:	f000 fc8d 	bl	8100f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH14 PH13 PH5
                           PH10 PH11 PH9 PH12
                           PH6 PH8 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_5
 810061e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8100622:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_12
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100624:	2302      	movs	r3, #2
 8100626:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100628:	2300      	movs	r3, #0
 810062a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810062c:	2303      	movs	r3, #3
 810062e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100630:	230c      	movs	r3, #12
 8100632:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8100634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100638:	4619      	mov	r1, r3
 810063a:	4845      	ldr	r0, [pc, #276]	@ (8100750 <MX_GPIO_Init+0x324>)
 810063c:	f000 fc7c 	bl	8100f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8100640:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8100644:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100646:	2302      	movs	r3, #2
 8100648:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810064a:	2300      	movs	r3, #0
 810064c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810064e:	2303      	movs	r3, #3
 8100650:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SDIO1;
 8100652:	2307      	movs	r3, #7
 8100654:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810065a:	4619      	mov	r1, r3
 810065c:	483b      	ldr	r0, [pc, #236]	@ (810074c <MX_GPIO_Init+0x320>)
 810065e:	f000 fc6b 	bl	8100f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8100662:	2304      	movs	r3, #4
 8100664:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100666:	2302      	movs	r3, #2
 8100668:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810066a:	2300      	movs	r3, #0
 810066c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810066e:	2303      	movs	r3, #3
 8100670:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8100672:	230c      	movs	r3, #12
 8100674:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810067a:	4619      	mov	r1, r3
 810067c:	4830      	ldr	r0, [pc, #192]	@ (8100740 <MX_GPIO_Init+0x314>)
 810067e:	f000 fc5b 	bl	8100f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8100682:	23c0      	movs	r3, #192	@ 0xc0
 8100684:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100686:	2302      	movs	r3, #2
 8100688:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810068a:	2300      	movs	r3, #0
 810068c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810068e:	2303      	movs	r3, #3
 8100690:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_SDIO1;
 8100692:	2308      	movs	r3, #8
 8100694:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8100696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810069a:	4619      	mov	r1, r3
 810069c:	4829      	ldr	r0, [pc, #164]	@ (8100744 <MX_GPIO_Init+0x318>)
 810069e:	f000 fc4b 	bl	8100f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 81006a2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 81006a6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81006a8:	2302      	movs	r3, #2
 81006aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006ac:	2300      	movs	r3, #0
 81006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81006b0:	2303      	movs	r3, #3
 81006b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81006b4:	230c      	movs	r3, #12
 81006b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81006b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81006bc:	4619      	mov	r1, r3
 81006be:	4825      	ldr	r0, [pc, #148]	@ (8100754 <MX_GPIO_Init+0x328>)
 81006c0:	f000 fc3a 	bl	8100f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 81006c4:	2340      	movs	r3, #64	@ 0x40
 81006c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81006c8:	2302      	movs	r3, #2
 81006ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006cc:	2300      	movs	r3, #0
 81006ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81006d0:	2300      	movs	r3, #0
 81006d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81006d4:	230a      	movs	r3, #10
 81006d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81006d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81006dc:	4619      	mov	r1, r3
 81006de:	4817      	ldr	r0, [pc, #92]	@ (810073c <MX_GPIO_Init+0x310>)
 81006e0:	f000 fc2a 	bl	8100f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 81006e4:	23c0      	movs	r3, #192	@ 0xc0
 81006e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81006e8:	2302      	movs	r3, #2
 81006ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006ec:	2300      	movs	r3, #0
 81006ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81006f0:	2300      	movs	r3, #0
 81006f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81006f4:	2309      	movs	r3, #9
 81006f6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81006f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81006fc:	4619      	mov	r1, r3
 81006fe:	4815      	ldr	r0, [pc, #84]	@ (8100754 <MX_GPIO_Init+0x328>)
 8100700:	f000 fc1a 	bl	8100f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8100704:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8100708:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810070a:	2302      	movs	r3, #2
 810070c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810070e:	2300      	movs	r3, #0
 8100710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100712:	2300      	movs	r3, #0
 8100714:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8100716:	230a      	movs	r3, #10
 8100718:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 810071a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810071e:	4619      	mov	r1, r3
 8100720:	480c      	ldr	r0, [pc, #48]	@ (8100754 <MX_GPIO_Init+0x328>)
 8100722:	f000 fc09 	bl	8100f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8100726:	230c      	movs	r3, #12
 8100728:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810072a:	2302      	movs	r3, #2
 810072c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810072e:	2300      	movs	r3, #0
 8100730:	e012      	b.n	8100758 <MX_GPIO_Init+0x32c>
 8100732:	bf00      	nop
 8100734:	58024400 	.word	0x58024400
 8100738:	58022000 	.word	0x58022000
 810073c:	58021800 	.word	0x58021800
 8100740:	58020c00 	.word	0x58020c00
 8100744:	58020800 	.word	0x58020800
 8100748:	58021000 	.word	0x58021000
 810074c:	58020400 	.word	0x58020400
 8100750:	58021c00 	.word	0x58021c00
 8100754:	58021400 	.word	0x58021400
 8100758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810075a:	2300      	movs	r3, #0
 810075c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810075e:	2309      	movs	r3, #9
 8100760:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8100762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100766:	4619      	mov	r1, r3
 8100768:	4813      	ldr	r0, [pc, #76]	@ (81007b8 <MX_GPIO_Init+0x38c>)
 810076a:	f000 fbe5 	bl	8100f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 810076e:	2304      	movs	r3, #4
 8100770:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100772:	2302      	movs	r3, #2
 8100774:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100776:	2300      	movs	r3, #0
 8100778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810077a:	2300      	movs	r3, #0
 810077c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810077e:	2309      	movs	r3, #9
 8100780:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100786:	4619      	mov	r1, r3
 8100788:	480c      	ldr	r0, [pc, #48]	@ (81007bc <MX_GPIO_Init+0x390>)
 810078a:	f000 fbd5 	bl	8100f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 810078e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8100792:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100794:	2302      	movs	r3, #2
 8100796:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100798:	2300      	movs	r3, #0
 810079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810079c:	2300      	movs	r3, #0
 810079e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 81007a0:	2304      	movs	r3, #4
 81007a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81007a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81007a8:	4619      	mov	r1, r3
 81007aa:	4804      	ldr	r0, [pc, #16]	@ (81007bc <MX_GPIO_Init+0x390>)
 81007ac:	f000 fbc4 	bl	8100f38 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 81007b0:	bf00      	nop
 81007b2:	3738      	adds	r7, #56	@ 0x38
 81007b4:	46bd      	mov	sp, r7
 81007b6:	bd80      	pop	{r7, pc}
 81007b8:	58021c00 	.word	0x58021c00
 81007bc:	58020400 	.word	0x58020400

081007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81007c0:	b480      	push	{r7}
 81007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81007c4:	b672      	cpsid	i
}
 81007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81007c8:	bf00      	nop
 81007ca:	e7fd      	b.n	81007c8 <Error_Handler+0x8>

081007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81007cc:	b480      	push	{r7}
 81007ce:	b083      	sub	sp, #12
 81007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81007d2:	4b0a      	ldr	r3, [pc, #40]	@ (81007fc <HAL_MspInit+0x30>)
 81007d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81007d8:	4a08      	ldr	r2, [pc, #32]	@ (81007fc <HAL_MspInit+0x30>)
 81007da:	f043 0302 	orr.w	r3, r3, #2
 81007de:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81007e2:	4b06      	ldr	r3, [pc, #24]	@ (81007fc <HAL_MspInit+0x30>)
 81007e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81007e8:	f003 0302 	and.w	r3, r3, #2
 81007ec:	607b      	str	r3, [r7, #4]
 81007ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81007f0:	bf00      	nop
 81007f2:	370c      	adds	r7, #12
 81007f4:	46bd      	mov	sp, r7
 81007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007fa:	4770      	bx	lr
 81007fc:	58024400 	.word	0x58024400

08100800 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8100800:	b580      	push	{r7, lr}
 8100802:	b0bc      	sub	sp, #240	@ 0xf0
 8100804:	af00      	add	r7, sp, #0
 8100806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100808:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810080c:	2200      	movs	r2, #0
 810080e:	601a      	str	r2, [r3, #0]
 8100810:	605a      	str	r2, [r3, #4]
 8100812:	609a      	str	r2, [r3, #8]
 8100814:	60da      	str	r2, [r3, #12]
 8100816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100818:	f107 0310 	add.w	r3, r7, #16
 810081c:	22c8      	movs	r2, #200	@ 0xc8
 810081e:	2100      	movs	r1, #0
 8100820:	4618      	mov	r0, r3
 8100822:	f002 fafb 	bl	8102e1c <memset>
  if(DFSDM1_Init == 0)
 8100826:	4b34      	ldr	r3, [pc, #208]	@ (81008f8 <HAL_DFSDM_ChannelMspInit+0xf8>)
 8100828:	681b      	ldr	r3, [r3, #0]
 810082a:	2b00      	cmp	r3, #0
 810082c:	d15f      	bne.n	81008ee <HAL_DFSDM_ChannelMspInit+0xee>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 810082e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8100832:	f04f 0300 	mov.w	r3, #0
 8100836:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 810083a:	2300      	movs	r3, #0
 810083c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100840:	f107 0310 	add.w	r3, r7, #16
 8100844:	4618      	mov	r0, r3
 8100846:	f000 ff3b 	bl	81016c0 <HAL_RCCEx_PeriphCLKConfig>
 810084a:	4603      	mov	r3, r0
 810084c:	2b00      	cmp	r3, #0
 810084e:	d001      	beq.n	8100854 <HAL_DFSDM_ChannelMspInit+0x54>
    {
      Error_Handler();
 8100850:	f7ff ffb6 	bl	81007c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8100854:	4b29      	ldr	r3, [pc, #164]	@ (81008fc <HAL_DFSDM_ChannelMspInit+0xfc>)
 8100856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810085a:	4a28      	ldr	r2, [pc, #160]	@ (81008fc <HAL_DFSDM_ChannelMspInit+0xfc>)
 810085c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8100860:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8100864:	4b25      	ldr	r3, [pc, #148]	@ (81008fc <HAL_DFSDM_ChannelMspInit+0xfc>)
 8100866:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810086a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810086e:	60fb      	str	r3, [r7, #12]
 8100870:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8100872:	4b22      	ldr	r3, [pc, #136]	@ (81008fc <HAL_DFSDM_ChannelMspInit+0xfc>)
 8100874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100878:	4a20      	ldr	r2, [pc, #128]	@ (81008fc <HAL_DFSDM_ChannelMspInit+0xfc>)
 810087a:	f043 0304 	orr.w	r3, r3, #4
 810087e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100882:	4b1e      	ldr	r3, [pc, #120]	@ (81008fc <HAL_DFSDM_ChannelMspInit+0xfc>)
 8100884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100888:	f003 0304 	and.w	r3, r3, #4
 810088c:	60bb      	str	r3, [r7, #8]
 810088e:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PC3     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM_CLK_Pin;
 8100890:	2304      	movs	r3, #4
 8100892:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100896:	2302      	movs	r3, #2
 8100898:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810089c:	2300      	movs	r3, #0
 810089e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81008a2:	2300      	movs	r3, #0
 81008a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 81008a8:	2306      	movs	r3, #6
 81008aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(DFSDM_CLK_GPIO_Port, &GPIO_InitStruct);
 81008ae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81008b2:	4619      	mov	r1, r3
 81008b4:	4812      	ldr	r0, [pc, #72]	@ (8100900 <HAL_DFSDM_ChannelMspInit+0x100>)
 81008b6:	f000 fb3f 	bl	8100f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSM_DAT1_Pin;
 81008ba:	2308      	movs	r3, #8
 81008bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81008c0:	2302      	movs	r3, #2
 81008c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81008c6:	2300      	movs	r3, #0
 81008c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81008cc:	2300      	movs	r3, #0
 81008ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 81008d2:	2303      	movs	r3, #3
 81008d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(DFSM_DAT1_GPIO_Port, &GPIO_InitStruct);
 81008d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81008dc:	4619      	mov	r1, r3
 81008de:	4808      	ldr	r0, [pc, #32]	@ (8100900 <HAL_DFSDM_ChannelMspInit+0x100>)
 81008e0:	f000 fb2a 	bl	8100f38 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 81008e4:	4b04      	ldr	r3, [pc, #16]	@ (81008f8 <HAL_DFSDM_ChannelMspInit+0xf8>)
 81008e6:	681b      	ldr	r3, [r3, #0]
 81008e8:	3301      	adds	r3, #1
 81008ea:	4a03      	ldr	r2, [pc, #12]	@ (81008f8 <HAL_DFSDM_ChannelMspInit+0xf8>)
 81008ec:	6013      	str	r3, [r2, #0]
  }

}
 81008ee:	bf00      	nop
 81008f0:	37f0      	adds	r7, #240	@ 0xf0
 81008f2:	46bd      	mov	sp, r7
 81008f4:	bd80      	pop	{r7, pc}
 81008f6:	bf00      	nop
 81008f8:	10000064 	.word	0x10000064
 81008fc:	58024400 	.word	0x58024400
 8100900:	58020800 	.word	0x58020800

08100904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100904:	b480      	push	{r7}
 8100906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100908:	bf00      	nop
 810090a:	e7fd      	b.n	8100908 <NMI_Handler+0x4>

0810090c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810090c:	b480      	push	{r7}
 810090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100910:	bf00      	nop
 8100912:	e7fd      	b.n	8100910 <HardFault_Handler+0x4>

08100914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100914:	b480      	push	{r7}
 8100916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100918:	bf00      	nop
 810091a:	e7fd      	b.n	8100918 <MemManage_Handler+0x4>

0810091c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810091c:	b480      	push	{r7}
 810091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100920:	bf00      	nop
 8100922:	e7fd      	b.n	8100920 <BusFault_Handler+0x4>

08100924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100924:	b480      	push	{r7}
 8100926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100928:	bf00      	nop
 810092a:	e7fd      	b.n	8100928 <UsageFault_Handler+0x4>

0810092c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810092c:	b480      	push	{r7}
 810092e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100930:	bf00      	nop
 8100932:	46bd      	mov	sp, r7
 8100934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100938:	4770      	bx	lr

0810093a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810093a:	b480      	push	{r7}
 810093c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810093e:	bf00      	nop
 8100940:	46bd      	mov	sp, r7
 8100942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100946:	4770      	bx	lr

08100948 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100948:	b480      	push	{r7}
 810094a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810094c:	bf00      	nop
 810094e:	46bd      	mov	sp, r7
 8100950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100954:	4770      	bx	lr

08100956 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100956:	b580      	push	{r7, lr}
 8100958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810095a:	f000 f8c3 	bl	8100ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810095e:	bf00      	nop
 8100960:	bd80      	pop	{r7, pc}
	...

08100964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100964:	f8df d038 	ldr.w	sp, [pc, #56]	@ 81009a0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8100968:	f7ff fcce 	bl	8100308 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 810096c:	f7ff fcb4 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100970:	480c      	ldr	r0, [pc, #48]	@ (81009a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100972:	490d      	ldr	r1, [pc, #52]	@ (81009a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100974:	4a0d      	ldr	r2, [pc, #52]	@ (81009ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100978:	e002      	b.n	8100980 <LoopCopyDataInit>

0810097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810097e:	3304      	adds	r3, #4

08100980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100984:	d3f9      	bcc.n	810097a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100986:	4a0a      	ldr	r2, [pc, #40]	@ (81009b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100988:	4c0a      	ldr	r4, [pc, #40]	@ (81009b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 810098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810098c:	e001      	b.n	8100992 <LoopFillZerobss>

0810098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100990:	3204      	adds	r2, #4

08100992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100994:	d3fb      	bcc.n	810098e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100996:	f002 fa49 	bl	8102e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810099a:	f7ff fccd 	bl	8100338 <main>
  bx  lr
 810099e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81009a0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81009a4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81009a8:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 81009ac:	08102ea4 	.word	0x08102ea4
  ldr r2, =_sbss
 81009b0:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 81009b4:	10000090 	.word	0x10000090

081009b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81009b8:	e7fe      	b.n	81009b8 <ADC3_IRQHandler>
	...

081009bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81009bc:	b580      	push	{r7, lr}
 81009be:	b082      	sub	sp, #8
 81009c0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81009c2:	4b28      	ldr	r3, [pc, #160]	@ (8100a64 <HAL_Init+0xa8>)
 81009c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81009c8:	4a26      	ldr	r2, [pc, #152]	@ (8100a64 <HAL_Init+0xa8>)
 81009ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81009ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81009d2:	4b24      	ldr	r3, [pc, #144]	@ (8100a64 <HAL_Init+0xa8>)
 81009d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81009d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81009dc:	603b      	str	r3, [r7, #0]
 81009de:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81009e0:	4b21      	ldr	r3, [pc, #132]	@ (8100a68 <HAL_Init+0xac>)
 81009e2:	681b      	ldr	r3, [r3, #0]
 81009e4:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81009e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81009ec:	4a1e      	ldr	r2, [pc, #120]	@ (8100a68 <HAL_Init+0xac>)
 81009ee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81009f2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81009f4:	4b1c      	ldr	r3, [pc, #112]	@ (8100a68 <HAL_Init+0xac>)
 81009f6:	681b      	ldr	r3, [r3, #0]
 81009f8:	4a1b      	ldr	r2, [pc, #108]	@ (8100a68 <HAL_Init+0xac>)
 81009fa:	f043 0301 	orr.w	r3, r3, #1
 81009fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100a00:	2003      	movs	r0, #3
 8100a02:	f000 f941 	bl	8100c88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100a06:	f000 fce1 	bl	81013cc <HAL_RCC_GetSysClockFreq>
 8100a0a:	4602      	mov	r2, r0
 8100a0c:	4b15      	ldr	r3, [pc, #84]	@ (8100a64 <HAL_Init+0xa8>)
 8100a0e:	699b      	ldr	r3, [r3, #24]
 8100a10:	0a1b      	lsrs	r3, r3, #8
 8100a12:	f003 030f 	and.w	r3, r3, #15
 8100a16:	4915      	ldr	r1, [pc, #84]	@ (8100a6c <HAL_Init+0xb0>)
 8100a18:	5ccb      	ldrb	r3, [r1, r3]
 8100a1a:	f003 031f 	and.w	r3, r3, #31
 8100a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8100a22:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100a24:	4b0f      	ldr	r3, [pc, #60]	@ (8100a64 <HAL_Init+0xa8>)
 8100a26:	699b      	ldr	r3, [r3, #24]
 8100a28:	f003 030f 	and.w	r3, r3, #15
 8100a2c:	4a0f      	ldr	r2, [pc, #60]	@ (8100a6c <HAL_Init+0xb0>)
 8100a2e:	5cd3      	ldrb	r3, [r2, r3]
 8100a30:	f003 031f 	and.w	r3, r3, #31
 8100a34:	687a      	ldr	r2, [r7, #4]
 8100a36:	fa22 f303 	lsr.w	r3, r2, r3
 8100a3a:	4a0d      	ldr	r2, [pc, #52]	@ (8100a70 <HAL_Init+0xb4>)
 8100a3c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8100a70 <HAL_Init+0xb4>)
 8100a40:	681b      	ldr	r3, [r3, #0]
 8100a42:	4a0c      	ldr	r2, [pc, #48]	@ (8100a74 <HAL_Init+0xb8>)
 8100a44:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100a46:	2000      	movs	r0, #0
 8100a48:	f000 f816 	bl	8100a78 <HAL_InitTick>
 8100a4c:	4603      	mov	r3, r0
 8100a4e:	2b00      	cmp	r3, #0
 8100a50:	d001      	beq.n	8100a56 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100a52:	2301      	movs	r3, #1
 8100a54:	e002      	b.n	8100a5c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100a56:	f7ff feb9 	bl	81007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100a5a:	2300      	movs	r3, #0
}
 8100a5c:	4618      	mov	r0, r3
 8100a5e:	3708      	adds	r7, #8
 8100a60:	46bd      	mov	sp, r7
 8100a62:	bd80      	pop	{r7, pc}
 8100a64:	58024400 	.word	0x58024400
 8100a68:	40024400 	.word	0x40024400
 8100a6c:	08102e8c 	.word	0x08102e8c
 8100a70:	10000004 	.word	0x10000004
 8100a74:	10000000 	.word	0x10000000

08100a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100a78:	b580      	push	{r7, lr}
 8100a7a:	b082      	sub	sp, #8
 8100a7c:	af00      	add	r7, sp, #0
 8100a7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100a80:	4b15      	ldr	r3, [pc, #84]	@ (8100ad8 <HAL_InitTick+0x60>)
 8100a82:	781b      	ldrb	r3, [r3, #0]
 8100a84:	2b00      	cmp	r3, #0
 8100a86:	d101      	bne.n	8100a8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100a88:	2301      	movs	r3, #1
 8100a8a:	e021      	b.n	8100ad0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100a8c:	4b13      	ldr	r3, [pc, #76]	@ (8100adc <HAL_InitTick+0x64>)
 8100a8e:	681a      	ldr	r2, [r3, #0]
 8100a90:	4b11      	ldr	r3, [pc, #68]	@ (8100ad8 <HAL_InitTick+0x60>)
 8100a92:	781b      	ldrb	r3, [r3, #0]
 8100a94:	4619      	mov	r1, r3
 8100a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8100a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8100aa2:	4618      	mov	r0, r3
 8100aa4:	f000 f915 	bl	8100cd2 <HAL_SYSTICK_Config>
 8100aa8:	4603      	mov	r3, r0
 8100aaa:	2b00      	cmp	r3, #0
 8100aac:	d001      	beq.n	8100ab2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100aae:	2301      	movs	r3, #1
 8100ab0:	e00e      	b.n	8100ad0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100ab2:	687b      	ldr	r3, [r7, #4]
 8100ab4:	2b0f      	cmp	r3, #15
 8100ab6:	d80a      	bhi.n	8100ace <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100ab8:	2200      	movs	r2, #0
 8100aba:	6879      	ldr	r1, [r7, #4]
 8100abc:	f04f 30ff 	mov.w	r0, #4294967295
 8100ac0:	f000 f8ed 	bl	8100c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100ac4:	4a06      	ldr	r2, [pc, #24]	@ (8100ae0 <HAL_InitTick+0x68>)
 8100ac6:	687b      	ldr	r3, [r7, #4]
 8100ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100aca:	2300      	movs	r3, #0
 8100acc:	e000      	b.n	8100ad0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100ace:	2301      	movs	r3, #1
}
 8100ad0:	4618      	mov	r0, r3
 8100ad2:	3708      	adds	r7, #8
 8100ad4:	46bd      	mov	sp, r7
 8100ad6:	bd80      	pop	{r7, pc}
 8100ad8:	1000000c 	.word	0x1000000c
 8100adc:	10000000 	.word	0x10000000
 8100ae0:	10000008 	.word	0x10000008

08100ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100ae4:	b480      	push	{r7}
 8100ae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100ae8:	4b06      	ldr	r3, [pc, #24]	@ (8100b04 <HAL_IncTick+0x20>)
 8100aea:	781b      	ldrb	r3, [r3, #0]
 8100aec:	461a      	mov	r2, r3
 8100aee:	4b06      	ldr	r3, [pc, #24]	@ (8100b08 <HAL_IncTick+0x24>)
 8100af0:	681b      	ldr	r3, [r3, #0]
 8100af2:	4413      	add	r3, r2
 8100af4:	4a04      	ldr	r2, [pc, #16]	@ (8100b08 <HAL_IncTick+0x24>)
 8100af6:	6013      	str	r3, [r2, #0]
}
 8100af8:	bf00      	nop
 8100afa:	46bd      	mov	sp, r7
 8100afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b00:	4770      	bx	lr
 8100b02:	bf00      	nop
 8100b04:	1000000c 	.word	0x1000000c
 8100b08:	10000068 	.word	0x10000068

08100b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100b0c:	b480      	push	{r7}
 8100b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8100b10:	4b03      	ldr	r3, [pc, #12]	@ (8100b20 <HAL_GetTick+0x14>)
 8100b12:	681b      	ldr	r3, [r3, #0]
}
 8100b14:	4618      	mov	r0, r3
 8100b16:	46bd      	mov	sp, r7
 8100b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b1c:	4770      	bx	lr
 8100b1e:	bf00      	nop
 8100b20:	10000068 	.word	0x10000068

08100b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100b24:	b480      	push	{r7}
 8100b26:	b085      	sub	sp, #20
 8100b28:	af00      	add	r7, sp, #0
 8100b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100b2c:	687b      	ldr	r3, [r7, #4]
 8100b2e:	f003 0307 	and.w	r3, r3, #7
 8100b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100b34:	4b0c      	ldr	r3, [pc, #48]	@ (8100b68 <__NVIC_SetPriorityGrouping+0x44>)
 8100b36:	68db      	ldr	r3, [r3, #12]
 8100b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100b3a:	68ba      	ldr	r2, [r7, #8]
 8100b3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100b40:	4013      	ands	r3, r2
 8100b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100b44:	68fb      	ldr	r3, [r7, #12]
 8100b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100b48:	68bb      	ldr	r3, [r7, #8]
 8100b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100b4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100b56:	4a04      	ldr	r2, [pc, #16]	@ (8100b68 <__NVIC_SetPriorityGrouping+0x44>)
 8100b58:	68bb      	ldr	r3, [r7, #8]
 8100b5a:	60d3      	str	r3, [r2, #12]
}
 8100b5c:	bf00      	nop
 8100b5e:	3714      	adds	r7, #20
 8100b60:	46bd      	mov	sp, r7
 8100b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b66:	4770      	bx	lr
 8100b68:	e000ed00 	.word	0xe000ed00

08100b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100b6c:	b480      	push	{r7}
 8100b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100b70:	4b04      	ldr	r3, [pc, #16]	@ (8100b84 <__NVIC_GetPriorityGrouping+0x18>)
 8100b72:	68db      	ldr	r3, [r3, #12]
 8100b74:	0a1b      	lsrs	r3, r3, #8
 8100b76:	f003 0307 	and.w	r3, r3, #7
}
 8100b7a:	4618      	mov	r0, r3
 8100b7c:	46bd      	mov	sp, r7
 8100b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b82:	4770      	bx	lr
 8100b84:	e000ed00 	.word	0xe000ed00

08100b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100b88:	b480      	push	{r7}
 8100b8a:	b083      	sub	sp, #12
 8100b8c:	af00      	add	r7, sp, #0
 8100b8e:	4603      	mov	r3, r0
 8100b90:	6039      	str	r1, [r7, #0]
 8100b92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b98:	2b00      	cmp	r3, #0
 8100b9a:	db0a      	blt.n	8100bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100b9c:	683b      	ldr	r3, [r7, #0]
 8100b9e:	b2da      	uxtb	r2, r3
 8100ba0:	490c      	ldr	r1, [pc, #48]	@ (8100bd4 <__NVIC_SetPriority+0x4c>)
 8100ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100ba6:	0112      	lsls	r2, r2, #4
 8100ba8:	b2d2      	uxtb	r2, r2
 8100baa:	440b      	add	r3, r1
 8100bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100bb0:	e00a      	b.n	8100bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100bb2:	683b      	ldr	r3, [r7, #0]
 8100bb4:	b2da      	uxtb	r2, r3
 8100bb6:	4908      	ldr	r1, [pc, #32]	@ (8100bd8 <__NVIC_SetPriority+0x50>)
 8100bb8:	88fb      	ldrh	r3, [r7, #6]
 8100bba:	f003 030f 	and.w	r3, r3, #15
 8100bbe:	3b04      	subs	r3, #4
 8100bc0:	0112      	lsls	r2, r2, #4
 8100bc2:	b2d2      	uxtb	r2, r2
 8100bc4:	440b      	add	r3, r1
 8100bc6:	761a      	strb	r2, [r3, #24]
}
 8100bc8:	bf00      	nop
 8100bca:	370c      	adds	r7, #12
 8100bcc:	46bd      	mov	sp, r7
 8100bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bd2:	4770      	bx	lr
 8100bd4:	e000e100 	.word	0xe000e100
 8100bd8:	e000ed00 	.word	0xe000ed00

08100bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100bdc:	b480      	push	{r7}
 8100bde:	b089      	sub	sp, #36	@ 0x24
 8100be0:	af00      	add	r7, sp, #0
 8100be2:	60f8      	str	r0, [r7, #12]
 8100be4:	60b9      	str	r1, [r7, #8]
 8100be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100be8:	68fb      	ldr	r3, [r7, #12]
 8100bea:	f003 0307 	and.w	r3, r3, #7
 8100bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100bf0:	69fb      	ldr	r3, [r7, #28]
 8100bf2:	f1c3 0307 	rsb	r3, r3, #7
 8100bf6:	2b04      	cmp	r3, #4
 8100bf8:	bf28      	it	cs
 8100bfa:	2304      	movcs	r3, #4
 8100bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100bfe:	69fb      	ldr	r3, [r7, #28]
 8100c00:	3304      	adds	r3, #4
 8100c02:	2b06      	cmp	r3, #6
 8100c04:	d902      	bls.n	8100c0c <NVIC_EncodePriority+0x30>
 8100c06:	69fb      	ldr	r3, [r7, #28]
 8100c08:	3b03      	subs	r3, #3
 8100c0a:	e000      	b.n	8100c0e <NVIC_EncodePriority+0x32>
 8100c0c:	2300      	movs	r3, #0
 8100c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c10:	f04f 32ff 	mov.w	r2, #4294967295
 8100c14:	69bb      	ldr	r3, [r7, #24]
 8100c16:	fa02 f303 	lsl.w	r3, r2, r3
 8100c1a:	43da      	mvns	r2, r3
 8100c1c:	68bb      	ldr	r3, [r7, #8]
 8100c1e:	401a      	ands	r2, r3
 8100c20:	697b      	ldr	r3, [r7, #20]
 8100c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100c24:	f04f 31ff 	mov.w	r1, #4294967295
 8100c28:	697b      	ldr	r3, [r7, #20]
 8100c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8100c2e:	43d9      	mvns	r1, r3
 8100c30:	687b      	ldr	r3, [r7, #4]
 8100c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c34:	4313      	orrs	r3, r2
         );
}
 8100c36:	4618      	mov	r0, r3
 8100c38:	3724      	adds	r7, #36	@ 0x24
 8100c3a:	46bd      	mov	sp, r7
 8100c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c40:	4770      	bx	lr
	...

08100c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100c44:	b580      	push	{r7, lr}
 8100c46:	b082      	sub	sp, #8
 8100c48:	af00      	add	r7, sp, #0
 8100c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100c4c:	687b      	ldr	r3, [r7, #4]
 8100c4e:	3b01      	subs	r3, #1
 8100c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8100c54:	d301      	bcc.n	8100c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100c56:	2301      	movs	r3, #1
 8100c58:	e00f      	b.n	8100c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8100c84 <SysTick_Config+0x40>)
 8100c5c:	687b      	ldr	r3, [r7, #4]
 8100c5e:	3b01      	subs	r3, #1
 8100c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100c62:	210f      	movs	r1, #15
 8100c64:	f04f 30ff 	mov.w	r0, #4294967295
 8100c68:	f7ff ff8e 	bl	8100b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100c6c:	4b05      	ldr	r3, [pc, #20]	@ (8100c84 <SysTick_Config+0x40>)
 8100c6e:	2200      	movs	r2, #0
 8100c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100c72:	4b04      	ldr	r3, [pc, #16]	@ (8100c84 <SysTick_Config+0x40>)
 8100c74:	2207      	movs	r2, #7
 8100c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100c78:	2300      	movs	r3, #0
}
 8100c7a:	4618      	mov	r0, r3
 8100c7c:	3708      	adds	r7, #8
 8100c7e:	46bd      	mov	sp, r7
 8100c80:	bd80      	pop	{r7, pc}
 8100c82:	bf00      	nop
 8100c84:	e000e010 	.word	0xe000e010

08100c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100c88:	b580      	push	{r7, lr}
 8100c8a:	b082      	sub	sp, #8
 8100c8c:	af00      	add	r7, sp, #0
 8100c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100c90:	6878      	ldr	r0, [r7, #4]
 8100c92:	f7ff ff47 	bl	8100b24 <__NVIC_SetPriorityGrouping>
}
 8100c96:	bf00      	nop
 8100c98:	3708      	adds	r7, #8
 8100c9a:	46bd      	mov	sp, r7
 8100c9c:	bd80      	pop	{r7, pc}

08100c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100c9e:	b580      	push	{r7, lr}
 8100ca0:	b086      	sub	sp, #24
 8100ca2:	af00      	add	r7, sp, #0
 8100ca4:	4603      	mov	r3, r0
 8100ca6:	60b9      	str	r1, [r7, #8]
 8100ca8:	607a      	str	r2, [r7, #4]
 8100caa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100cac:	f7ff ff5e 	bl	8100b6c <__NVIC_GetPriorityGrouping>
 8100cb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100cb2:	687a      	ldr	r2, [r7, #4]
 8100cb4:	68b9      	ldr	r1, [r7, #8]
 8100cb6:	6978      	ldr	r0, [r7, #20]
 8100cb8:	f7ff ff90 	bl	8100bdc <NVIC_EncodePriority>
 8100cbc:	4602      	mov	r2, r0
 8100cbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100cc2:	4611      	mov	r1, r2
 8100cc4:	4618      	mov	r0, r3
 8100cc6:	f7ff ff5f 	bl	8100b88 <__NVIC_SetPriority>
}
 8100cca:	bf00      	nop
 8100ccc:	3718      	adds	r7, #24
 8100cce:	46bd      	mov	sp, r7
 8100cd0:	bd80      	pop	{r7, pc}

08100cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100cd2:	b580      	push	{r7, lr}
 8100cd4:	b082      	sub	sp, #8
 8100cd6:	af00      	add	r7, sp, #0
 8100cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100cda:	6878      	ldr	r0, [r7, #4]
 8100cdc:	f7ff ffb2 	bl	8100c44 <SysTick_Config>
 8100ce0:	4603      	mov	r3, r0
}
 8100ce2:	4618      	mov	r0, r3
 8100ce4:	3708      	adds	r7, #8
 8100ce6:	46bd      	mov	sp, r7
 8100ce8:	bd80      	pop	{r7, pc}
	...

08100cec <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100cec:	b480      	push	{r7}
 8100cee:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100cf0:	4b06      	ldr	r3, [pc, #24]	@ (8100d0c <HAL_GetCurrentCPUID+0x20>)
 8100cf2:	681b      	ldr	r3, [r3, #0]
 8100cf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8100cf8:	2b70      	cmp	r3, #112	@ 0x70
 8100cfa:	d101      	bne.n	8100d00 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8100cfc:	2303      	movs	r3, #3
 8100cfe:	e000      	b.n	8100d02 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8100d00:	2301      	movs	r3, #1
  }
}
 8100d02:	4618      	mov	r0, r3
 8100d04:	46bd      	mov	sp, r7
 8100d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d0a:	4770      	bx	lr
 8100d0c:	e000ed00 	.word	0xe000ed00

08100d10 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8100d10:	b580      	push	{r7, lr}
 8100d12:	b086      	sub	sp, #24
 8100d14:	af00      	add	r7, sp, #0
 8100d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8100d18:	687b      	ldr	r3, [r7, #4]
 8100d1a:	2b00      	cmp	r3, #0
 8100d1c:	d101      	bne.n	8100d22 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8100d1e:	2301      	movs	r3, #1
 8100d20:	e0b4      	b.n	8100e8c <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8100d22:	4b5c      	ldr	r3, [pc, #368]	@ (8100e94 <HAL_DFSDM_ChannelInit+0x184>)
 8100d24:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 8100d26:	4b5c      	ldr	r3, [pc, #368]	@ (8100e98 <HAL_DFSDM_ChannelInit+0x188>)
 8100d28:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 8100d2a:	4b5c      	ldr	r3, [pc, #368]	@ (8100e9c <HAL_DFSDM_ChannelInit+0x18c>)
 8100d2c:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8100d2e:	687b      	ldr	r3, [r7, #4]
 8100d30:	681b      	ldr	r3, [r3, #0]
 8100d32:	4618      	mov	r0, r3
 8100d34:	f000 f8b4 	bl	8100ea0 <DFSDM_GetChannelFromInstance>
 8100d38:	4603      	mov	r3, r0
 8100d3a:	009b      	lsls	r3, r3, #2
 8100d3c:	693a      	ldr	r2, [r7, #16]
 8100d3e:	4413      	add	r3, r2
 8100d40:	681b      	ldr	r3, [r3, #0]
 8100d42:	2b00      	cmp	r3, #0
 8100d44:	d001      	beq.n	8100d4a <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 8100d46:	2301      	movs	r3, #1
 8100d48:	e0a0      	b.n	8100e8c <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8100d4a:	6878      	ldr	r0, [r7, #4]
 8100d4c:	f7ff fd58 	bl	8100800 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 8100d50:	697b      	ldr	r3, [r7, #20]
 8100d52:	681b      	ldr	r3, [r3, #0]
 8100d54:	1c5a      	adds	r2, r3, #1
 8100d56:	697b      	ldr	r3, [r7, #20]
 8100d58:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8100d5a:	697b      	ldr	r3, [r7, #20]
 8100d5c:	681b      	ldr	r3, [r3, #0]
 8100d5e:	2b01      	cmp	r3, #1
 8100d60:	d125      	bne.n	8100dae <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8100d62:	68fb      	ldr	r3, [r7, #12]
 8100d64:	681b      	ldr	r3, [r3, #0]
 8100d66:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8100d6a:	68fb      	ldr	r3, [r7, #12]
 8100d6c:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8100d6e:	68fb      	ldr	r3, [r7, #12]
 8100d70:	681a      	ldr	r2, [r3, #0]
 8100d72:	687b      	ldr	r3, [r7, #4]
 8100d74:	689b      	ldr	r3, [r3, #8]
 8100d76:	431a      	orrs	r2, r3
 8100d78:	68fb      	ldr	r3, [r7, #12]
 8100d7a:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8100d7c:	68fb      	ldr	r3, [r7, #12]
 8100d7e:	681b      	ldr	r3, [r3, #0]
 8100d80:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8100d84:	68fb      	ldr	r3, [r7, #12]
 8100d86:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8100d88:	687b      	ldr	r3, [r7, #4]
 8100d8a:	791b      	ldrb	r3, [r3, #4]
 8100d8c:	2b01      	cmp	r3, #1
 8100d8e:	d108      	bne.n	8100da2 <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8100d90:	68fb      	ldr	r3, [r7, #12]
 8100d92:	681a      	ldr	r2, [r3, #0]
 8100d94:	687b      	ldr	r3, [r7, #4]
 8100d96:	68db      	ldr	r3, [r3, #12]
 8100d98:	3b01      	subs	r3, #1
 8100d9a:	041b      	lsls	r3, r3, #16
 8100d9c:	431a      	orrs	r2, r3
 8100d9e:	68fb      	ldr	r3, [r7, #12]
 8100da0:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8100da2:	68fb      	ldr	r3, [r7, #12]
 8100da4:	681b      	ldr	r3, [r3, #0]
 8100da6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8100daa:	68fb      	ldr	r3, [r7, #12]
 8100dac:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8100dae:	687b      	ldr	r3, [r7, #4]
 8100db0:	681b      	ldr	r3, [r3, #0]
 8100db2:	681a      	ldr	r2, [r3, #0]
 8100db4:	687b      	ldr	r3, [r7, #4]
 8100db6:	681b      	ldr	r3, [r3, #0]
 8100db8:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8100dbc:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8100dbe:	687b      	ldr	r3, [r7, #4]
 8100dc0:	681b      	ldr	r3, [r3, #0]
 8100dc2:	6819      	ldr	r1, [r3, #0]
 8100dc4:	687b      	ldr	r3, [r7, #4]
 8100dc6:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8100dc8:	687b      	ldr	r3, [r7, #4]
 8100dca:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8100dcc:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8100dce:	687b      	ldr	r3, [r7, #4]
 8100dd0:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8100dd2:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8100dd4:	687b      	ldr	r3, [r7, #4]
 8100dd6:	681b      	ldr	r3, [r3, #0]
 8100dd8:	430a      	orrs	r2, r1
 8100dda:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8100ddc:	687b      	ldr	r3, [r7, #4]
 8100dde:	681b      	ldr	r3, [r3, #0]
 8100de0:	681a      	ldr	r2, [r3, #0]
 8100de2:	687b      	ldr	r3, [r7, #4]
 8100de4:	681b      	ldr	r3, [r3, #0]
 8100de6:	f022 020f 	bic.w	r2, r2, #15
 8100dea:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8100dec:	687b      	ldr	r3, [r7, #4]
 8100dee:	681b      	ldr	r3, [r3, #0]
 8100df0:	6819      	ldr	r1, [r3, #0]
 8100df2:	687b      	ldr	r3, [r7, #4]
 8100df4:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8100df6:	687b      	ldr	r3, [r7, #4]
 8100df8:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8100dfa:	431a      	orrs	r2, r3
 8100dfc:	687b      	ldr	r3, [r7, #4]
 8100dfe:	681b      	ldr	r3, [r3, #0]
 8100e00:	430a      	orrs	r2, r1
 8100e02:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8100e04:	687b      	ldr	r3, [r7, #4]
 8100e06:	681b      	ldr	r3, [r3, #0]
 8100e08:	689a      	ldr	r2, [r3, #8]
 8100e0a:	687b      	ldr	r3, [r7, #4]
 8100e0c:	681b      	ldr	r3, [r3, #0]
 8100e0e:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8100e12:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8100e14:	687b      	ldr	r3, [r7, #4]
 8100e16:	681b      	ldr	r3, [r3, #0]
 8100e18:	6899      	ldr	r1, [r3, #8]
 8100e1a:	687b      	ldr	r3, [r7, #4]
 8100e1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8100e1e:	687b      	ldr	r3, [r7, #4]
 8100e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100e22:	3b01      	subs	r3, #1
 8100e24:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8100e26:	431a      	orrs	r2, r3
 8100e28:	687b      	ldr	r3, [r7, #4]
 8100e2a:	681b      	ldr	r3, [r3, #0]
 8100e2c:	430a      	orrs	r2, r1
 8100e2e:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8100e30:	687b      	ldr	r3, [r7, #4]
 8100e32:	681b      	ldr	r3, [r3, #0]
 8100e34:	685a      	ldr	r2, [r3, #4]
 8100e36:	687b      	ldr	r3, [r7, #4]
 8100e38:	681b      	ldr	r3, [r3, #0]
 8100e3a:	f002 0207 	and.w	r2, r2, #7
 8100e3e:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8100e40:	687b      	ldr	r3, [r7, #4]
 8100e42:	681b      	ldr	r3, [r3, #0]
 8100e44:	6859      	ldr	r1, [r3, #4]
 8100e46:	687b      	ldr	r3, [r7, #4]
 8100e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8100e4a:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8100e4c:	687b      	ldr	r3, [r7, #4]
 8100e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100e50:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8100e52:	431a      	orrs	r2, r3
 8100e54:	687b      	ldr	r3, [r7, #4]
 8100e56:	681b      	ldr	r3, [r3, #0]
 8100e58:	430a      	orrs	r2, r1
 8100e5a:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8100e5c:	687b      	ldr	r3, [r7, #4]
 8100e5e:	681b      	ldr	r3, [r3, #0]
 8100e60:	681a      	ldr	r2, [r3, #0]
 8100e62:	687b      	ldr	r3, [r7, #4]
 8100e64:	681b      	ldr	r3, [r3, #0]
 8100e66:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8100e6a:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8100e6c:	687b      	ldr	r3, [r7, #4]
 8100e6e:	2201      	movs	r2, #1
 8100e70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8100e74:	687b      	ldr	r3, [r7, #4]
 8100e76:	681b      	ldr	r3, [r3, #0]
 8100e78:	4618      	mov	r0, r3
 8100e7a:	f000 f811 	bl	8100ea0 <DFSDM_GetChannelFromInstance>
 8100e7e:	4603      	mov	r3, r0
 8100e80:	009b      	lsls	r3, r3, #2
 8100e82:	693a      	ldr	r2, [r7, #16]
 8100e84:	4413      	add	r3, r2
 8100e86:	687a      	ldr	r2, [r7, #4]
 8100e88:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8100e8a:	2300      	movs	r3, #0
}
 8100e8c:	4618      	mov	r0, r3
 8100e8e:	3718      	adds	r7, #24
 8100e90:	46bd      	mov	sp, r7
 8100e92:	bd80      	pop	{r7, pc}
 8100e94:	1000006c 	.word	0x1000006c
 8100e98:	10000070 	.word	0x10000070
 8100e9c:	40017000 	.word	0x40017000

08100ea0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8100ea0:	b480      	push	{r7}
 8100ea2:	b085      	sub	sp, #20
 8100ea4:	af00      	add	r7, sp, #0
 8100ea6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8100ea8:	687b      	ldr	r3, [r7, #4]
 8100eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8100f1c <DFSDM_GetChannelFromInstance+0x7c>)
 8100eac:	4293      	cmp	r3, r2
 8100eae:	d102      	bne.n	8100eb6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8100eb0:	2300      	movs	r3, #0
 8100eb2:	60fb      	str	r3, [r7, #12]
 8100eb4:	e02b      	b.n	8100f0e <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 8100eb6:	687b      	ldr	r3, [r7, #4]
 8100eb8:	4a19      	ldr	r2, [pc, #100]	@ (8100f20 <DFSDM_GetChannelFromInstance+0x80>)
 8100eba:	4293      	cmp	r3, r2
 8100ebc:	d102      	bne.n	8100ec4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8100ebe:	2301      	movs	r3, #1
 8100ec0:	60fb      	str	r3, [r7, #12]
 8100ec2:	e024      	b.n	8100f0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8100ec4:	687b      	ldr	r3, [r7, #4]
 8100ec6:	4a17      	ldr	r2, [pc, #92]	@ (8100f24 <DFSDM_GetChannelFromInstance+0x84>)
 8100ec8:	4293      	cmp	r3, r2
 8100eca:	d102      	bne.n	8100ed2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8100ecc:	2302      	movs	r3, #2
 8100ece:	60fb      	str	r3, [r7, #12]
 8100ed0:	e01d      	b.n	8100f0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8100ed2:	687b      	ldr	r3, [r7, #4]
 8100ed4:	4a14      	ldr	r2, [pc, #80]	@ (8100f28 <DFSDM_GetChannelFromInstance+0x88>)
 8100ed6:	4293      	cmp	r3, r2
 8100ed8:	d102      	bne.n	8100ee0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8100eda:	2303      	movs	r3, #3
 8100edc:	60fb      	str	r3, [r7, #12]
 8100ede:	e016      	b.n	8100f0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8100ee0:	687b      	ldr	r3, [r7, #4]
 8100ee2:	4a12      	ldr	r2, [pc, #72]	@ (8100f2c <DFSDM_GetChannelFromInstance+0x8c>)
 8100ee4:	4293      	cmp	r3, r2
 8100ee6:	d102      	bne.n	8100eee <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8100ee8:	2304      	movs	r3, #4
 8100eea:	60fb      	str	r3, [r7, #12]
 8100eec:	e00f      	b.n	8100f0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8100eee:	687b      	ldr	r3, [r7, #4]
 8100ef0:	4a0f      	ldr	r2, [pc, #60]	@ (8100f30 <DFSDM_GetChannelFromInstance+0x90>)
 8100ef2:	4293      	cmp	r3, r2
 8100ef4:	d102      	bne.n	8100efc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8100ef6:	2305      	movs	r3, #5
 8100ef8:	60fb      	str	r3, [r7, #12]
 8100efa:	e008      	b.n	8100f0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8100efc:	687b      	ldr	r3, [r7, #4]
 8100efe:	4a0d      	ldr	r2, [pc, #52]	@ (8100f34 <DFSDM_GetChannelFromInstance+0x94>)
 8100f00:	4293      	cmp	r3, r2
 8100f02:	d102      	bne.n	8100f0a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8100f04:	2306      	movs	r3, #6
 8100f06:	60fb      	str	r3, [r7, #12]
 8100f08:	e001      	b.n	8100f0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8100f0a:	2307      	movs	r3, #7
 8100f0c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8100f0e:	68fb      	ldr	r3, [r7, #12]
}
 8100f10:	4618      	mov	r0, r3
 8100f12:	3714      	adds	r7, #20
 8100f14:	46bd      	mov	sp, r7
 8100f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f1a:	4770      	bx	lr
 8100f1c:	40017000 	.word	0x40017000
 8100f20:	40017020 	.word	0x40017020
 8100f24:	40017040 	.word	0x40017040
 8100f28:	40017060 	.word	0x40017060
 8100f2c:	40017080 	.word	0x40017080
 8100f30:	400170a0 	.word	0x400170a0
 8100f34:	400170c0 	.word	0x400170c0

08100f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8100f38:	b480      	push	{r7}
 8100f3a:	b089      	sub	sp, #36	@ 0x24
 8100f3c:	af00      	add	r7, sp, #0
 8100f3e:	6078      	str	r0, [r7, #4]
 8100f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100f42:	2300      	movs	r3, #0
 8100f44:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100f46:	4b89      	ldr	r3, [pc, #548]	@ (810116c <HAL_GPIO_Init+0x234>)
 8100f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100f4a:	e194      	b.n	8101276 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100f4c:	683b      	ldr	r3, [r7, #0]
 8100f4e:	681a      	ldr	r2, [r3, #0]
 8100f50:	2101      	movs	r1, #1
 8100f52:	69fb      	ldr	r3, [r7, #28]
 8100f54:	fa01 f303 	lsl.w	r3, r1, r3
 8100f58:	4013      	ands	r3, r2
 8100f5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100f5c:	693b      	ldr	r3, [r7, #16]
 8100f5e:	2b00      	cmp	r3, #0
 8100f60:	f000 8186 	beq.w	8101270 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100f64:	683b      	ldr	r3, [r7, #0]
 8100f66:	685b      	ldr	r3, [r3, #4]
 8100f68:	f003 0303 	and.w	r3, r3, #3
 8100f6c:	2b01      	cmp	r3, #1
 8100f6e:	d005      	beq.n	8100f7c <HAL_GPIO_Init+0x44>
 8100f70:	683b      	ldr	r3, [r7, #0]
 8100f72:	685b      	ldr	r3, [r3, #4]
 8100f74:	f003 0303 	and.w	r3, r3, #3
 8100f78:	2b02      	cmp	r3, #2
 8100f7a:	d130      	bne.n	8100fde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100f7c:	687b      	ldr	r3, [r7, #4]
 8100f7e:	689b      	ldr	r3, [r3, #8]
 8100f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100f82:	69fb      	ldr	r3, [r7, #28]
 8100f84:	005b      	lsls	r3, r3, #1
 8100f86:	2203      	movs	r2, #3
 8100f88:	fa02 f303 	lsl.w	r3, r2, r3
 8100f8c:	43db      	mvns	r3, r3
 8100f8e:	69ba      	ldr	r2, [r7, #24]
 8100f90:	4013      	ands	r3, r2
 8100f92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100f94:	683b      	ldr	r3, [r7, #0]
 8100f96:	68da      	ldr	r2, [r3, #12]
 8100f98:	69fb      	ldr	r3, [r7, #28]
 8100f9a:	005b      	lsls	r3, r3, #1
 8100f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8100fa0:	69ba      	ldr	r2, [r7, #24]
 8100fa2:	4313      	orrs	r3, r2
 8100fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100fa6:	687b      	ldr	r3, [r7, #4]
 8100fa8:	69ba      	ldr	r2, [r7, #24]
 8100faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100fac:	687b      	ldr	r3, [r7, #4]
 8100fae:	685b      	ldr	r3, [r3, #4]
 8100fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100fb2:	2201      	movs	r2, #1
 8100fb4:	69fb      	ldr	r3, [r7, #28]
 8100fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8100fba:	43db      	mvns	r3, r3
 8100fbc:	69ba      	ldr	r2, [r7, #24]
 8100fbe:	4013      	ands	r3, r2
 8100fc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100fc2:	683b      	ldr	r3, [r7, #0]
 8100fc4:	685b      	ldr	r3, [r3, #4]
 8100fc6:	091b      	lsrs	r3, r3, #4
 8100fc8:	f003 0201 	and.w	r2, r3, #1
 8100fcc:	69fb      	ldr	r3, [r7, #28]
 8100fce:	fa02 f303 	lsl.w	r3, r2, r3
 8100fd2:	69ba      	ldr	r2, [r7, #24]
 8100fd4:	4313      	orrs	r3, r2
 8100fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100fd8:	687b      	ldr	r3, [r7, #4]
 8100fda:	69ba      	ldr	r2, [r7, #24]
 8100fdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100fde:	683b      	ldr	r3, [r7, #0]
 8100fe0:	685b      	ldr	r3, [r3, #4]
 8100fe2:	f003 0303 	and.w	r3, r3, #3
 8100fe6:	2b03      	cmp	r3, #3
 8100fe8:	d017      	beq.n	810101a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100fea:	687b      	ldr	r3, [r7, #4]
 8100fec:	68db      	ldr	r3, [r3, #12]
 8100fee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100ff0:	69fb      	ldr	r3, [r7, #28]
 8100ff2:	005b      	lsls	r3, r3, #1
 8100ff4:	2203      	movs	r2, #3
 8100ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8100ffa:	43db      	mvns	r3, r3
 8100ffc:	69ba      	ldr	r2, [r7, #24]
 8100ffe:	4013      	ands	r3, r2
 8101000:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101002:	683b      	ldr	r3, [r7, #0]
 8101004:	689a      	ldr	r2, [r3, #8]
 8101006:	69fb      	ldr	r3, [r7, #28]
 8101008:	005b      	lsls	r3, r3, #1
 810100a:	fa02 f303 	lsl.w	r3, r2, r3
 810100e:	69ba      	ldr	r2, [r7, #24]
 8101010:	4313      	orrs	r3, r2
 8101012:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101014:	687b      	ldr	r3, [r7, #4]
 8101016:	69ba      	ldr	r2, [r7, #24]
 8101018:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810101a:	683b      	ldr	r3, [r7, #0]
 810101c:	685b      	ldr	r3, [r3, #4]
 810101e:	f003 0303 	and.w	r3, r3, #3
 8101022:	2b02      	cmp	r3, #2
 8101024:	d123      	bne.n	810106e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101026:	69fb      	ldr	r3, [r7, #28]
 8101028:	08da      	lsrs	r2, r3, #3
 810102a:	687b      	ldr	r3, [r7, #4]
 810102c:	3208      	adds	r2, #8
 810102e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101034:	69fb      	ldr	r3, [r7, #28]
 8101036:	f003 0307 	and.w	r3, r3, #7
 810103a:	009b      	lsls	r3, r3, #2
 810103c:	220f      	movs	r2, #15
 810103e:	fa02 f303 	lsl.w	r3, r2, r3
 8101042:	43db      	mvns	r3, r3
 8101044:	69ba      	ldr	r2, [r7, #24]
 8101046:	4013      	ands	r3, r2
 8101048:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810104a:	683b      	ldr	r3, [r7, #0]
 810104c:	691a      	ldr	r2, [r3, #16]
 810104e:	69fb      	ldr	r3, [r7, #28]
 8101050:	f003 0307 	and.w	r3, r3, #7
 8101054:	009b      	lsls	r3, r3, #2
 8101056:	fa02 f303 	lsl.w	r3, r2, r3
 810105a:	69ba      	ldr	r2, [r7, #24]
 810105c:	4313      	orrs	r3, r2
 810105e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101060:	69fb      	ldr	r3, [r7, #28]
 8101062:	08da      	lsrs	r2, r3, #3
 8101064:	687b      	ldr	r3, [r7, #4]
 8101066:	3208      	adds	r2, #8
 8101068:	69b9      	ldr	r1, [r7, #24]
 810106a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810106e:	687b      	ldr	r3, [r7, #4]
 8101070:	681b      	ldr	r3, [r3, #0]
 8101072:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101074:	69fb      	ldr	r3, [r7, #28]
 8101076:	005b      	lsls	r3, r3, #1
 8101078:	2203      	movs	r2, #3
 810107a:	fa02 f303 	lsl.w	r3, r2, r3
 810107e:	43db      	mvns	r3, r3
 8101080:	69ba      	ldr	r2, [r7, #24]
 8101082:	4013      	ands	r3, r2
 8101084:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101086:	683b      	ldr	r3, [r7, #0]
 8101088:	685b      	ldr	r3, [r3, #4]
 810108a:	f003 0203 	and.w	r2, r3, #3
 810108e:	69fb      	ldr	r3, [r7, #28]
 8101090:	005b      	lsls	r3, r3, #1
 8101092:	fa02 f303 	lsl.w	r3, r2, r3
 8101096:	69ba      	ldr	r2, [r7, #24]
 8101098:	4313      	orrs	r3, r2
 810109a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810109c:	687b      	ldr	r3, [r7, #4]
 810109e:	69ba      	ldr	r2, [r7, #24]
 81010a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81010a2:	683b      	ldr	r3, [r7, #0]
 81010a4:	685b      	ldr	r3, [r3, #4]
 81010a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81010aa:	2b00      	cmp	r3, #0
 81010ac:	f000 80e0 	beq.w	8101270 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81010b0:	4b2f      	ldr	r3, [pc, #188]	@ (8101170 <HAL_GPIO_Init+0x238>)
 81010b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81010b6:	4a2e      	ldr	r2, [pc, #184]	@ (8101170 <HAL_GPIO_Init+0x238>)
 81010b8:	f043 0302 	orr.w	r3, r3, #2
 81010bc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81010c0:	4b2b      	ldr	r3, [pc, #172]	@ (8101170 <HAL_GPIO_Init+0x238>)
 81010c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81010c6:	f003 0302 	and.w	r3, r3, #2
 81010ca:	60fb      	str	r3, [r7, #12]
 81010cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81010ce:	4a29      	ldr	r2, [pc, #164]	@ (8101174 <HAL_GPIO_Init+0x23c>)
 81010d0:	69fb      	ldr	r3, [r7, #28]
 81010d2:	089b      	lsrs	r3, r3, #2
 81010d4:	3302      	adds	r3, #2
 81010d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81010dc:	69fb      	ldr	r3, [r7, #28]
 81010de:	f003 0303 	and.w	r3, r3, #3
 81010e2:	009b      	lsls	r3, r3, #2
 81010e4:	220f      	movs	r2, #15
 81010e6:	fa02 f303 	lsl.w	r3, r2, r3
 81010ea:	43db      	mvns	r3, r3
 81010ec:	69ba      	ldr	r2, [r7, #24]
 81010ee:	4013      	ands	r3, r2
 81010f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81010f2:	687b      	ldr	r3, [r7, #4]
 81010f4:	4a20      	ldr	r2, [pc, #128]	@ (8101178 <HAL_GPIO_Init+0x240>)
 81010f6:	4293      	cmp	r3, r2
 81010f8:	d052      	beq.n	81011a0 <HAL_GPIO_Init+0x268>
 81010fa:	687b      	ldr	r3, [r7, #4]
 81010fc:	4a1f      	ldr	r2, [pc, #124]	@ (810117c <HAL_GPIO_Init+0x244>)
 81010fe:	4293      	cmp	r3, r2
 8101100:	d031      	beq.n	8101166 <HAL_GPIO_Init+0x22e>
 8101102:	687b      	ldr	r3, [r7, #4]
 8101104:	4a1e      	ldr	r2, [pc, #120]	@ (8101180 <HAL_GPIO_Init+0x248>)
 8101106:	4293      	cmp	r3, r2
 8101108:	d02b      	beq.n	8101162 <HAL_GPIO_Init+0x22a>
 810110a:	687b      	ldr	r3, [r7, #4]
 810110c:	4a1d      	ldr	r2, [pc, #116]	@ (8101184 <HAL_GPIO_Init+0x24c>)
 810110e:	4293      	cmp	r3, r2
 8101110:	d025      	beq.n	810115e <HAL_GPIO_Init+0x226>
 8101112:	687b      	ldr	r3, [r7, #4]
 8101114:	4a1c      	ldr	r2, [pc, #112]	@ (8101188 <HAL_GPIO_Init+0x250>)
 8101116:	4293      	cmp	r3, r2
 8101118:	d01f      	beq.n	810115a <HAL_GPIO_Init+0x222>
 810111a:	687b      	ldr	r3, [r7, #4]
 810111c:	4a1b      	ldr	r2, [pc, #108]	@ (810118c <HAL_GPIO_Init+0x254>)
 810111e:	4293      	cmp	r3, r2
 8101120:	d019      	beq.n	8101156 <HAL_GPIO_Init+0x21e>
 8101122:	687b      	ldr	r3, [r7, #4]
 8101124:	4a1a      	ldr	r2, [pc, #104]	@ (8101190 <HAL_GPIO_Init+0x258>)
 8101126:	4293      	cmp	r3, r2
 8101128:	d013      	beq.n	8101152 <HAL_GPIO_Init+0x21a>
 810112a:	687b      	ldr	r3, [r7, #4]
 810112c:	4a19      	ldr	r2, [pc, #100]	@ (8101194 <HAL_GPIO_Init+0x25c>)
 810112e:	4293      	cmp	r3, r2
 8101130:	d00d      	beq.n	810114e <HAL_GPIO_Init+0x216>
 8101132:	687b      	ldr	r3, [r7, #4]
 8101134:	4a18      	ldr	r2, [pc, #96]	@ (8101198 <HAL_GPIO_Init+0x260>)
 8101136:	4293      	cmp	r3, r2
 8101138:	d007      	beq.n	810114a <HAL_GPIO_Init+0x212>
 810113a:	687b      	ldr	r3, [r7, #4]
 810113c:	4a17      	ldr	r2, [pc, #92]	@ (810119c <HAL_GPIO_Init+0x264>)
 810113e:	4293      	cmp	r3, r2
 8101140:	d101      	bne.n	8101146 <HAL_GPIO_Init+0x20e>
 8101142:	2309      	movs	r3, #9
 8101144:	e02d      	b.n	81011a2 <HAL_GPIO_Init+0x26a>
 8101146:	230a      	movs	r3, #10
 8101148:	e02b      	b.n	81011a2 <HAL_GPIO_Init+0x26a>
 810114a:	2308      	movs	r3, #8
 810114c:	e029      	b.n	81011a2 <HAL_GPIO_Init+0x26a>
 810114e:	2307      	movs	r3, #7
 8101150:	e027      	b.n	81011a2 <HAL_GPIO_Init+0x26a>
 8101152:	2306      	movs	r3, #6
 8101154:	e025      	b.n	81011a2 <HAL_GPIO_Init+0x26a>
 8101156:	2305      	movs	r3, #5
 8101158:	e023      	b.n	81011a2 <HAL_GPIO_Init+0x26a>
 810115a:	2304      	movs	r3, #4
 810115c:	e021      	b.n	81011a2 <HAL_GPIO_Init+0x26a>
 810115e:	2303      	movs	r3, #3
 8101160:	e01f      	b.n	81011a2 <HAL_GPIO_Init+0x26a>
 8101162:	2302      	movs	r3, #2
 8101164:	e01d      	b.n	81011a2 <HAL_GPIO_Init+0x26a>
 8101166:	2301      	movs	r3, #1
 8101168:	e01b      	b.n	81011a2 <HAL_GPIO_Init+0x26a>
 810116a:	bf00      	nop
 810116c:	580000c0 	.word	0x580000c0
 8101170:	58024400 	.word	0x58024400
 8101174:	58000400 	.word	0x58000400
 8101178:	58020000 	.word	0x58020000
 810117c:	58020400 	.word	0x58020400
 8101180:	58020800 	.word	0x58020800
 8101184:	58020c00 	.word	0x58020c00
 8101188:	58021000 	.word	0x58021000
 810118c:	58021400 	.word	0x58021400
 8101190:	58021800 	.word	0x58021800
 8101194:	58021c00 	.word	0x58021c00
 8101198:	58022000 	.word	0x58022000
 810119c:	58022400 	.word	0x58022400
 81011a0:	2300      	movs	r3, #0
 81011a2:	69fa      	ldr	r2, [r7, #28]
 81011a4:	f002 0203 	and.w	r2, r2, #3
 81011a8:	0092      	lsls	r2, r2, #2
 81011aa:	4093      	lsls	r3, r2
 81011ac:	69ba      	ldr	r2, [r7, #24]
 81011ae:	4313      	orrs	r3, r2
 81011b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81011b2:	4938      	ldr	r1, [pc, #224]	@ (8101294 <HAL_GPIO_Init+0x35c>)
 81011b4:	69fb      	ldr	r3, [r7, #28]
 81011b6:	089b      	lsrs	r3, r3, #2
 81011b8:	3302      	adds	r3, #2
 81011ba:	69ba      	ldr	r2, [r7, #24]
 81011bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81011c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81011c4:	681b      	ldr	r3, [r3, #0]
 81011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81011c8:	693b      	ldr	r3, [r7, #16]
 81011ca:	43db      	mvns	r3, r3
 81011cc:	69ba      	ldr	r2, [r7, #24]
 81011ce:	4013      	ands	r3, r2
 81011d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81011d2:	683b      	ldr	r3, [r7, #0]
 81011d4:	685b      	ldr	r3, [r3, #4]
 81011d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81011da:	2b00      	cmp	r3, #0
 81011dc:	d003      	beq.n	81011e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81011de:	69ba      	ldr	r2, [r7, #24]
 81011e0:	693b      	ldr	r3, [r7, #16]
 81011e2:	4313      	orrs	r3, r2
 81011e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81011e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81011ea:	69bb      	ldr	r3, [r7, #24]
 81011ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81011ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81011f2:	685b      	ldr	r3, [r3, #4]
 81011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81011f6:	693b      	ldr	r3, [r7, #16]
 81011f8:	43db      	mvns	r3, r3
 81011fa:	69ba      	ldr	r2, [r7, #24]
 81011fc:	4013      	ands	r3, r2
 81011fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101200:	683b      	ldr	r3, [r7, #0]
 8101202:	685b      	ldr	r3, [r3, #4]
 8101204:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8101208:	2b00      	cmp	r3, #0
 810120a:	d003      	beq.n	8101214 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810120c:	69ba      	ldr	r2, [r7, #24]
 810120e:	693b      	ldr	r3, [r7, #16]
 8101210:	4313      	orrs	r3, r2
 8101212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101214:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101218:	69bb      	ldr	r3, [r7, #24]
 810121a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810121c:	697b      	ldr	r3, [r7, #20]
 810121e:	685b      	ldr	r3, [r3, #4]
 8101220:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101222:	693b      	ldr	r3, [r7, #16]
 8101224:	43db      	mvns	r3, r3
 8101226:	69ba      	ldr	r2, [r7, #24]
 8101228:	4013      	ands	r3, r2
 810122a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810122c:	683b      	ldr	r3, [r7, #0]
 810122e:	685b      	ldr	r3, [r3, #4]
 8101230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101234:	2b00      	cmp	r3, #0
 8101236:	d003      	beq.n	8101240 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101238:	69ba      	ldr	r2, [r7, #24]
 810123a:	693b      	ldr	r3, [r7, #16]
 810123c:	4313      	orrs	r3, r2
 810123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101240:	697b      	ldr	r3, [r7, #20]
 8101242:	69ba      	ldr	r2, [r7, #24]
 8101244:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101246:	697b      	ldr	r3, [r7, #20]
 8101248:	681b      	ldr	r3, [r3, #0]
 810124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810124c:	693b      	ldr	r3, [r7, #16]
 810124e:	43db      	mvns	r3, r3
 8101250:	69ba      	ldr	r2, [r7, #24]
 8101252:	4013      	ands	r3, r2
 8101254:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101256:	683b      	ldr	r3, [r7, #0]
 8101258:	685b      	ldr	r3, [r3, #4]
 810125a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810125e:	2b00      	cmp	r3, #0
 8101260:	d003      	beq.n	810126a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101262:	69ba      	ldr	r2, [r7, #24]
 8101264:	693b      	ldr	r3, [r7, #16]
 8101266:	4313      	orrs	r3, r2
 8101268:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810126a:	697b      	ldr	r3, [r7, #20]
 810126c:	69ba      	ldr	r2, [r7, #24]
 810126e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101270:	69fb      	ldr	r3, [r7, #28]
 8101272:	3301      	adds	r3, #1
 8101274:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101276:	683b      	ldr	r3, [r7, #0]
 8101278:	681a      	ldr	r2, [r3, #0]
 810127a:	69fb      	ldr	r3, [r7, #28]
 810127c:	fa22 f303 	lsr.w	r3, r2, r3
 8101280:	2b00      	cmp	r3, #0
 8101282:	f47f ae63 	bne.w	8100f4c <HAL_GPIO_Init+0x14>
  }
}
 8101286:	bf00      	nop
 8101288:	bf00      	nop
 810128a:	3724      	adds	r7, #36	@ 0x24
 810128c:	46bd      	mov	sp, r7
 810128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101292:	4770      	bx	lr
 8101294:	58000400 	.word	0x58000400

08101298 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101298:	b480      	push	{r7}
 810129a:	b083      	sub	sp, #12
 810129c:	af00      	add	r7, sp, #0
 810129e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81012a0:	4b05      	ldr	r3, [pc, #20]	@ (81012b8 <HAL_HSEM_ActivateNotification+0x20>)
 81012a2:	681a      	ldr	r2, [r3, #0]
 81012a4:	4904      	ldr	r1, [pc, #16]	@ (81012b8 <HAL_HSEM_ActivateNotification+0x20>)
 81012a6:	687b      	ldr	r3, [r7, #4]
 81012a8:	4313      	orrs	r3, r2
 81012aa:	600b      	str	r3, [r1, #0]
#endif
}
 81012ac:	bf00      	nop
 81012ae:	370c      	adds	r7, #12
 81012b0:	46bd      	mov	sp, r7
 81012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012b6:	4770      	bx	lr
 81012b8:	58026510 	.word	0x58026510

081012bc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81012bc:	b580      	push	{r7, lr}
 81012be:	b084      	sub	sp, #16
 81012c0:	af00      	add	r7, sp, #0
 81012c2:	60f8      	str	r0, [r7, #12]
 81012c4:	460b      	mov	r3, r1
 81012c6:	607a      	str	r2, [r7, #4]
 81012c8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81012ca:	4b37      	ldr	r3, [pc, #220]	@ (81013a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81012cc:	681b      	ldr	r3, [r3, #0]
 81012ce:	f023 0201 	bic.w	r2, r3, #1
 81012d2:	4935      	ldr	r1, [pc, #212]	@ (81013a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81012d4:	68fb      	ldr	r3, [r7, #12]
 81012d6:	4313      	orrs	r3, r2
 81012d8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81012da:	687b      	ldr	r3, [r7, #4]
 81012dc:	2b00      	cmp	r3, #0
 81012de:	d123      	bne.n	8101328 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81012e0:	f7ff fd04 	bl	8100cec <HAL_GetCurrentCPUID>
 81012e4:	4603      	mov	r3, r0
 81012e6:	2b03      	cmp	r3, #3
 81012e8:	d158      	bne.n	810139c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81012ea:	4b2f      	ldr	r3, [pc, #188]	@ (81013a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81012ec:	691b      	ldr	r3, [r3, #16]
 81012ee:	4a2e      	ldr	r2, [pc, #184]	@ (81013a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81012f0:	f023 0301 	bic.w	r3, r3, #1
 81012f4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81012f6:	4b2d      	ldr	r3, [pc, #180]	@ (81013ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 81012f8:	691b      	ldr	r3, [r3, #16]
 81012fa:	4a2c      	ldr	r2, [pc, #176]	@ (81013ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 81012fc:	f043 0304 	orr.w	r3, r3, #4
 8101300:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101302:	f3bf 8f4f 	dsb	sy
}
 8101306:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101308:	f3bf 8f6f 	isb	sy
}
 810130c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810130e:	7afb      	ldrb	r3, [r7, #11]
 8101310:	2b01      	cmp	r3, #1
 8101312:	d101      	bne.n	8101318 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101314:	bf30      	wfi
 8101316:	e000      	b.n	810131a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101318:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810131a:	4b24      	ldr	r3, [pc, #144]	@ (81013ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 810131c:	691b      	ldr	r3, [r3, #16]
 810131e:	4a23      	ldr	r2, [pc, #140]	@ (81013ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101320:	f023 0304 	bic.w	r3, r3, #4
 8101324:	6113      	str	r3, [r2, #16]
 8101326:	e03c      	b.n	81013a2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101328:	687b      	ldr	r3, [r7, #4]
 810132a:	2b01      	cmp	r3, #1
 810132c:	d123      	bne.n	8101376 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810132e:	f7ff fcdd 	bl	8100cec <HAL_GetCurrentCPUID>
 8101332:	4603      	mov	r3, r0
 8101334:	2b01      	cmp	r3, #1
 8101336:	d133      	bne.n	81013a0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101338:	4b1b      	ldr	r3, [pc, #108]	@ (81013a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810133a:	695b      	ldr	r3, [r3, #20]
 810133c:	4a1a      	ldr	r2, [pc, #104]	@ (81013a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810133e:	f023 0302 	bic.w	r3, r3, #2
 8101342:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101344:	4b19      	ldr	r3, [pc, #100]	@ (81013ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101346:	691b      	ldr	r3, [r3, #16]
 8101348:	4a18      	ldr	r2, [pc, #96]	@ (81013ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 810134a:	f043 0304 	orr.w	r3, r3, #4
 810134e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101350:	f3bf 8f4f 	dsb	sy
}
 8101354:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101356:	f3bf 8f6f 	isb	sy
}
 810135a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810135c:	7afb      	ldrb	r3, [r7, #11]
 810135e:	2b01      	cmp	r3, #1
 8101360:	d101      	bne.n	8101366 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101362:	bf30      	wfi
 8101364:	e000      	b.n	8101368 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101366:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101368:	4b10      	ldr	r3, [pc, #64]	@ (81013ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 810136a:	691b      	ldr	r3, [r3, #16]
 810136c:	4a0f      	ldr	r2, [pc, #60]	@ (81013ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 810136e:	f023 0304 	bic.w	r3, r3, #4
 8101372:	6113      	str	r3, [r2, #16]
 8101374:	e015      	b.n	81013a2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101376:	f7ff fcb9 	bl	8100cec <HAL_GetCurrentCPUID>
 810137a:	4603      	mov	r3, r0
 810137c:	2b03      	cmp	r3, #3
 810137e:	d106      	bne.n	810138e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101380:	4b09      	ldr	r3, [pc, #36]	@ (81013a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101382:	691b      	ldr	r3, [r3, #16]
 8101384:	4a08      	ldr	r2, [pc, #32]	@ (81013a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101386:	f023 0304 	bic.w	r3, r3, #4
 810138a:	6113      	str	r3, [r2, #16]
 810138c:	e009      	b.n	81013a2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810138e:	4b06      	ldr	r3, [pc, #24]	@ (81013a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101390:	695b      	ldr	r3, [r3, #20]
 8101392:	4a05      	ldr	r2, [pc, #20]	@ (81013a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101394:	f023 0304 	bic.w	r3, r3, #4
 8101398:	6153      	str	r3, [r2, #20]
 810139a:	e002      	b.n	81013a2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810139c:	bf00      	nop
 810139e:	e000      	b.n	81013a2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81013a0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81013a2:	3710      	adds	r7, #16
 81013a4:	46bd      	mov	sp, r7
 81013a6:	bd80      	pop	{r7, pc}
 81013a8:	58024800 	.word	0x58024800
 81013ac:	e000ed00 	.word	0xe000ed00

081013b0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81013b0:	b580      	push	{r7, lr}
 81013b2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81013b4:	f7ff fc9a 	bl	8100cec <HAL_GetCurrentCPUID>
 81013b8:	4603      	mov	r3, r0
 81013ba:	2b03      	cmp	r3, #3
 81013bc:	d101      	bne.n	81013c2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81013be:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81013c0:	e001      	b.n	81013c6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81013c2:	bf40      	sev
    __WFE ();
 81013c4:	bf20      	wfe
}
 81013c6:	bf00      	nop
 81013c8:	bd80      	pop	{r7, pc}
	...

081013cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81013cc:	b480      	push	{r7}
 81013ce:	b089      	sub	sp, #36	@ 0x24
 81013d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81013d2:	4bb3      	ldr	r3, [pc, #716]	@ (81016a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013d4:	691b      	ldr	r3, [r3, #16]
 81013d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81013da:	2b18      	cmp	r3, #24
 81013dc:	f200 8155 	bhi.w	810168a <HAL_RCC_GetSysClockFreq+0x2be>
 81013e0:	a201      	add	r2, pc, #4	@ (adr r2, 81013e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81013e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81013e6:	bf00      	nop
 81013e8:	0810144d 	.word	0x0810144d
 81013ec:	0810168b 	.word	0x0810168b
 81013f0:	0810168b 	.word	0x0810168b
 81013f4:	0810168b 	.word	0x0810168b
 81013f8:	0810168b 	.word	0x0810168b
 81013fc:	0810168b 	.word	0x0810168b
 8101400:	0810168b 	.word	0x0810168b
 8101404:	0810168b 	.word	0x0810168b
 8101408:	08101473 	.word	0x08101473
 810140c:	0810168b 	.word	0x0810168b
 8101410:	0810168b 	.word	0x0810168b
 8101414:	0810168b 	.word	0x0810168b
 8101418:	0810168b 	.word	0x0810168b
 810141c:	0810168b 	.word	0x0810168b
 8101420:	0810168b 	.word	0x0810168b
 8101424:	0810168b 	.word	0x0810168b
 8101428:	08101479 	.word	0x08101479
 810142c:	0810168b 	.word	0x0810168b
 8101430:	0810168b 	.word	0x0810168b
 8101434:	0810168b 	.word	0x0810168b
 8101438:	0810168b 	.word	0x0810168b
 810143c:	0810168b 	.word	0x0810168b
 8101440:	0810168b 	.word	0x0810168b
 8101444:	0810168b 	.word	0x0810168b
 8101448:	0810147f 	.word	0x0810147f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810144c:	4b94      	ldr	r3, [pc, #592]	@ (81016a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810144e:	681b      	ldr	r3, [r3, #0]
 8101450:	f003 0320 	and.w	r3, r3, #32
 8101454:	2b00      	cmp	r3, #0
 8101456:	d009      	beq.n	810146c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101458:	4b91      	ldr	r3, [pc, #580]	@ (81016a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810145a:	681b      	ldr	r3, [r3, #0]
 810145c:	08db      	lsrs	r3, r3, #3
 810145e:	f003 0303 	and.w	r3, r3, #3
 8101462:	4a90      	ldr	r2, [pc, #576]	@ (81016a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101464:	fa22 f303 	lsr.w	r3, r2, r3
 8101468:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810146a:	e111      	b.n	8101690 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810146c:	4b8d      	ldr	r3, [pc, #564]	@ (81016a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810146e:	61bb      	str	r3, [r7, #24]
      break;
 8101470:	e10e      	b.n	8101690 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8101472:	4b8d      	ldr	r3, [pc, #564]	@ (81016a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101474:	61bb      	str	r3, [r7, #24]
      break;
 8101476:	e10b      	b.n	8101690 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8101478:	4b8c      	ldr	r3, [pc, #560]	@ (81016ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 810147a:	61bb      	str	r3, [r7, #24]
      break;
 810147c:	e108      	b.n	8101690 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810147e:	4b88      	ldr	r3, [pc, #544]	@ (81016a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101482:	f003 0303 	and.w	r3, r3, #3
 8101486:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8101488:	4b85      	ldr	r3, [pc, #532]	@ (81016a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810148a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810148c:	091b      	lsrs	r3, r3, #4
 810148e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8101492:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101494:	4b82      	ldr	r3, [pc, #520]	@ (81016a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101498:	f003 0301 	and.w	r3, r3, #1
 810149c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810149e:	4b80      	ldr	r3, [pc, #512]	@ (81016a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81014a2:	08db      	lsrs	r3, r3, #3
 81014a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81014a8:	68fa      	ldr	r2, [r7, #12]
 81014aa:	fb02 f303 	mul.w	r3, r2, r3
 81014ae:	ee07 3a90 	vmov	s15, r3
 81014b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81014ba:	693b      	ldr	r3, [r7, #16]
 81014bc:	2b00      	cmp	r3, #0
 81014be:	f000 80e1 	beq.w	8101684 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 81014c2:	697b      	ldr	r3, [r7, #20]
 81014c4:	2b02      	cmp	r3, #2
 81014c6:	f000 8083 	beq.w	81015d0 <HAL_RCC_GetSysClockFreq+0x204>
 81014ca:	697b      	ldr	r3, [r7, #20]
 81014cc:	2b02      	cmp	r3, #2
 81014ce:	f200 80a1 	bhi.w	8101614 <HAL_RCC_GetSysClockFreq+0x248>
 81014d2:	697b      	ldr	r3, [r7, #20]
 81014d4:	2b00      	cmp	r3, #0
 81014d6:	d003      	beq.n	81014e0 <HAL_RCC_GetSysClockFreq+0x114>
 81014d8:	697b      	ldr	r3, [r7, #20]
 81014da:	2b01      	cmp	r3, #1
 81014dc:	d056      	beq.n	810158c <HAL_RCC_GetSysClockFreq+0x1c0>
 81014de:	e099      	b.n	8101614 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81014e0:	4b6f      	ldr	r3, [pc, #444]	@ (81016a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014e2:	681b      	ldr	r3, [r3, #0]
 81014e4:	f003 0320 	and.w	r3, r3, #32
 81014e8:	2b00      	cmp	r3, #0
 81014ea:	d02d      	beq.n	8101548 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81014ec:	4b6c      	ldr	r3, [pc, #432]	@ (81016a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014ee:	681b      	ldr	r3, [r3, #0]
 81014f0:	08db      	lsrs	r3, r3, #3
 81014f2:	f003 0303 	and.w	r3, r3, #3
 81014f6:	4a6b      	ldr	r2, [pc, #428]	@ (81016a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81014f8:	fa22 f303 	lsr.w	r3, r2, r3
 81014fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81014fe:	687b      	ldr	r3, [r7, #4]
 8101500:	ee07 3a90 	vmov	s15, r3
 8101504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101508:	693b      	ldr	r3, [r7, #16]
 810150a:	ee07 3a90 	vmov	s15, r3
 810150e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101516:	4b62      	ldr	r3, [pc, #392]	@ (81016a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810151a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810151e:	ee07 3a90 	vmov	s15, r3
 8101522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101526:	ed97 6a02 	vldr	s12, [r7, #8]
 810152a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81016b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810152e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810153a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810153e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101542:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8101546:	e087      	b.n	8101658 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101548:	693b      	ldr	r3, [r7, #16]
 810154a:	ee07 3a90 	vmov	s15, r3
 810154e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101552:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81016b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810155a:	4b51      	ldr	r3, [pc, #324]	@ (81016a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810155e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101562:	ee07 3a90 	vmov	s15, r3
 8101566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810156a:	ed97 6a02 	vldr	s12, [r7, #8]
 810156e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81016b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810157a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810157e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101586:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810158a:	e065      	b.n	8101658 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810158c:	693b      	ldr	r3, [r7, #16]
 810158e:	ee07 3a90 	vmov	s15, r3
 8101592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101596:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81016b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 810159a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810159e:	4b40      	ldr	r3, [pc, #256]	@ (81016a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81015a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81015a6:	ee07 3a90 	vmov	s15, r3
 81015aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81015ae:	ed97 6a02 	vldr	s12, [r7, #8]
 81015b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81016b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81015b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81015ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81015be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81015c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81015c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81015ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81015ce:	e043      	b.n	8101658 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81015d0:	693b      	ldr	r3, [r7, #16]
 81015d2:	ee07 3a90 	vmov	s15, r3
 81015d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81015da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81016bc <HAL_RCC_GetSysClockFreq+0x2f0>
 81015de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81015e2:	4b2f      	ldr	r3, [pc, #188]	@ (81016a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81015e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81015ea:	ee07 3a90 	vmov	s15, r3
 81015ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81015f2:	ed97 6a02 	vldr	s12, [r7, #8]
 81015f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81016b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81015fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81015fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101602:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810160a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810160e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101612:	e021      	b.n	8101658 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101614:	693b      	ldr	r3, [r7, #16]
 8101616:	ee07 3a90 	vmov	s15, r3
 810161a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810161e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81016b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101626:	4b1e      	ldr	r3, [pc, #120]	@ (81016a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810162a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810162e:	ee07 3a90 	vmov	s15, r3
 8101632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101636:	ed97 6a02 	vldr	s12, [r7, #8]
 810163a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81016b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810163e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810164a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810164e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101652:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101656:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8101658:	4b11      	ldr	r3, [pc, #68]	@ (81016a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810165a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810165c:	0a5b      	lsrs	r3, r3, #9
 810165e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101662:	3301      	adds	r3, #1
 8101664:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8101666:	683b      	ldr	r3, [r7, #0]
 8101668:	ee07 3a90 	vmov	s15, r3
 810166c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101670:	edd7 6a07 	vldr	s13, [r7, #28]
 8101674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810167c:	ee17 3a90 	vmov	r3, s15
 8101680:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8101682:	e005      	b.n	8101690 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101684:	2300      	movs	r3, #0
 8101686:	61bb      	str	r3, [r7, #24]
      break;
 8101688:	e002      	b.n	8101690 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810168a:	4b07      	ldr	r3, [pc, #28]	@ (81016a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810168c:	61bb      	str	r3, [r7, #24]
      break;
 810168e:	bf00      	nop
  }

  return sysclockfreq;
 8101690:	69bb      	ldr	r3, [r7, #24]
}
 8101692:	4618      	mov	r0, r3
 8101694:	3724      	adds	r7, #36	@ 0x24
 8101696:	46bd      	mov	sp, r7
 8101698:	f85d 7b04 	ldr.w	r7, [sp], #4
 810169c:	4770      	bx	lr
 810169e:	bf00      	nop
 81016a0:	58024400 	.word	0x58024400
 81016a4:	03d09000 	.word	0x03d09000
 81016a8:	003d0900 	.word	0x003d0900
 81016ac:	017d7840 	.word	0x017d7840
 81016b0:	46000000 	.word	0x46000000
 81016b4:	4c742400 	.word	0x4c742400
 81016b8:	4a742400 	.word	0x4a742400
 81016bc:	4bbebc20 	.word	0x4bbebc20

081016c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81016c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81016c4:	b0cc      	sub	sp, #304	@ 0x130
 81016c6:	af00      	add	r7, sp, #0
 81016c8:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81016cc:	2300      	movs	r3, #0
 81016ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81016d2:	2300      	movs	r3, #0
 81016d4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81016d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81016e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 81016e4:	2500      	movs	r5, #0
 81016e6:	ea54 0305 	orrs.w	r3, r4, r5
 81016ea:	d049      	beq.n	8101780 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81016ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81016f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81016f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81016f6:	d02f      	beq.n	8101758 <HAL_RCCEx_PeriphCLKConfig+0x98>
 81016f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81016fc:	d828      	bhi.n	8101750 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81016fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101702:	d01a      	beq.n	810173a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8101704:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101708:	d822      	bhi.n	8101750 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810170a:	2b00      	cmp	r3, #0
 810170c:	d003      	beq.n	8101716 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810170e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8101712:	d007      	beq.n	8101724 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8101714:	e01c      	b.n	8101750 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101716:	4bb8      	ldr	r3, [pc, #736]	@ (81019f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810171a:	4ab7      	ldr	r2, [pc, #732]	@ (81019f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810171c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101720:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101722:	e01a      	b.n	810175a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101724:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101728:	3308      	adds	r3, #8
 810172a:	2102      	movs	r1, #2
 810172c:	4618      	mov	r0, r3
 810172e:	f001 fa11 	bl	8102b54 <RCCEx_PLL2_Config>
 8101732:	4603      	mov	r3, r0
 8101734:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101738:	e00f      	b.n	810175a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810173a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810173e:	3328      	adds	r3, #40	@ 0x28
 8101740:	2102      	movs	r1, #2
 8101742:	4618      	mov	r0, r3
 8101744:	f001 fab8 	bl	8102cb8 <RCCEx_PLL3_Config>
 8101748:	4603      	mov	r3, r0
 810174a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810174e:	e004      	b.n	810175a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101750:	2301      	movs	r3, #1
 8101752:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8101756:	e000      	b.n	810175a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8101758:	bf00      	nop
    }

    if (ret == HAL_OK)
 810175a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810175e:	2b00      	cmp	r3, #0
 8101760:	d10a      	bne.n	8101778 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8101762:	4ba5      	ldr	r3, [pc, #660]	@ (81019f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101766:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810176a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810176e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8101770:	4aa1      	ldr	r2, [pc, #644]	@ (81019f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101772:	430b      	orrs	r3, r1
 8101774:	6513      	str	r3, [r2, #80]	@ 0x50
 8101776:	e003      	b.n	8101780 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101778:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810177c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8101780:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101788:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 810178c:	f04f 0900 	mov.w	r9, #0
 8101790:	ea58 0309 	orrs.w	r3, r8, r9
 8101794:	d047      	beq.n	8101826 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8101796:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810179a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810179c:	2b04      	cmp	r3, #4
 810179e:	d82a      	bhi.n	81017f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 81017a0:	a201      	add	r2, pc, #4	@ (adr r2, 81017a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81017a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81017a6:	bf00      	nop
 81017a8:	081017bd 	.word	0x081017bd
 81017ac:	081017cb 	.word	0x081017cb
 81017b0:	081017e1 	.word	0x081017e1
 81017b4:	081017ff 	.word	0x081017ff
 81017b8:	081017ff 	.word	0x081017ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81017bc:	4b8e      	ldr	r3, [pc, #568]	@ (81019f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81017be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81017c0:	4a8d      	ldr	r2, [pc, #564]	@ (81019f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81017c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81017c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81017c8:	e01a      	b.n	8101800 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81017ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81017ce:	3308      	adds	r3, #8
 81017d0:	2100      	movs	r1, #0
 81017d2:	4618      	mov	r0, r3
 81017d4:	f001 f9be 	bl	8102b54 <RCCEx_PLL2_Config>
 81017d8:	4603      	mov	r3, r0
 81017da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81017de:	e00f      	b.n	8101800 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81017e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81017e4:	3328      	adds	r3, #40	@ 0x28
 81017e6:	2100      	movs	r1, #0
 81017e8:	4618      	mov	r0, r3
 81017ea:	f001 fa65 	bl	8102cb8 <RCCEx_PLL3_Config>
 81017ee:	4603      	mov	r3, r0
 81017f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81017f4:	e004      	b.n	8101800 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81017f6:	2301      	movs	r3, #1
 81017f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81017fc:	e000      	b.n	8101800 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81017fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101800:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101804:	2b00      	cmp	r3, #0
 8101806:	d10a      	bne.n	810181e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8101808:	4b7b      	ldr	r3, [pc, #492]	@ (81019f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810180a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810180c:	f023 0107 	bic.w	r1, r3, #7
 8101810:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101816:	4a78      	ldr	r2, [pc, #480]	@ (81019f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101818:	430b      	orrs	r3, r1
 810181a:	6513      	str	r3, [r2, #80]	@ 0x50
 810181c:	e003      	b.n	8101826 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810181e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101822:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8101826:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810182e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8101832:	f04f 0b00 	mov.w	fp, #0
 8101836:	ea5a 030b 	orrs.w	r3, sl, fp
 810183a:	d04c      	beq.n	81018d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810183c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101846:	d030      	beq.n	81018aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8101848:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810184c:	d829      	bhi.n	81018a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810184e:	2bc0      	cmp	r3, #192	@ 0xc0
 8101850:	d02d      	beq.n	81018ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8101852:	2bc0      	cmp	r3, #192	@ 0xc0
 8101854:	d825      	bhi.n	81018a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101856:	2b80      	cmp	r3, #128	@ 0x80
 8101858:	d018      	beq.n	810188c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810185a:	2b80      	cmp	r3, #128	@ 0x80
 810185c:	d821      	bhi.n	81018a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810185e:	2b00      	cmp	r3, #0
 8101860:	d002      	beq.n	8101868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8101862:	2b40      	cmp	r3, #64	@ 0x40
 8101864:	d007      	beq.n	8101876 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8101866:	e01c      	b.n	81018a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101868:	4b63      	ldr	r3, [pc, #396]	@ (81019f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810186a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810186c:	4a62      	ldr	r2, [pc, #392]	@ (81019f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810186e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101874:	e01c      	b.n	81018b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101876:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810187a:	3308      	adds	r3, #8
 810187c:	2100      	movs	r1, #0
 810187e:	4618      	mov	r0, r3
 8101880:	f001 f968 	bl	8102b54 <RCCEx_PLL2_Config>
 8101884:	4603      	mov	r3, r0
 8101886:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810188a:	e011      	b.n	81018b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810188c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101890:	3328      	adds	r3, #40	@ 0x28
 8101892:	2100      	movs	r1, #0
 8101894:	4618      	mov	r0, r3
 8101896:	f001 fa0f 	bl	8102cb8 <RCCEx_PLL3_Config>
 810189a:	4603      	mov	r3, r0
 810189c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81018a0:	e006      	b.n	81018b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81018a2:	2301      	movs	r3, #1
 81018a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81018a8:	e002      	b.n	81018b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81018aa:	bf00      	nop
 81018ac:	e000      	b.n	81018b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81018ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 81018b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81018b4:	2b00      	cmp	r3, #0
 81018b6:	d10a      	bne.n	81018ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81018b8:	4b4f      	ldr	r3, [pc, #316]	@ (81019f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81018ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81018bc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 81018c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81018c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81018c6:	4a4c      	ldr	r2, [pc, #304]	@ (81019f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81018c8:	430b      	orrs	r3, r1
 81018ca:	6513      	str	r3, [r2, #80]	@ 0x50
 81018cc:	e003      	b.n	81018d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81018ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81018d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81018d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81018de:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 81018e2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 81018e6:	2300      	movs	r3, #0
 81018e8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 81018ec:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 81018f0:	460b      	mov	r3, r1
 81018f2:	4313      	orrs	r3, r2
 81018f4:	d053      	beq.n	810199e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 81018f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81018fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81018fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8101902:	d035      	beq.n	8101970 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8101904:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8101908:	d82e      	bhi.n	8101968 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810190a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810190e:	d031      	beq.n	8101974 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8101910:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8101914:	d828      	bhi.n	8101968 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101916:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810191a:	d01a      	beq.n	8101952 <HAL_RCCEx_PeriphCLKConfig+0x292>
 810191c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8101920:	d822      	bhi.n	8101968 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101922:	2b00      	cmp	r3, #0
 8101924:	d003      	beq.n	810192e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8101926:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810192a:	d007      	beq.n	810193c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810192c:	e01c      	b.n	8101968 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810192e:	4b32      	ldr	r3, [pc, #200]	@ (81019f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101932:	4a31      	ldr	r2, [pc, #196]	@ (81019f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101938:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810193a:	e01c      	b.n	8101976 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810193c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101940:	3308      	adds	r3, #8
 8101942:	2100      	movs	r1, #0
 8101944:	4618      	mov	r0, r3
 8101946:	f001 f905 	bl	8102b54 <RCCEx_PLL2_Config>
 810194a:	4603      	mov	r3, r0
 810194c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8101950:	e011      	b.n	8101976 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101952:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101956:	3328      	adds	r3, #40	@ 0x28
 8101958:	2100      	movs	r1, #0
 810195a:	4618      	mov	r0, r3
 810195c:	f001 f9ac 	bl	8102cb8 <RCCEx_PLL3_Config>
 8101960:	4603      	mov	r3, r0
 8101962:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101966:	e006      	b.n	8101976 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8101968:	2301      	movs	r3, #1
 810196a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810196e:	e002      	b.n	8101976 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101970:	bf00      	nop
 8101972:	e000      	b.n	8101976 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101976:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810197a:	2b00      	cmp	r3, #0
 810197c:	d10b      	bne.n	8101996 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810197e:	4b1e      	ldr	r3, [pc, #120]	@ (81019f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101982:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8101986:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810198a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810198e:	4a1a      	ldr	r2, [pc, #104]	@ (81019f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101990:	430b      	orrs	r3, r1
 8101992:	6593      	str	r3, [r2, #88]	@ 0x58
 8101994:	e003      	b.n	810199e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101996:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810199a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810199e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81019a6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 81019aa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 81019ae:	2300      	movs	r3, #0
 81019b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 81019b4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 81019b8:	460b      	mov	r3, r1
 81019ba:	4313      	orrs	r3, r2
 81019bc:	d056      	beq.n	8101a6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81019be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81019c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81019c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81019ca:	d038      	beq.n	8101a3e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81019cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81019d0:	d831      	bhi.n	8101a36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81019d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81019d6:	d034      	beq.n	8101a42 <HAL_RCCEx_PeriphCLKConfig+0x382>
 81019d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81019dc:	d82b      	bhi.n	8101a36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81019de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81019e2:	d01d      	beq.n	8101a20 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81019e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81019e8:	d825      	bhi.n	8101a36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81019ea:	2b00      	cmp	r3, #0
 81019ec:	d006      	beq.n	81019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81019ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81019f2:	d00a      	beq.n	8101a0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81019f4:	e01f      	b.n	8101a36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81019f6:	bf00      	nop
 81019f8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81019fc:	4ba2      	ldr	r3, [pc, #648]	@ (8101c88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81019fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101a00:	4aa1      	ldr	r2, [pc, #644]	@ (8101c88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101a06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101a08:	e01c      	b.n	8101a44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101a0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101a0e:	3308      	adds	r3, #8
 8101a10:	2100      	movs	r1, #0
 8101a12:	4618      	mov	r0, r3
 8101a14:	f001 f89e 	bl	8102b54 <RCCEx_PLL2_Config>
 8101a18:	4603      	mov	r3, r0
 8101a1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8101a1e:	e011      	b.n	8101a44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101a20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101a24:	3328      	adds	r3, #40	@ 0x28
 8101a26:	2100      	movs	r1, #0
 8101a28:	4618      	mov	r0, r3
 8101a2a:	f001 f945 	bl	8102cb8 <RCCEx_PLL3_Config>
 8101a2e:	4603      	mov	r3, r0
 8101a30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101a34:	e006      	b.n	8101a44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8101a36:	2301      	movs	r3, #1
 8101a38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8101a3c:	e002      	b.n	8101a44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8101a3e:	bf00      	nop
 8101a40:	e000      	b.n	8101a44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8101a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101a44:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101a48:	2b00      	cmp	r3, #0
 8101a4a:	d10b      	bne.n	8101a64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8101a4c:	4b8e      	ldr	r3, [pc, #568]	@ (8101c88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101a50:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8101a54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101a58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8101a5c:	4a8a      	ldr	r2, [pc, #552]	@ (8101c88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a5e:	430b      	orrs	r3, r1
 8101a60:	6593      	str	r3, [r2, #88]	@ 0x58
 8101a62:	e003      	b.n	8101a6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101a64:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101a68:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8101a6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a74:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8101a78:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8101a7c:	2300      	movs	r3, #0
 8101a7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8101a82:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8101a86:	460b      	mov	r3, r1
 8101a88:	4313      	orrs	r3, r2
 8101a8a:	d03a      	beq.n	8101b02 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8101a8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101a92:	2b30      	cmp	r3, #48	@ 0x30
 8101a94:	d01f      	beq.n	8101ad6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8101a96:	2b30      	cmp	r3, #48	@ 0x30
 8101a98:	d819      	bhi.n	8101ace <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8101a9a:	2b20      	cmp	r3, #32
 8101a9c:	d00c      	beq.n	8101ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8101a9e:	2b20      	cmp	r3, #32
 8101aa0:	d815      	bhi.n	8101ace <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8101aa2:	2b00      	cmp	r3, #0
 8101aa4:	d019      	beq.n	8101ada <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8101aa6:	2b10      	cmp	r3, #16
 8101aa8:	d111      	bne.n	8101ace <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101aaa:	4b77      	ldr	r3, [pc, #476]	@ (8101c88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101aae:	4a76      	ldr	r2, [pc, #472]	@ (8101c88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8101ab6:	e011      	b.n	8101adc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101ab8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101abc:	3308      	adds	r3, #8
 8101abe:	2102      	movs	r1, #2
 8101ac0:	4618      	mov	r0, r3
 8101ac2:	f001 f847 	bl	8102b54 <RCCEx_PLL2_Config>
 8101ac6:	4603      	mov	r3, r0
 8101ac8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8101acc:	e006      	b.n	8101adc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8101ace:	2301      	movs	r3, #1
 8101ad0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8101ad4:	e002      	b.n	8101adc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8101ad6:	bf00      	nop
 8101ad8:	e000      	b.n	8101adc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8101ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101adc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101ae0:	2b00      	cmp	r3, #0
 8101ae2:	d10a      	bne.n	8101afa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8101ae4:	4b68      	ldr	r3, [pc, #416]	@ (8101c88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101ae8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8101aec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101af2:	4a65      	ldr	r2, [pc, #404]	@ (8101c88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101af4:	430b      	orrs	r3, r1
 8101af6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8101af8:	e003      	b.n	8101b02 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101afa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101afe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8101b02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101b0a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8101b0e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8101b12:	2300      	movs	r3, #0
 8101b14:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8101b18:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8101b1c:	460b      	mov	r3, r1
 8101b1e:	4313      	orrs	r3, r2
 8101b20:	d051      	beq.n	8101bc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8101b22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101b26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8101b28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8101b2c:	d035      	beq.n	8101b9a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8101b2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8101b32:	d82e      	bhi.n	8101b92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101b34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8101b38:	d031      	beq.n	8101b9e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8101b3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8101b3e:	d828      	bhi.n	8101b92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8101b44:	d01a      	beq.n	8101b7c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8101b46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8101b4a:	d822      	bhi.n	8101b92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101b4c:	2b00      	cmp	r3, #0
 8101b4e:	d003      	beq.n	8101b58 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8101b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8101b54:	d007      	beq.n	8101b66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8101b56:	e01c      	b.n	8101b92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101b58:	4b4b      	ldr	r3, [pc, #300]	@ (8101c88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101b5c:	4a4a      	ldr	r2, [pc, #296]	@ (8101c88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101b5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101b62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101b64:	e01c      	b.n	8101ba0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101b66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101b6a:	3308      	adds	r3, #8
 8101b6c:	2100      	movs	r1, #0
 8101b6e:	4618      	mov	r0, r3
 8101b70:	f000 fff0 	bl	8102b54 <RCCEx_PLL2_Config>
 8101b74:	4603      	mov	r3, r0
 8101b76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101b7a:	e011      	b.n	8101ba0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101b7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101b80:	3328      	adds	r3, #40	@ 0x28
 8101b82:	2100      	movs	r1, #0
 8101b84:	4618      	mov	r0, r3
 8101b86:	f001 f897 	bl	8102cb8 <RCCEx_PLL3_Config>
 8101b8a:	4603      	mov	r3, r0
 8101b8c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101b90:	e006      	b.n	8101ba0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101b92:	2301      	movs	r3, #1
 8101b94:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8101b98:	e002      	b.n	8101ba0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8101b9a:	bf00      	nop
 8101b9c:	e000      	b.n	8101ba0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8101b9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101ba0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101ba4:	2b00      	cmp	r3, #0
 8101ba6:	d10a      	bne.n	8101bbe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8101ba8:	4b37      	ldr	r3, [pc, #220]	@ (8101c88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101bac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8101bb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101bb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8101bb6:	4a34      	ldr	r2, [pc, #208]	@ (8101c88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101bb8:	430b      	orrs	r3, r1
 8101bba:	6513      	str	r3, [r2, #80]	@ 0x50
 8101bbc:	e003      	b.n	8101bc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101bbe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101bc2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8101bc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101bce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8101bd2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8101bd6:	2300      	movs	r3, #0
 8101bd8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8101bdc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8101be0:	460b      	mov	r3, r1
 8101be2:	4313      	orrs	r3, r2
 8101be4:	d056      	beq.n	8101c94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8101be6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101bea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8101bec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8101bf0:	d033      	beq.n	8101c5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8101bf2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8101bf6:	d82c      	bhi.n	8101c52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101bf8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8101bfc:	d02f      	beq.n	8101c5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8101bfe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8101c02:	d826      	bhi.n	8101c52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101c04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8101c08:	d02b      	beq.n	8101c62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8101c0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8101c0e:	d820      	bhi.n	8101c52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101c10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8101c14:	d012      	beq.n	8101c3c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8101c16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8101c1a:	d81a      	bhi.n	8101c52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101c1c:	2b00      	cmp	r3, #0
 8101c1e:	d022      	beq.n	8101c66 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8101c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8101c24:	d115      	bne.n	8101c52 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101c26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101c2a:	3308      	adds	r3, #8
 8101c2c:	2101      	movs	r1, #1
 8101c2e:	4618      	mov	r0, r3
 8101c30:	f000 ff90 	bl	8102b54 <RCCEx_PLL2_Config>
 8101c34:	4603      	mov	r3, r0
 8101c36:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8101c3a:	e015      	b.n	8101c68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8101c3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101c40:	3328      	adds	r3, #40	@ 0x28
 8101c42:	2101      	movs	r1, #1
 8101c44:	4618      	mov	r0, r3
 8101c46:	f001 f837 	bl	8102cb8 <RCCEx_PLL3_Config>
 8101c4a:	4603      	mov	r3, r0
 8101c4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8101c50:	e00a      	b.n	8101c68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101c52:	2301      	movs	r3, #1
 8101c54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8101c58:	e006      	b.n	8101c68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101c5a:	bf00      	nop
 8101c5c:	e004      	b.n	8101c68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101c5e:	bf00      	nop
 8101c60:	e002      	b.n	8101c68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101c62:	bf00      	nop
 8101c64:	e000      	b.n	8101c68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101c68:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101c6c:	2b00      	cmp	r3, #0
 8101c6e:	d10d      	bne.n	8101c8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8101c70:	4b05      	ldr	r3, [pc, #20]	@ (8101c88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101c74:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8101c78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101c7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8101c7e:	4a02      	ldr	r2, [pc, #8]	@ (8101c88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101c80:	430b      	orrs	r3, r1
 8101c82:	6513      	str	r3, [r2, #80]	@ 0x50
 8101c84:	e006      	b.n	8101c94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8101c86:	bf00      	nop
 8101c88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c8c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101c90:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8101c94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101c9c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8101ca0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8101ca4:	2300      	movs	r3, #0
 8101ca6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8101caa:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8101cae:	460b      	mov	r3, r1
 8101cb0:	4313      	orrs	r3, r2
 8101cb2:	d055      	beq.n	8101d60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8101cb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101cb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8101cc0:	d033      	beq.n	8101d2a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8101cc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8101cc6:	d82c      	bhi.n	8101d22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101ccc:	d02f      	beq.n	8101d2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8101cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101cd2:	d826      	bhi.n	8101d22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101cd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8101cd8:	d02b      	beq.n	8101d32 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8101cda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8101cde:	d820      	bhi.n	8101d22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101ce0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101ce4:	d012      	beq.n	8101d0c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8101ce6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101cea:	d81a      	bhi.n	8101d22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101cec:	2b00      	cmp	r3, #0
 8101cee:	d022      	beq.n	8101d36 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8101cf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101cf4:	d115      	bne.n	8101d22 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101cf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101cfa:	3308      	adds	r3, #8
 8101cfc:	2101      	movs	r1, #1
 8101cfe:	4618      	mov	r0, r3
 8101d00:	f000 ff28 	bl	8102b54 <RCCEx_PLL2_Config>
 8101d04:	4603      	mov	r3, r0
 8101d06:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8101d0a:	e015      	b.n	8101d38 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8101d0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101d10:	3328      	adds	r3, #40	@ 0x28
 8101d12:	2101      	movs	r1, #1
 8101d14:	4618      	mov	r0, r3
 8101d16:	f000 ffcf 	bl	8102cb8 <RCCEx_PLL3_Config>
 8101d1a:	4603      	mov	r3, r0
 8101d1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8101d20:	e00a      	b.n	8101d38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8101d22:	2301      	movs	r3, #1
 8101d24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8101d28:	e006      	b.n	8101d38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101d2a:	bf00      	nop
 8101d2c:	e004      	b.n	8101d38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101d2e:	bf00      	nop
 8101d30:	e002      	b.n	8101d38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101d32:	bf00      	nop
 8101d34:	e000      	b.n	8101d38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101d36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101d38:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101d3c:	2b00      	cmp	r3, #0
 8101d3e:	d10b      	bne.n	8101d58 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8101d40:	4bb7      	ldr	r3, [pc, #732]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101d44:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8101d48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101d4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101d50:	4ab3      	ldr	r2, [pc, #716]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101d52:	430b      	orrs	r3, r1
 8101d54:	6593      	str	r3, [r2, #88]	@ 0x58
 8101d56:	e003      	b.n	8101d60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d58:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101d5c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8101d60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101d68:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8101d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8101d70:	2300      	movs	r3, #0
 8101d72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8101d76:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8101d7a:	460b      	mov	r3, r1
 8101d7c:	4313      	orrs	r3, r2
 8101d7e:	d02a      	beq.n	8101dd6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8101d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101d84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101d86:	2b00      	cmp	r3, #0
 8101d88:	d011      	beq.n	8101dae <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8101d8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101d8e:	d10a      	bne.n	8101da6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101d90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101d94:	3308      	adds	r3, #8
 8101d96:	2101      	movs	r1, #1
 8101d98:	4618      	mov	r0, r3
 8101d9a:	f000 fedb 	bl	8102b54 <RCCEx_PLL2_Config>
 8101d9e:	4603      	mov	r3, r0
 8101da0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8101da4:	e004      	b.n	8101db0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101da6:	2301      	movs	r3, #1
 8101da8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8101dac:	e000      	b.n	8101db0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8101dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101db0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101db4:	2b00      	cmp	r3, #0
 8101db6:	d10a      	bne.n	8101dce <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8101db8:	4b99      	ldr	r3, [pc, #612]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101dbc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8101dc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101dc6:	4a96      	ldr	r2, [pc, #600]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101dc8:	430b      	orrs	r3, r1
 8101dca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8101dcc:	e003      	b.n	8101dd6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101dce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101dd2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8101dd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101dde:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8101de2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8101de6:	2300      	movs	r3, #0
 8101de8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8101dec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8101df0:	460b      	mov	r3, r1
 8101df2:	4313      	orrs	r3, r2
 8101df4:	d037      	beq.n	8101e66 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8101df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101dfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8101dfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101e00:	d00e      	beq.n	8101e20 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8101e02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101e06:	d816      	bhi.n	8101e36 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8101e08:	2b00      	cmp	r3, #0
 8101e0a:	d018      	beq.n	8101e3e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8101e0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101e10:	d111      	bne.n	8101e36 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101e12:	4b83      	ldr	r3, [pc, #524]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101e16:	4a82      	ldr	r2, [pc, #520]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8101e1e:	e00f      	b.n	8101e40 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101e24:	3308      	adds	r3, #8
 8101e26:	2101      	movs	r1, #1
 8101e28:	4618      	mov	r0, r3
 8101e2a:	f000 fe93 	bl	8102b54 <RCCEx_PLL2_Config>
 8101e2e:	4603      	mov	r3, r0
 8101e30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8101e34:	e004      	b.n	8101e40 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101e36:	2301      	movs	r3, #1
 8101e38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8101e3c:	e000      	b.n	8101e40 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8101e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101e40:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101e44:	2b00      	cmp	r3, #0
 8101e46:	d10a      	bne.n	8101e5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8101e48:	4b75      	ldr	r3, [pc, #468]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101e4c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8101e50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8101e56:	4a72      	ldr	r2, [pc, #456]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101e58:	430b      	orrs	r3, r1
 8101e5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8101e5c:	e003      	b.n	8101e66 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101e62:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8101e66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101e6e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8101e72:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8101e76:	2300      	movs	r3, #0
 8101e78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8101e7c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8101e80:	460b      	mov	r3, r1
 8101e82:	4313      	orrs	r3, r2
 8101e84:	d03a      	beq.n	8101efc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8101e86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101e8c:	2b03      	cmp	r3, #3
 8101e8e:	d81d      	bhi.n	8101ecc <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8101e90:	a201      	add	r2, pc, #4	@ (adr r2, 8101e98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8101e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101e96:	bf00      	nop
 8101e98:	08101ed5 	.word	0x08101ed5
 8101e9c:	08101ea9 	.word	0x08101ea9
 8101ea0:	08101eb7 	.word	0x08101eb7
 8101ea4:	08101ed5 	.word	0x08101ed5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101ea8:	4b5d      	ldr	r3, [pc, #372]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101eac:	4a5c      	ldr	r2, [pc, #368]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8101eb4:	e00f      	b.n	8101ed6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101eb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101eba:	3308      	adds	r3, #8
 8101ebc:	2102      	movs	r1, #2
 8101ebe:	4618      	mov	r0, r3
 8101ec0:	f000 fe48 	bl	8102b54 <RCCEx_PLL2_Config>
 8101ec4:	4603      	mov	r3, r0
 8101ec6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8101eca:	e004      	b.n	8101ed6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8101ecc:	2301      	movs	r3, #1
 8101ece:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8101ed2:	e000      	b.n	8101ed6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8101ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101ed6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101eda:	2b00      	cmp	r3, #0
 8101edc:	d10a      	bne.n	8101ef4 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8101ede:	4b50      	ldr	r3, [pc, #320]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101ee2:	f023 0103 	bic.w	r1, r3, #3
 8101ee6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101eec:	4a4c      	ldr	r2, [pc, #304]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101eee:	430b      	orrs	r3, r1
 8101ef0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8101ef2:	e003      	b.n	8101efc <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101ef4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101ef8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8101efc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f04:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8101f08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8101f0c:	2300      	movs	r3, #0
 8101f0e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8101f12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8101f16:	460b      	mov	r3, r1
 8101f18:	4313      	orrs	r3, r2
 8101f1a:	f000 80a0 	beq.w	810205e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8101f1e:	4b41      	ldr	r3, [pc, #260]	@ (8102024 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8101f20:	681b      	ldr	r3, [r3, #0]
 8101f22:	4a40      	ldr	r2, [pc, #256]	@ (8102024 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8101f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8101f28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8101f2a:	f7fe fdef 	bl	8100b0c <HAL_GetTick>
 8101f2e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101f32:	e00b      	b.n	8101f4c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8101f34:	f7fe fdea 	bl	8100b0c <HAL_GetTick>
 8101f38:	4602      	mov	r2, r0
 8101f3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8101f3e:	1ad3      	subs	r3, r2, r3
 8101f40:	2b64      	cmp	r3, #100	@ 0x64
 8101f42:	d903      	bls.n	8101f4c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8101f44:	2303      	movs	r3, #3
 8101f46:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8101f4a:	e005      	b.n	8101f58 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101f4c:	4b35      	ldr	r3, [pc, #212]	@ (8102024 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8101f4e:	681b      	ldr	r3, [r3, #0]
 8101f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101f54:	2b00      	cmp	r3, #0
 8101f56:	d0ed      	beq.n	8101f34 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8101f58:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101f5c:	2b00      	cmp	r3, #0
 8101f5e:	d17a      	bne.n	8102056 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8101f60:	4b2f      	ldr	r3, [pc, #188]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101f62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8101f64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101f68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8101f6c:	4053      	eors	r3, r2
 8101f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8101f72:	2b00      	cmp	r3, #0
 8101f74:	d015      	beq.n	8101fa2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8101f76:	4b2a      	ldr	r3, [pc, #168]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101f7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8101f7e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8101f82:	4b27      	ldr	r3, [pc, #156]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101f86:	4a26      	ldr	r2, [pc, #152]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101f8c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8101f8e:	4b24      	ldr	r3, [pc, #144]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101f92:	4a23      	ldr	r2, [pc, #140]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101f94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8101f98:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8101f9a:	4a21      	ldr	r2, [pc, #132]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101f9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8101fa0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8101fa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101fa6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8101faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101fae:	d118      	bne.n	8101fe2 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101fb0:	f7fe fdac 	bl	8100b0c <HAL_GetTick>
 8101fb4:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101fb8:	e00d      	b.n	8101fd6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101fba:	f7fe fda7 	bl	8100b0c <HAL_GetTick>
 8101fbe:	4602      	mov	r2, r0
 8101fc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8101fc4:	1ad2      	subs	r2, r2, r3
 8101fc6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8101fca:	429a      	cmp	r2, r3
 8101fcc:	d903      	bls.n	8101fd6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8101fce:	2303      	movs	r3, #3
 8101fd0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8101fd4:	e005      	b.n	8101fe2 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101fd6:	4b12      	ldr	r3, [pc, #72]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101fda:	f003 0302 	and.w	r3, r3, #2
 8101fde:	2b00      	cmp	r3, #0
 8101fe0:	d0eb      	beq.n	8101fba <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8101fe2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8101fe6:	2b00      	cmp	r3, #0
 8101fe8:	d130      	bne.n	810204c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8101fea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101fee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8101ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8101ff6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8101ffa:	d115      	bne.n	8102028 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8101ffc:	4b08      	ldr	r3, [pc, #32]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101ffe:	691b      	ldr	r3, [r3, #16]
 8102000:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8102004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102008:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810200c:	091b      	lsrs	r3, r3, #4
 810200e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8102012:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8102016:	4a02      	ldr	r2, [pc, #8]	@ (8102020 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102018:	430b      	orrs	r3, r1
 810201a:	6113      	str	r3, [r2, #16]
 810201c:	e00a      	b.n	8102034 <HAL_RCCEx_PeriphCLKConfig+0x974>
 810201e:	bf00      	nop
 8102020:	58024400 	.word	0x58024400
 8102024:	58024800 	.word	0x58024800
 8102028:	4bd4      	ldr	r3, [pc, #848]	@ (810237c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810202a:	691b      	ldr	r3, [r3, #16]
 810202c:	4ad3      	ldr	r2, [pc, #844]	@ (810237c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810202e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8102032:	6113      	str	r3, [r2, #16]
 8102034:	4bd1      	ldr	r3, [pc, #836]	@ (810237c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102036:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8102038:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810203c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8102040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8102044:	4acd      	ldr	r2, [pc, #820]	@ (810237c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102046:	430b      	orrs	r3, r1
 8102048:	6713      	str	r3, [r2, #112]	@ 0x70
 810204a:	e008      	b.n	810205e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810204c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102050:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8102054:	e003      	b.n	810205e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102056:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810205a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810205e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102066:	f002 0301 	and.w	r3, r2, #1
 810206a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810206e:	2300      	movs	r3, #0
 8102070:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8102074:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8102078:	460b      	mov	r3, r1
 810207a:	4313      	orrs	r3, r2
 810207c:	f000 808b 	beq.w	8102196 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8102080:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8102088:	2b28      	cmp	r3, #40	@ 0x28
 810208a:	d86b      	bhi.n	8102164 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 810208c:	a201      	add	r2, pc, #4	@ (adr r2, 8102094 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 810208e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102092:	bf00      	nop
 8102094:	0810216d 	.word	0x0810216d
 8102098:	08102165 	.word	0x08102165
 810209c:	08102165 	.word	0x08102165
 81020a0:	08102165 	.word	0x08102165
 81020a4:	08102165 	.word	0x08102165
 81020a8:	08102165 	.word	0x08102165
 81020ac:	08102165 	.word	0x08102165
 81020b0:	08102165 	.word	0x08102165
 81020b4:	08102139 	.word	0x08102139
 81020b8:	08102165 	.word	0x08102165
 81020bc:	08102165 	.word	0x08102165
 81020c0:	08102165 	.word	0x08102165
 81020c4:	08102165 	.word	0x08102165
 81020c8:	08102165 	.word	0x08102165
 81020cc:	08102165 	.word	0x08102165
 81020d0:	08102165 	.word	0x08102165
 81020d4:	0810214f 	.word	0x0810214f
 81020d8:	08102165 	.word	0x08102165
 81020dc:	08102165 	.word	0x08102165
 81020e0:	08102165 	.word	0x08102165
 81020e4:	08102165 	.word	0x08102165
 81020e8:	08102165 	.word	0x08102165
 81020ec:	08102165 	.word	0x08102165
 81020f0:	08102165 	.word	0x08102165
 81020f4:	0810216d 	.word	0x0810216d
 81020f8:	08102165 	.word	0x08102165
 81020fc:	08102165 	.word	0x08102165
 8102100:	08102165 	.word	0x08102165
 8102104:	08102165 	.word	0x08102165
 8102108:	08102165 	.word	0x08102165
 810210c:	08102165 	.word	0x08102165
 8102110:	08102165 	.word	0x08102165
 8102114:	0810216d 	.word	0x0810216d
 8102118:	08102165 	.word	0x08102165
 810211c:	08102165 	.word	0x08102165
 8102120:	08102165 	.word	0x08102165
 8102124:	08102165 	.word	0x08102165
 8102128:	08102165 	.word	0x08102165
 810212c:	08102165 	.word	0x08102165
 8102130:	08102165 	.word	0x08102165
 8102134:	0810216d 	.word	0x0810216d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102138:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810213c:	3308      	adds	r3, #8
 810213e:	2101      	movs	r1, #1
 8102140:	4618      	mov	r0, r3
 8102142:	f000 fd07 	bl	8102b54 <RCCEx_PLL2_Config>
 8102146:	4603      	mov	r3, r0
 8102148:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810214c:	e00f      	b.n	810216e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810214e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102152:	3328      	adds	r3, #40	@ 0x28
 8102154:	2101      	movs	r1, #1
 8102156:	4618      	mov	r0, r3
 8102158:	f000 fdae 	bl	8102cb8 <RCCEx_PLL3_Config>
 810215c:	4603      	mov	r3, r0
 810215e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102162:	e004      	b.n	810216e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102164:	2301      	movs	r3, #1
 8102166:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810216a:	e000      	b.n	810216e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 810216c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810216e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102172:	2b00      	cmp	r3, #0
 8102174:	d10b      	bne.n	810218e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102176:	4b81      	ldr	r3, [pc, #516]	@ (810237c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810217a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810217e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8102186:	4a7d      	ldr	r2, [pc, #500]	@ (810237c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102188:	430b      	orrs	r3, r1
 810218a:	6553      	str	r3, [r2, #84]	@ 0x54
 810218c:	e003      	b.n	8102196 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810218e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102192:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8102196:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810219e:	f002 0302 	and.w	r3, r2, #2
 81021a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 81021a6:	2300      	movs	r3, #0
 81021a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 81021ac:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 81021b0:	460b      	mov	r3, r1
 81021b2:	4313      	orrs	r3, r2
 81021b4:	d042      	beq.n	810223c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81021b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81021ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81021bc:	2b05      	cmp	r3, #5
 81021be:	d825      	bhi.n	810220c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 81021c0:	a201      	add	r2, pc, #4	@ (adr r2, 81021c8 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 81021c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81021c6:	bf00      	nop
 81021c8:	08102215 	.word	0x08102215
 81021cc:	081021e1 	.word	0x081021e1
 81021d0:	081021f7 	.word	0x081021f7
 81021d4:	08102215 	.word	0x08102215
 81021d8:	08102215 	.word	0x08102215
 81021dc:	08102215 	.word	0x08102215
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81021e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81021e4:	3308      	adds	r3, #8
 81021e6:	2101      	movs	r1, #1
 81021e8:	4618      	mov	r0, r3
 81021ea:	f000 fcb3 	bl	8102b54 <RCCEx_PLL2_Config>
 81021ee:	4603      	mov	r3, r0
 81021f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81021f4:	e00f      	b.n	8102216 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81021f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81021fa:	3328      	adds	r3, #40	@ 0x28
 81021fc:	2101      	movs	r1, #1
 81021fe:	4618      	mov	r0, r3
 8102200:	f000 fd5a 	bl	8102cb8 <RCCEx_PLL3_Config>
 8102204:	4603      	mov	r3, r0
 8102206:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810220a:	e004      	b.n	8102216 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810220c:	2301      	movs	r3, #1
 810220e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102212:	e000      	b.n	8102216 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8102214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102216:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810221a:	2b00      	cmp	r3, #0
 810221c:	d10a      	bne.n	8102234 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810221e:	4b57      	ldr	r3, [pc, #348]	@ (810237c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102222:	f023 0107 	bic.w	r1, r3, #7
 8102226:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810222a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810222c:	4a53      	ldr	r2, [pc, #332]	@ (810237c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810222e:	430b      	orrs	r3, r1
 8102230:	6553      	str	r3, [r2, #84]	@ 0x54
 8102232:	e003      	b.n	810223c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102234:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102238:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810223c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102244:	f002 0304 	and.w	r3, r2, #4
 8102248:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810224c:	2300      	movs	r3, #0
 810224e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8102252:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8102256:	460b      	mov	r3, r1
 8102258:	4313      	orrs	r3, r2
 810225a:	d044      	beq.n	81022e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 810225c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102260:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8102264:	2b05      	cmp	r3, #5
 8102266:	d825      	bhi.n	81022b4 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8102268:	a201      	add	r2, pc, #4	@ (adr r2, 8102270 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 810226a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810226e:	bf00      	nop
 8102270:	081022bd 	.word	0x081022bd
 8102274:	08102289 	.word	0x08102289
 8102278:	0810229f 	.word	0x0810229f
 810227c:	081022bd 	.word	0x081022bd
 8102280:	081022bd 	.word	0x081022bd
 8102284:	081022bd 	.word	0x081022bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102288:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810228c:	3308      	adds	r3, #8
 810228e:	2101      	movs	r1, #1
 8102290:	4618      	mov	r0, r3
 8102292:	f000 fc5f 	bl	8102b54 <RCCEx_PLL2_Config>
 8102296:	4603      	mov	r3, r0
 8102298:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810229c:	e00f      	b.n	81022be <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810229e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81022a2:	3328      	adds	r3, #40	@ 0x28
 81022a4:	2101      	movs	r1, #1
 81022a6:	4618      	mov	r0, r3
 81022a8:	f000 fd06 	bl	8102cb8 <RCCEx_PLL3_Config>
 81022ac:	4603      	mov	r3, r0
 81022ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81022b2:	e004      	b.n	81022be <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81022b4:	2301      	movs	r3, #1
 81022b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81022ba:	e000      	b.n	81022be <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 81022bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81022be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81022c2:	2b00      	cmp	r3, #0
 81022c4:	d10b      	bne.n	81022de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81022c6:	4b2d      	ldr	r3, [pc, #180]	@ (810237c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81022c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81022ca:	f023 0107 	bic.w	r1, r3, #7
 81022ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81022d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81022d6:	4a29      	ldr	r2, [pc, #164]	@ (810237c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81022d8:	430b      	orrs	r3, r1
 81022da:	6593      	str	r3, [r2, #88]	@ 0x58
 81022dc:	e003      	b.n	81022e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81022e2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81022e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81022ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81022ee:	f002 0320 	and.w	r3, r2, #32
 81022f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 81022f6:	2300      	movs	r3, #0
 81022f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 81022fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8102300:	460b      	mov	r3, r1
 8102302:	4313      	orrs	r3, r2
 8102304:	d057      	beq.n	81023b6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8102306:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810230a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810230e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102312:	d035      	beq.n	8102380 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8102314:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102318:	d82c      	bhi.n	8102374 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810231a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810231e:	d031      	beq.n	8102384 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8102320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102324:	d826      	bhi.n	8102374 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8102326:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810232a:	d02d      	beq.n	8102388 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 810232c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102330:	d820      	bhi.n	8102374 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8102332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102336:	d012      	beq.n	810235e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8102338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810233c:	d81a      	bhi.n	8102374 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810233e:	2b00      	cmp	r3, #0
 8102340:	d024      	beq.n	810238c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8102342:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102346:	d115      	bne.n	8102374 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102348:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810234c:	3308      	adds	r3, #8
 810234e:	2100      	movs	r1, #0
 8102350:	4618      	mov	r0, r3
 8102352:	f000 fbff 	bl	8102b54 <RCCEx_PLL2_Config>
 8102356:	4603      	mov	r3, r0
 8102358:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810235c:	e017      	b.n	810238e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810235e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102362:	3328      	adds	r3, #40	@ 0x28
 8102364:	2102      	movs	r1, #2
 8102366:	4618      	mov	r0, r3
 8102368:	f000 fca6 	bl	8102cb8 <RCCEx_PLL3_Config>
 810236c:	4603      	mov	r3, r0
 810236e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102372:	e00c      	b.n	810238e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102374:	2301      	movs	r3, #1
 8102376:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810237a:	e008      	b.n	810238e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 810237c:	58024400 	.word	0x58024400
        break;
 8102380:	bf00      	nop
 8102382:	e004      	b.n	810238e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8102384:	bf00      	nop
 8102386:	e002      	b.n	810238e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8102388:	bf00      	nop
 810238a:	e000      	b.n	810238e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810238c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810238e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102392:	2b00      	cmp	r3, #0
 8102394:	d10b      	bne.n	81023ae <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102396:	4bc2      	ldr	r3, [pc, #776]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810239a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810239e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81023a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81023a6:	4abe      	ldr	r2, [pc, #760]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81023a8:	430b      	orrs	r3, r1
 81023aa:	6553      	str	r3, [r2, #84]	@ 0x54
 81023ac:	e003      	b.n	81023b6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81023ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81023b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81023b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81023ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81023be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81023c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81023c6:	2300      	movs	r3, #0
 81023c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81023cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 81023d0:	460b      	mov	r3, r1
 81023d2:	4313      	orrs	r3, r2
 81023d4:	d055      	beq.n	8102482 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81023d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81023da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81023de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81023e2:	d033      	beq.n	810244c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 81023e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81023e8:	d82c      	bhi.n	8102444 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81023ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81023ee:	d02f      	beq.n	8102450 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 81023f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81023f4:	d826      	bhi.n	8102444 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81023f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81023fa:	d02b      	beq.n	8102454 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 81023fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102400:	d820      	bhi.n	8102444 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8102402:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102406:	d012      	beq.n	810242e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8102408:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810240c:	d81a      	bhi.n	8102444 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810240e:	2b00      	cmp	r3, #0
 8102410:	d022      	beq.n	8102458 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8102412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8102416:	d115      	bne.n	8102444 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102418:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810241c:	3308      	adds	r3, #8
 810241e:	2100      	movs	r1, #0
 8102420:	4618      	mov	r0, r3
 8102422:	f000 fb97 	bl	8102b54 <RCCEx_PLL2_Config>
 8102426:	4603      	mov	r3, r0
 8102428:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810242c:	e015      	b.n	810245a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810242e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102432:	3328      	adds	r3, #40	@ 0x28
 8102434:	2102      	movs	r1, #2
 8102436:	4618      	mov	r0, r3
 8102438:	f000 fc3e 	bl	8102cb8 <RCCEx_PLL3_Config>
 810243c:	4603      	mov	r3, r0
 810243e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102442:	e00a      	b.n	810245a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102444:	2301      	movs	r3, #1
 8102446:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810244a:	e006      	b.n	810245a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810244c:	bf00      	nop
 810244e:	e004      	b.n	810245a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8102450:	bf00      	nop
 8102452:	e002      	b.n	810245a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8102454:	bf00      	nop
 8102456:	e000      	b.n	810245a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8102458:	bf00      	nop
    }

    if (ret == HAL_OK)
 810245a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810245e:	2b00      	cmp	r3, #0
 8102460:	d10b      	bne.n	810247a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102462:	4b8f      	ldr	r3, [pc, #572]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102466:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810246a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810246e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102472:	4a8b      	ldr	r2, [pc, #556]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102474:	430b      	orrs	r3, r1
 8102476:	6593      	str	r3, [r2, #88]	@ 0x58
 8102478:	e003      	b.n	8102482 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810247a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810247e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8102482:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102486:	e9d3 2300 	ldrd	r2, r3, [r3]
 810248a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 810248e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8102492:	2300      	movs	r3, #0
 8102494:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8102498:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810249c:	460b      	mov	r3, r1
 810249e:	4313      	orrs	r3, r2
 81024a0:	d055      	beq.n	810254e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81024a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81024a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81024aa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81024ae:	d033      	beq.n	8102518 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 81024b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81024b4:	d82c      	bhi.n	8102510 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81024b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81024ba:	d02f      	beq.n	810251c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 81024bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81024c0:	d826      	bhi.n	8102510 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81024c2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81024c6:	d02b      	beq.n	8102520 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 81024c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81024cc:	d820      	bhi.n	8102510 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81024ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81024d2:	d012      	beq.n	81024fa <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 81024d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81024d8:	d81a      	bhi.n	8102510 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81024da:	2b00      	cmp	r3, #0
 81024dc:	d022      	beq.n	8102524 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 81024de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81024e2:	d115      	bne.n	8102510 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81024e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81024e8:	3308      	adds	r3, #8
 81024ea:	2100      	movs	r1, #0
 81024ec:	4618      	mov	r0, r3
 81024ee:	f000 fb31 	bl	8102b54 <RCCEx_PLL2_Config>
 81024f2:	4603      	mov	r3, r0
 81024f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81024f8:	e015      	b.n	8102526 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81024fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81024fe:	3328      	adds	r3, #40	@ 0x28
 8102500:	2102      	movs	r1, #2
 8102502:	4618      	mov	r0, r3
 8102504:	f000 fbd8 	bl	8102cb8 <RCCEx_PLL3_Config>
 8102508:	4603      	mov	r3, r0
 810250a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810250e:	e00a      	b.n	8102526 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102510:	2301      	movs	r3, #1
 8102512:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102516:	e006      	b.n	8102526 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8102518:	bf00      	nop
 810251a:	e004      	b.n	8102526 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810251c:	bf00      	nop
 810251e:	e002      	b.n	8102526 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8102520:	bf00      	nop
 8102522:	e000      	b.n	8102526 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8102524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102526:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810252a:	2b00      	cmp	r3, #0
 810252c:	d10b      	bne.n	8102546 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810252e:	4b5c      	ldr	r3, [pc, #368]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102532:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8102536:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810253a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810253e:	4a58      	ldr	r2, [pc, #352]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102540:	430b      	orrs	r3, r1
 8102542:	6593      	str	r3, [r2, #88]	@ 0x58
 8102544:	e003      	b.n	810254e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102546:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810254a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810254e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102556:	f002 0308 	and.w	r3, r2, #8
 810255a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810255e:	2300      	movs	r3, #0
 8102560:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8102564:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8102568:	460b      	mov	r3, r1
 810256a:	4313      	orrs	r3, r2
 810256c:	d01e      	beq.n	81025ac <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810256e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810257a:	d10c      	bne.n	8102596 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810257c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102580:	3328      	adds	r3, #40	@ 0x28
 8102582:	2102      	movs	r1, #2
 8102584:	4618      	mov	r0, r3
 8102586:	f000 fb97 	bl	8102cb8 <RCCEx_PLL3_Config>
 810258a:	4603      	mov	r3, r0
 810258c:	2b00      	cmp	r3, #0
 810258e:	d002      	beq.n	8102596 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8102590:	2301      	movs	r3, #1
 8102592:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8102596:	4b42      	ldr	r3, [pc, #264]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810259a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810259e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81025a6:	4a3e      	ldr	r2, [pc, #248]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81025a8:	430b      	orrs	r3, r1
 81025aa:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81025ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81025b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025b4:	f002 0310 	and.w	r3, r2, #16
 81025b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81025bc:	2300      	movs	r3, #0
 81025be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81025c2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 81025c6:	460b      	mov	r3, r1
 81025c8:	4313      	orrs	r3, r2
 81025ca:	d01e      	beq.n	810260a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81025cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81025d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81025d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81025d8:	d10c      	bne.n	81025f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81025da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81025de:	3328      	adds	r3, #40	@ 0x28
 81025e0:	2102      	movs	r1, #2
 81025e2:	4618      	mov	r0, r3
 81025e4:	f000 fb68 	bl	8102cb8 <RCCEx_PLL3_Config>
 81025e8:	4603      	mov	r3, r0
 81025ea:	2b00      	cmp	r3, #0
 81025ec:	d002      	beq.n	81025f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 81025ee:	2301      	movs	r3, #1
 81025f0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81025f4:	4b2a      	ldr	r3, [pc, #168]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81025f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81025f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81025fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102600:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102604:	4a26      	ldr	r2, [pc, #152]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102606:	430b      	orrs	r3, r1
 8102608:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810260a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102612:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8102616:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810261a:	2300      	movs	r3, #0
 810261c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8102620:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8102624:	460b      	mov	r3, r1
 8102626:	4313      	orrs	r3, r2
 8102628:	d040      	beq.n	81026ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810262a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810262e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8102632:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102636:	d022      	beq.n	810267e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8102638:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810263c:	d81b      	bhi.n	8102676 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810263e:	2b00      	cmp	r3, #0
 8102640:	d003      	beq.n	810264a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8102642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102646:	d00b      	beq.n	8102660 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8102648:	e015      	b.n	8102676 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810264a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810264e:	3308      	adds	r3, #8
 8102650:	2100      	movs	r1, #0
 8102652:	4618      	mov	r0, r3
 8102654:	f000 fa7e 	bl	8102b54 <RCCEx_PLL2_Config>
 8102658:	4603      	mov	r3, r0
 810265a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810265e:	e00f      	b.n	8102680 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102660:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102664:	3328      	adds	r3, #40	@ 0x28
 8102666:	2102      	movs	r1, #2
 8102668:	4618      	mov	r0, r3
 810266a:	f000 fb25 	bl	8102cb8 <RCCEx_PLL3_Config>
 810266e:	4603      	mov	r3, r0
 8102670:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102674:	e004      	b.n	8102680 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102676:	2301      	movs	r3, #1
 8102678:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810267c:	e000      	b.n	8102680 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 810267e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102680:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102684:	2b00      	cmp	r3, #0
 8102686:	d10d      	bne.n	81026a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102688:	4b05      	ldr	r3, [pc, #20]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810268a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810268c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8102690:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102694:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8102698:	4a01      	ldr	r2, [pc, #4]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810269a:	430b      	orrs	r3, r1
 810269c:	6593      	str	r3, [r2, #88]	@ 0x58
 810269e:	e005      	b.n	81026ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
 81026a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81026a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81026a8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81026ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81026b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026b4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 81026b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 81026ba:	2300      	movs	r3, #0
 81026bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81026be:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 81026c2:	460b      	mov	r3, r1
 81026c4:	4313      	orrs	r3, r2
 81026c6:	d03b      	beq.n	8102740 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81026c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81026cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81026d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81026d4:	d01f      	beq.n	8102716 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 81026d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81026da:	d818      	bhi.n	810270e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 81026dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81026e0:	d003      	beq.n	81026ea <HAL_RCCEx_PeriphCLKConfig+0x102a>
 81026e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81026e6:	d007      	beq.n	81026f8 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 81026e8:	e011      	b.n	810270e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81026ea:	4b64      	ldr	r3, [pc, #400]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81026ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81026ee:	4a63      	ldr	r2, [pc, #396]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81026f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81026f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 81026f6:	e00f      	b.n	8102718 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81026f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81026fc:	3328      	adds	r3, #40	@ 0x28
 81026fe:	2101      	movs	r1, #1
 8102700:	4618      	mov	r0, r3
 8102702:	f000 fad9 	bl	8102cb8 <RCCEx_PLL3_Config>
 8102706:	4603      	mov	r3, r0
 8102708:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 810270c:	e004      	b.n	8102718 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810270e:	2301      	movs	r3, #1
 8102710:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102714:	e000      	b.n	8102718 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8102716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102718:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810271c:	2b00      	cmp	r3, #0
 810271e:	d10b      	bne.n	8102738 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102720:	4b56      	ldr	r3, [pc, #344]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102724:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8102728:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810272c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8102730:	4a52      	ldr	r2, [pc, #328]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102732:	430b      	orrs	r3, r1
 8102734:	6553      	str	r3, [r2, #84]	@ 0x54
 8102736:	e003      	b.n	8102740 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102738:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810273c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102740:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102748:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810274c:	673b      	str	r3, [r7, #112]	@ 0x70
 810274e:	2300      	movs	r3, #0
 8102750:	677b      	str	r3, [r7, #116]	@ 0x74
 8102752:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8102756:	460b      	mov	r3, r1
 8102758:	4313      	orrs	r3, r2
 810275a:	d031      	beq.n	81027c0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810275c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102762:	2b00      	cmp	r3, #0
 8102764:	d003      	beq.n	810276e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8102766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810276a:	d007      	beq.n	810277c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 810276c:	e011      	b.n	8102792 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810276e:	4b43      	ldr	r3, [pc, #268]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102772:	4a42      	ldr	r2, [pc, #264]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102778:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810277a:	e00e      	b.n	810279a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810277c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102780:	3308      	adds	r3, #8
 8102782:	2102      	movs	r1, #2
 8102784:	4618      	mov	r0, r3
 8102786:	f000 f9e5 	bl	8102b54 <RCCEx_PLL2_Config>
 810278a:	4603      	mov	r3, r0
 810278c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8102790:	e003      	b.n	810279a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8102792:	2301      	movs	r3, #1
 8102794:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102798:	bf00      	nop
    }

    if (ret == HAL_OK)
 810279a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810279e:	2b00      	cmp	r3, #0
 81027a0:	d10a      	bne.n	81027b8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81027a2:	4b36      	ldr	r3, [pc, #216]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81027a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81027a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81027aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81027ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81027b0:	4a32      	ldr	r2, [pc, #200]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81027b2:	430b      	orrs	r3, r1
 81027b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81027b6:	e003      	b.n	81027c0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81027bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81027c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 81027cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 81027ce:	2300      	movs	r3, #0
 81027d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 81027d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 81027d6:	460b      	mov	r3, r1
 81027d8:	4313      	orrs	r3, r2
 81027da:	d00c      	beq.n	81027f6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81027dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81027e0:	3328      	adds	r3, #40	@ 0x28
 81027e2:	2102      	movs	r1, #2
 81027e4:	4618      	mov	r0, r3
 81027e6:	f000 fa67 	bl	8102cb8 <RCCEx_PLL3_Config>
 81027ea:	4603      	mov	r3, r0
 81027ec:	2b00      	cmp	r3, #0
 81027ee:	d002      	beq.n	81027f6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 81027f0:	2301      	movs	r3, #1
 81027f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81027f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81027fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8102802:	663b      	str	r3, [r7, #96]	@ 0x60
 8102804:	2300      	movs	r3, #0
 8102806:	667b      	str	r3, [r7, #100]	@ 0x64
 8102808:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 810280c:	460b      	mov	r3, r1
 810280e:	4313      	orrs	r3, r2
 8102810:	d03a      	beq.n	8102888 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8102812:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810281a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810281e:	d018      	beq.n	8102852 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8102820:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102824:	d811      	bhi.n	810284a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8102826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810282a:	d014      	beq.n	8102856 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 810282c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102830:	d80b      	bhi.n	810284a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8102832:	2b00      	cmp	r3, #0
 8102834:	d011      	beq.n	810285a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8102836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810283a:	d106      	bne.n	810284a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810283c:	4b0f      	ldr	r3, [pc, #60]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102840:	4a0e      	ldr	r2, [pc, #56]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8102848:	e008      	b.n	810285c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810284a:	2301      	movs	r3, #1
 810284c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102850:	e004      	b.n	810285c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8102852:	bf00      	nop
 8102854:	e002      	b.n	810285c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8102856:	bf00      	nop
 8102858:	e000      	b.n	810285c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810285a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810285c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102860:	2b00      	cmp	r3, #0
 8102862:	d10d      	bne.n	8102880 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8102864:	4b05      	ldr	r3, [pc, #20]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102868:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810286c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102874:	4a01      	ldr	r2, [pc, #4]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102876:	430b      	orrs	r3, r1
 8102878:	6553      	str	r3, [r2, #84]	@ 0x54
 810287a:	e005      	b.n	8102888 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 810287c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102880:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102884:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8102888:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102890:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8102894:	65bb      	str	r3, [r7, #88]	@ 0x58
 8102896:	2300      	movs	r3, #0
 8102898:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810289a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810289e:	460b      	mov	r3, r1
 81028a0:	4313      	orrs	r3, r2
 81028a2:	d009      	beq.n	81028b8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81028a4:	4baa      	ldr	r3, [pc, #680]	@ (8102b50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81028a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81028a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81028ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81028b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81028b2:	4aa7      	ldr	r2, [pc, #668]	@ (8102b50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81028b4:	430b      	orrs	r3, r1
 81028b6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81028b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81028bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 81028c4:	653b      	str	r3, [r7, #80]	@ 0x50
 81028c6:	2300      	movs	r3, #0
 81028c8:	657b      	str	r3, [r7, #84]	@ 0x54
 81028ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 81028ce:	460b      	mov	r3, r1
 81028d0:	4313      	orrs	r3, r2
 81028d2:	d00a      	beq.n	81028ea <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81028d4:	4b9e      	ldr	r3, [pc, #632]	@ (8102b50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81028d6:	691b      	ldr	r3, [r3, #16]
 81028d8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 81028dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81028e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81028e4:	4a9a      	ldr	r2, [pc, #616]	@ (8102b50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81028e6:	430b      	orrs	r3, r1
 81028e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81028ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81028ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028f2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 81028f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 81028f8:	2300      	movs	r3, #0
 81028fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81028fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8102900:	460b      	mov	r3, r1
 8102902:	4313      	orrs	r3, r2
 8102904:	d009      	beq.n	810291a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8102906:	4b92      	ldr	r3, [pc, #584]	@ (8102b50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810290a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810290e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102914:	4a8e      	ldr	r2, [pc, #568]	@ (8102b50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102916:	430b      	orrs	r3, r1
 8102918:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810291a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810291e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102922:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8102926:	643b      	str	r3, [r7, #64]	@ 0x40
 8102928:	2300      	movs	r3, #0
 810292a:	647b      	str	r3, [r7, #68]	@ 0x44
 810292c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8102930:	460b      	mov	r3, r1
 8102932:	4313      	orrs	r3, r2
 8102934:	d00e      	beq.n	8102954 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8102936:	4b86      	ldr	r3, [pc, #536]	@ (8102b50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102938:	691b      	ldr	r3, [r3, #16]
 810293a:	4a85      	ldr	r2, [pc, #532]	@ (8102b50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810293c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8102940:	6113      	str	r3, [r2, #16]
 8102942:	4b83      	ldr	r3, [pc, #524]	@ (8102b50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102944:	6919      	ldr	r1, [r3, #16]
 8102946:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810294a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810294e:	4a80      	ldr	r2, [pc, #512]	@ (8102b50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102950:	430b      	orrs	r3, r1
 8102952:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102954:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102958:	e9d3 2300 	ldrd	r2, r3, [r3]
 810295c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8102960:	63bb      	str	r3, [r7, #56]	@ 0x38
 8102962:	2300      	movs	r3, #0
 8102964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102966:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810296a:	460b      	mov	r3, r1
 810296c:	4313      	orrs	r3, r2
 810296e:	d009      	beq.n	8102984 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8102970:	4b77      	ldr	r3, [pc, #476]	@ (8102b50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102974:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8102978:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810297c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810297e:	4a74      	ldr	r2, [pc, #464]	@ (8102b50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102980:	430b      	orrs	r3, r1
 8102982:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8102984:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102988:	e9d3 2300 	ldrd	r2, r3, [r3]
 810298c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8102990:	633b      	str	r3, [r7, #48]	@ 0x30
 8102992:	2300      	movs	r3, #0
 8102994:	637b      	str	r3, [r7, #52]	@ 0x34
 8102996:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810299a:	460b      	mov	r3, r1
 810299c:	4313      	orrs	r3, r2
 810299e:	d00a      	beq.n	81029b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81029a0:	4b6b      	ldr	r3, [pc, #428]	@ (8102b50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81029a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81029a4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 81029a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81029ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81029b0:	4a67      	ldr	r2, [pc, #412]	@ (8102b50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81029b2:	430b      	orrs	r3, r1
 81029b4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81029b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81029ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029be:	2100      	movs	r1, #0
 81029c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 81029c2:	f003 0301 	and.w	r3, r3, #1
 81029c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81029c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 81029cc:	460b      	mov	r3, r1
 81029ce:	4313      	orrs	r3, r2
 81029d0:	d011      	beq.n	81029f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81029d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81029d6:	3308      	adds	r3, #8
 81029d8:	2100      	movs	r1, #0
 81029da:	4618      	mov	r0, r3
 81029dc:	f000 f8ba 	bl	8102b54 <RCCEx_PLL2_Config>
 81029e0:	4603      	mov	r3, r0
 81029e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81029e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81029ea:	2b00      	cmp	r3, #0
 81029ec:	d003      	beq.n	81029f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81029ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81029f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81029f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81029fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029fe:	2100      	movs	r1, #0
 8102a00:	6239      	str	r1, [r7, #32]
 8102a02:	f003 0302 	and.w	r3, r3, #2
 8102a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8102a08:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8102a0c:	460b      	mov	r3, r1
 8102a0e:	4313      	orrs	r3, r2
 8102a10:	d011      	beq.n	8102a36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102a16:	3308      	adds	r3, #8
 8102a18:	2101      	movs	r1, #1
 8102a1a:	4618      	mov	r0, r3
 8102a1c:	f000 f89a 	bl	8102b54 <RCCEx_PLL2_Config>
 8102a20:	4603      	mov	r3, r0
 8102a22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8102a26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102a2a:	2b00      	cmp	r3, #0
 8102a2c:	d003      	beq.n	8102a36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102a32:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8102a36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a3e:	2100      	movs	r1, #0
 8102a40:	61b9      	str	r1, [r7, #24]
 8102a42:	f003 0304 	and.w	r3, r3, #4
 8102a46:	61fb      	str	r3, [r7, #28]
 8102a48:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8102a4c:	460b      	mov	r3, r1
 8102a4e:	4313      	orrs	r3, r2
 8102a50:	d011      	beq.n	8102a76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102a52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102a56:	3308      	adds	r3, #8
 8102a58:	2102      	movs	r1, #2
 8102a5a:	4618      	mov	r0, r3
 8102a5c:	f000 f87a 	bl	8102b54 <RCCEx_PLL2_Config>
 8102a60:	4603      	mov	r3, r0
 8102a62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8102a66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102a6a:	2b00      	cmp	r3, #0
 8102a6c:	d003      	beq.n	8102a76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102a72:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8102a76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a7e:	2100      	movs	r1, #0
 8102a80:	6139      	str	r1, [r7, #16]
 8102a82:	f003 0308 	and.w	r3, r3, #8
 8102a86:	617b      	str	r3, [r7, #20]
 8102a88:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8102a8c:	460b      	mov	r3, r1
 8102a8e:	4313      	orrs	r3, r2
 8102a90:	d011      	beq.n	8102ab6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102a92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102a96:	3328      	adds	r3, #40	@ 0x28
 8102a98:	2100      	movs	r1, #0
 8102a9a:	4618      	mov	r0, r3
 8102a9c:	f000 f90c 	bl	8102cb8 <RCCEx_PLL3_Config>
 8102aa0:	4603      	mov	r3, r0
 8102aa2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8102aa6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102aaa:	2b00      	cmp	r3, #0
 8102aac:	d003      	beq.n	8102ab6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102aae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102ab2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8102ab6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102abe:	2100      	movs	r1, #0
 8102ac0:	60b9      	str	r1, [r7, #8]
 8102ac2:	f003 0310 	and.w	r3, r3, #16
 8102ac6:	60fb      	str	r3, [r7, #12]
 8102ac8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8102acc:	460b      	mov	r3, r1
 8102ace:	4313      	orrs	r3, r2
 8102ad0:	d011      	beq.n	8102af6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102ad2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ad6:	3328      	adds	r3, #40	@ 0x28
 8102ad8:	2101      	movs	r1, #1
 8102ada:	4618      	mov	r0, r3
 8102adc:	f000 f8ec 	bl	8102cb8 <RCCEx_PLL3_Config>
 8102ae0:	4603      	mov	r3, r0
 8102ae2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8102ae6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102aea:	2b00      	cmp	r3, #0
 8102aec:	d003      	beq.n	8102af6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102aee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102af2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8102af6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102afe:	2100      	movs	r1, #0
 8102b00:	6039      	str	r1, [r7, #0]
 8102b02:	f003 0320 	and.w	r3, r3, #32
 8102b06:	607b      	str	r3, [r7, #4]
 8102b08:	e9d7 1200 	ldrd	r1, r2, [r7]
 8102b0c:	460b      	mov	r3, r1
 8102b0e:	4313      	orrs	r3, r2
 8102b10:	d011      	beq.n	8102b36 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102b12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102b16:	3328      	adds	r3, #40	@ 0x28
 8102b18:	2102      	movs	r1, #2
 8102b1a:	4618      	mov	r0, r3
 8102b1c:	f000 f8cc 	bl	8102cb8 <RCCEx_PLL3_Config>
 8102b20:	4603      	mov	r3, r0
 8102b22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8102b26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102b2a:	2b00      	cmp	r3, #0
 8102b2c:	d003      	beq.n	8102b36 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102b32:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8102b36:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8102b3a:	2b00      	cmp	r3, #0
 8102b3c:	d101      	bne.n	8102b42 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8102b3e:	2300      	movs	r3, #0
 8102b40:	e000      	b.n	8102b44 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8102b42:	2301      	movs	r3, #1
}
 8102b44:	4618      	mov	r0, r3
 8102b46:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8102b4a:	46bd      	mov	sp, r7
 8102b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8102b50:	58024400 	.word	0x58024400

08102b54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8102b54:	b580      	push	{r7, lr}
 8102b56:	b084      	sub	sp, #16
 8102b58:	af00      	add	r7, sp, #0
 8102b5a:	6078      	str	r0, [r7, #4]
 8102b5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102b5e:	2300      	movs	r3, #0
 8102b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102b62:	4b54      	ldr	r3, [pc, #336]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102b66:	f003 0303 	and.w	r3, r3, #3
 8102b6a:	2b03      	cmp	r3, #3
 8102b6c:	d101      	bne.n	8102b72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8102b6e:	2301      	movs	r3, #1
 8102b70:	e09b      	b.n	8102caa <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8102b72:	4b50      	ldr	r3, [pc, #320]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102b74:	681b      	ldr	r3, [r3, #0]
 8102b76:	4a4f      	ldr	r2, [pc, #316]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102b78:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8102b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102b7e:	f7fd ffc5 	bl	8100b0c <HAL_GetTick>
 8102b82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102b84:	e008      	b.n	8102b98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8102b86:	f7fd ffc1 	bl	8100b0c <HAL_GetTick>
 8102b8a:	4602      	mov	r2, r0
 8102b8c:	68bb      	ldr	r3, [r7, #8]
 8102b8e:	1ad3      	subs	r3, r2, r3
 8102b90:	2b02      	cmp	r3, #2
 8102b92:	d901      	bls.n	8102b98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102b94:	2303      	movs	r3, #3
 8102b96:	e088      	b.n	8102caa <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102b98:	4b46      	ldr	r3, [pc, #280]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102b9a:	681b      	ldr	r3, [r3, #0]
 8102b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8102ba0:	2b00      	cmp	r3, #0
 8102ba2:	d1f0      	bne.n	8102b86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8102ba4:	4b43      	ldr	r3, [pc, #268]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102ba8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8102bac:	687b      	ldr	r3, [r7, #4]
 8102bae:	681b      	ldr	r3, [r3, #0]
 8102bb0:	031b      	lsls	r3, r3, #12
 8102bb2:	4940      	ldr	r1, [pc, #256]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102bb4:	4313      	orrs	r3, r2
 8102bb6:	628b      	str	r3, [r1, #40]	@ 0x28
 8102bb8:	687b      	ldr	r3, [r7, #4]
 8102bba:	685b      	ldr	r3, [r3, #4]
 8102bbc:	3b01      	subs	r3, #1
 8102bbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102bc2:	687b      	ldr	r3, [r7, #4]
 8102bc4:	689b      	ldr	r3, [r3, #8]
 8102bc6:	3b01      	subs	r3, #1
 8102bc8:	025b      	lsls	r3, r3, #9
 8102bca:	b29b      	uxth	r3, r3
 8102bcc:	431a      	orrs	r2, r3
 8102bce:	687b      	ldr	r3, [r7, #4]
 8102bd0:	68db      	ldr	r3, [r3, #12]
 8102bd2:	3b01      	subs	r3, #1
 8102bd4:	041b      	lsls	r3, r3, #16
 8102bd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8102bda:	431a      	orrs	r2, r3
 8102bdc:	687b      	ldr	r3, [r7, #4]
 8102bde:	691b      	ldr	r3, [r3, #16]
 8102be0:	3b01      	subs	r3, #1
 8102be2:	061b      	lsls	r3, r3, #24
 8102be4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8102be8:	4932      	ldr	r1, [pc, #200]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102bea:	4313      	orrs	r3, r2
 8102bec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8102bee:	4b31      	ldr	r3, [pc, #196]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102bf2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8102bf6:	687b      	ldr	r3, [r7, #4]
 8102bf8:	695b      	ldr	r3, [r3, #20]
 8102bfa:	492e      	ldr	r1, [pc, #184]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102bfc:	4313      	orrs	r3, r2
 8102bfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8102c00:	4b2c      	ldr	r3, [pc, #176]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c04:	f023 0220 	bic.w	r2, r3, #32
 8102c08:	687b      	ldr	r3, [r7, #4]
 8102c0a:	699b      	ldr	r3, [r3, #24]
 8102c0c:	4929      	ldr	r1, [pc, #164]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102c0e:	4313      	orrs	r3, r2
 8102c10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8102c12:	4b28      	ldr	r3, [pc, #160]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c16:	4a27      	ldr	r2, [pc, #156]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102c18:	f023 0310 	bic.w	r3, r3, #16
 8102c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8102c1e:	4b25      	ldr	r3, [pc, #148]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102c22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102c26:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8102c2a:	687a      	ldr	r2, [r7, #4]
 8102c2c:	69d2      	ldr	r2, [r2, #28]
 8102c2e:	00d2      	lsls	r2, r2, #3
 8102c30:	4920      	ldr	r1, [pc, #128]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102c32:	4313      	orrs	r3, r2
 8102c34:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8102c36:	4b1f      	ldr	r3, [pc, #124]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102c3c:	f043 0310 	orr.w	r3, r3, #16
 8102c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8102c42:	683b      	ldr	r3, [r7, #0]
 8102c44:	2b00      	cmp	r3, #0
 8102c46:	d106      	bne.n	8102c56 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8102c48:	4b1a      	ldr	r3, [pc, #104]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c4c:	4a19      	ldr	r2, [pc, #100]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102c4e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8102c52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8102c54:	e00f      	b.n	8102c76 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8102c56:	683b      	ldr	r3, [r7, #0]
 8102c58:	2b01      	cmp	r3, #1
 8102c5a:	d106      	bne.n	8102c6a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8102c5c:	4b15      	ldr	r3, [pc, #84]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c60:	4a14      	ldr	r2, [pc, #80]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102c62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8102c66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8102c68:	e005      	b.n	8102c76 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8102c6a:	4b12      	ldr	r3, [pc, #72]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c6e:	4a11      	ldr	r2, [pc, #68]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102c70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8102c74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8102c76:	4b0f      	ldr	r3, [pc, #60]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102c78:	681b      	ldr	r3, [r3, #0]
 8102c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102c7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8102c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102c82:	f7fd ff43 	bl	8100b0c <HAL_GetTick>
 8102c86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102c88:	e008      	b.n	8102c9c <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8102c8a:	f7fd ff3f 	bl	8100b0c <HAL_GetTick>
 8102c8e:	4602      	mov	r2, r0
 8102c90:	68bb      	ldr	r3, [r7, #8]
 8102c92:	1ad3      	subs	r3, r2, r3
 8102c94:	2b02      	cmp	r3, #2
 8102c96:	d901      	bls.n	8102c9c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8102c98:	2303      	movs	r3, #3
 8102c9a:	e006      	b.n	8102caa <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102c9c:	4b05      	ldr	r3, [pc, #20]	@ (8102cb4 <RCCEx_PLL2_Config+0x160>)
 8102c9e:	681b      	ldr	r3, [r3, #0]
 8102ca0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8102ca4:	2b00      	cmp	r3, #0
 8102ca6:	d0f0      	beq.n	8102c8a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8102ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8102caa:	4618      	mov	r0, r3
 8102cac:	3710      	adds	r7, #16
 8102cae:	46bd      	mov	sp, r7
 8102cb0:	bd80      	pop	{r7, pc}
 8102cb2:	bf00      	nop
 8102cb4:	58024400 	.word	0x58024400

08102cb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8102cb8:	b580      	push	{r7, lr}
 8102cba:	b084      	sub	sp, #16
 8102cbc:	af00      	add	r7, sp, #0
 8102cbe:	6078      	str	r0, [r7, #4]
 8102cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102cc2:	2300      	movs	r3, #0
 8102cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102cc6:	4b54      	ldr	r3, [pc, #336]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102cca:	f003 0303 	and.w	r3, r3, #3
 8102cce:	2b03      	cmp	r3, #3
 8102cd0:	d101      	bne.n	8102cd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8102cd2:	2301      	movs	r3, #1
 8102cd4:	e09b      	b.n	8102e0e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8102cd6:	4b50      	ldr	r3, [pc, #320]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102cd8:	681b      	ldr	r3, [r3, #0]
 8102cda:	4a4f      	ldr	r2, [pc, #316]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102cdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8102ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102ce2:	f7fd ff13 	bl	8100b0c <HAL_GetTick>
 8102ce6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102ce8:	e008      	b.n	8102cfc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8102cea:	f7fd ff0f 	bl	8100b0c <HAL_GetTick>
 8102cee:	4602      	mov	r2, r0
 8102cf0:	68bb      	ldr	r3, [r7, #8]
 8102cf2:	1ad3      	subs	r3, r2, r3
 8102cf4:	2b02      	cmp	r3, #2
 8102cf6:	d901      	bls.n	8102cfc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102cf8:	2303      	movs	r3, #3
 8102cfa:	e088      	b.n	8102e0e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102cfc:	4b46      	ldr	r3, [pc, #280]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102cfe:	681b      	ldr	r3, [r3, #0]
 8102d00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8102d04:	2b00      	cmp	r3, #0
 8102d06:	d1f0      	bne.n	8102cea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8102d08:	4b43      	ldr	r3, [pc, #268]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102d0c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8102d10:	687b      	ldr	r3, [r7, #4]
 8102d12:	681b      	ldr	r3, [r3, #0]
 8102d14:	051b      	lsls	r3, r3, #20
 8102d16:	4940      	ldr	r1, [pc, #256]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102d18:	4313      	orrs	r3, r2
 8102d1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8102d1c:	687b      	ldr	r3, [r7, #4]
 8102d1e:	685b      	ldr	r3, [r3, #4]
 8102d20:	3b01      	subs	r3, #1
 8102d22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102d26:	687b      	ldr	r3, [r7, #4]
 8102d28:	689b      	ldr	r3, [r3, #8]
 8102d2a:	3b01      	subs	r3, #1
 8102d2c:	025b      	lsls	r3, r3, #9
 8102d2e:	b29b      	uxth	r3, r3
 8102d30:	431a      	orrs	r2, r3
 8102d32:	687b      	ldr	r3, [r7, #4]
 8102d34:	68db      	ldr	r3, [r3, #12]
 8102d36:	3b01      	subs	r3, #1
 8102d38:	041b      	lsls	r3, r3, #16
 8102d3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8102d3e:	431a      	orrs	r2, r3
 8102d40:	687b      	ldr	r3, [r7, #4]
 8102d42:	691b      	ldr	r3, [r3, #16]
 8102d44:	3b01      	subs	r3, #1
 8102d46:	061b      	lsls	r3, r3, #24
 8102d48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8102d4c:	4932      	ldr	r1, [pc, #200]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102d4e:	4313      	orrs	r3, r2
 8102d50:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8102d52:	4b31      	ldr	r3, [pc, #196]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102d56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8102d5a:	687b      	ldr	r3, [r7, #4]
 8102d5c:	695b      	ldr	r3, [r3, #20]
 8102d5e:	492e      	ldr	r1, [pc, #184]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102d60:	4313      	orrs	r3, r2
 8102d62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8102d64:	4b2c      	ldr	r3, [pc, #176]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102d68:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8102d6c:	687b      	ldr	r3, [r7, #4]
 8102d6e:	699b      	ldr	r3, [r3, #24]
 8102d70:	4929      	ldr	r1, [pc, #164]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102d72:	4313      	orrs	r3, r2
 8102d74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8102d76:	4b28      	ldr	r3, [pc, #160]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102d7a:	4a27      	ldr	r2, [pc, #156]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8102d80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8102d82:	4b25      	ldr	r3, [pc, #148]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102d86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102d8a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8102d8e:	687a      	ldr	r2, [r7, #4]
 8102d90:	69d2      	ldr	r2, [r2, #28]
 8102d92:	00d2      	lsls	r2, r2, #3
 8102d94:	4920      	ldr	r1, [pc, #128]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102d96:	4313      	orrs	r3, r2
 8102d98:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8102d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102da0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8102da4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8102da6:	683b      	ldr	r3, [r7, #0]
 8102da8:	2b00      	cmp	r3, #0
 8102daa:	d106      	bne.n	8102dba <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8102dac:	4b1a      	ldr	r3, [pc, #104]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102db0:	4a19      	ldr	r2, [pc, #100]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102db2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8102db6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8102db8:	e00f      	b.n	8102dda <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8102dba:	683b      	ldr	r3, [r7, #0]
 8102dbc:	2b01      	cmp	r3, #1
 8102dbe:	d106      	bne.n	8102dce <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8102dc0:	4b15      	ldr	r3, [pc, #84]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102dc4:	4a14      	ldr	r2, [pc, #80]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102dc6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8102dca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8102dcc:	e005      	b.n	8102dda <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8102dce:	4b12      	ldr	r3, [pc, #72]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102dd2:	4a11      	ldr	r2, [pc, #68]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102dd4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8102dd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8102dda:	4b0f      	ldr	r3, [pc, #60]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102ddc:	681b      	ldr	r3, [r3, #0]
 8102dde:	4a0e      	ldr	r2, [pc, #56]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8102de4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102de6:	f7fd fe91 	bl	8100b0c <HAL_GetTick>
 8102dea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8102dec:	e008      	b.n	8102e00 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8102dee:	f7fd fe8d 	bl	8100b0c <HAL_GetTick>
 8102df2:	4602      	mov	r2, r0
 8102df4:	68bb      	ldr	r3, [r7, #8]
 8102df6:	1ad3      	subs	r3, r2, r3
 8102df8:	2b02      	cmp	r3, #2
 8102dfa:	d901      	bls.n	8102e00 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8102dfc:	2303      	movs	r3, #3
 8102dfe:	e006      	b.n	8102e0e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8102e00:	4b05      	ldr	r3, [pc, #20]	@ (8102e18 <RCCEx_PLL3_Config+0x160>)
 8102e02:	681b      	ldr	r3, [r3, #0]
 8102e04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8102e08:	2b00      	cmp	r3, #0
 8102e0a:	d0f0      	beq.n	8102dee <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8102e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8102e0e:	4618      	mov	r0, r3
 8102e10:	3710      	adds	r7, #16
 8102e12:	46bd      	mov	sp, r7
 8102e14:	bd80      	pop	{r7, pc}
 8102e16:	bf00      	nop
 8102e18:	58024400 	.word	0x58024400

08102e1c <memset>:
 8102e1c:	4402      	add	r2, r0
 8102e1e:	4603      	mov	r3, r0
 8102e20:	4293      	cmp	r3, r2
 8102e22:	d100      	bne.n	8102e26 <memset+0xa>
 8102e24:	4770      	bx	lr
 8102e26:	f803 1b01 	strb.w	r1, [r3], #1
 8102e2a:	e7f9      	b.n	8102e20 <memset+0x4>

08102e2c <__libc_init_array>:
 8102e2c:	b570      	push	{r4, r5, r6, lr}
 8102e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8102e64 <__libc_init_array+0x38>)
 8102e30:	4c0d      	ldr	r4, [pc, #52]	@ (8102e68 <__libc_init_array+0x3c>)
 8102e32:	1b64      	subs	r4, r4, r5
 8102e34:	10a4      	asrs	r4, r4, #2
 8102e36:	2600      	movs	r6, #0
 8102e38:	42a6      	cmp	r6, r4
 8102e3a:	d109      	bne.n	8102e50 <__libc_init_array+0x24>
 8102e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8102e6c <__libc_init_array+0x40>)
 8102e3e:	4c0c      	ldr	r4, [pc, #48]	@ (8102e70 <__libc_init_array+0x44>)
 8102e40:	f000 f818 	bl	8102e74 <_init>
 8102e44:	1b64      	subs	r4, r4, r5
 8102e46:	10a4      	asrs	r4, r4, #2
 8102e48:	2600      	movs	r6, #0
 8102e4a:	42a6      	cmp	r6, r4
 8102e4c:	d105      	bne.n	8102e5a <__libc_init_array+0x2e>
 8102e4e:	bd70      	pop	{r4, r5, r6, pc}
 8102e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8102e54:	4798      	blx	r3
 8102e56:	3601      	adds	r6, #1
 8102e58:	e7ee      	b.n	8102e38 <__libc_init_array+0xc>
 8102e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8102e5e:	4798      	blx	r3
 8102e60:	3601      	adds	r6, #1
 8102e62:	e7f2      	b.n	8102e4a <__libc_init_array+0x1e>
 8102e64:	08102e9c 	.word	0x08102e9c
 8102e68:	08102e9c 	.word	0x08102e9c
 8102e6c:	08102e9c 	.word	0x08102e9c
 8102e70:	08102ea0 	.word	0x08102ea0

08102e74 <_init>:
 8102e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102e76:	bf00      	nop
 8102e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102e7a:	bc08      	pop	{r3}
 8102e7c:	469e      	mov	lr, r3
 8102e7e:	4770      	bx	lr

08102e80 <_fini>:
 8102e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102e82:	bf00      	nop
 8102e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102e86:	bc08      	pop	{r3}
 8102e88:	469e      	mov	lr, r3
 8102e8a:	4770      	bx	lr
