
stm32h757_usb_cdc_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b11c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002eb4  0800b3b4  0800b3b4  0000c3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e268  0800e268  0001215c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800e268  0800e268  0001215c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800e268  0800e268  0001215c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e268  0800e268  0000f268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e26c  0800e26c  0000f26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000215c  24000000  0800e270  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d44  2400215c  080103cc  0001215c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004ea0  080103cc  00012ea0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001215c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e24d  00000000  00000000  0001218a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000427f  00000000  00000000  000303d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00034658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf9  00000000  00000000  00035720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004345b  00000000  00000000  00036319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018fe6  00000000  00000000  00079774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a1827  00000000  00000000  0009275a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00233f81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004308  00000000  00000000  0023403c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00238344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000f95  00000000  00000000  002383a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000108  00000000  00000000  00239336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400215c 	.word	0x2400215c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b39c 	.word	0x0800b39c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24002160 	.word	0x24002160
 80002d4:	0800b39c 	.word	0x0800b39c

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b49      	ldr	r3, [pc, #292]	@ (8000404 <SystemInit+0x12c>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a48      	ldr	r2, [pc, #288]	@ (8000404 <SystemInit+0x12c>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <SystemInit+0x12c>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a44      	ldr	r2, [pc, #272]	@ (8000404 <SystemInit+0x12c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b43      	ldr	r3, [pc, #268]	@ (8000408 <SystemInit+0x130>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b40      	ldr	r3, [pc, #256]	@ (8000408 <SystemInit+0x130>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a3e      	ldr	r2, [pc, #248]	@ (8000408 <SystemInit+0x130>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b3d      	ldr	r3, [pc, #244]	@ (800040c <SystemInit+0x134>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a3c      	ldr	r2, [pc, #240]	@ (800040c <SystemInit+0x134>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b3a      	ldr	r3, [pc, #232]	@ (800040c <SystemInit+0x134>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b39      	ldr	r3, [pc, #228]	@ (800040c <SystemInit+0x134>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4938      	ldr	r1, [pc, #224]	@ (800040c <SystemInit+0x134>)
 800032c:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <SystemInit+0x138>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <SystemInit+0x130>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <SystemInit+0x130>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a30      	ldr	r2, [pc, #192]	@ (8000408 <SystemInit+0x130>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b2f      	ldr	r3, [pc, #188]	@ (800040c <SystemInit+0x134>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <SystemInit+0x134>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <SystemInit+0x134>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <SystemInit+0x134>)
 8000362:	4a2c      	ldr	r2, [pc, #176]	@ (8000414 <SystemInit+0x13c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b29      	ldr	r3, [pc, #164]	@ (800040c <SystemInit+0x134>)
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <SystemInit+0x140>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b27      	ldr	r3, [pc, #156]	@ (800040c <SystemInit+0x134>)
 800036e:	4a2b      	ldr	r2, [pc, #172]	@ (800041c <SystemInit+0x144>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <SystemInit+0x134>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b24      	ldr	r3, [pc, #144]	@ (800040c <SystemInit+0x134>)
 800037a:	4a28      	ldr	r2, [pc, #160]	@ (800041c <SystemInit+0x144>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b23      	ldr	r3, [pc, #140]	@ (800040c <SystemInit+0x134>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <SystemInit+0x134>)
 8000386:	4a25      	ldr	r2, [pc, #148]	@ (800041c <SystemInit+0x144>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b20      	ldr	r3, [pc, #128]	@ (800040c <SystemInit+0x134>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <SystemInit+0x134>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1d      	ldr	r2, [pc, #116]	@ (800040c <SystemInit+0x134>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <SystemInit+0x134>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <SystemInit+0x148>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <SystemInit+0x148>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <SystemInit+0x14c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <SystemInit+0x150>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <SystemInit+0x154>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <SystemInit+0x134>)
 80003c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d113      	bne.n	80003f8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <SystemInit+0x134>)
 80003d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d6:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <SystemInit+0x134>)
 80003d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <SystemInit+0x158>)
 80003e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <SystemInit+0x134>)
 80003ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003ee:	4a07      	ldr	r2, [pc, #28]	@ (800040c <SystemInit+0x134>)
 80003f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	52002000 	.word	0x52002000
 800040c:	58024400 	.word	0x58024400
 8000410:	eaf6ed7f 	.word	0xeaf6ed7f
 8000414:	02020200 	.word	0x02020200
 8000418:	01ff0000 	.word	0x01ff0000
 800041c:	01010280 	.word	0x01010280
 8000420:	580000c0 	.word	0x580000c0
 8000424:	5c001000 	.word	0x5c001000
 8000428:	ffff0000 	.word	0xffff0000
 800042c:	51008108 	.word	0x51008108
 8000430:	52004000 	.word	0x52004000

08000434 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000438:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4a08      	ldr	r2, [pc, #32]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043e:	f023 0302 	bic.w	r3, r3, #2
 8000442:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000444:	bf00      	nop
 8000446:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <ExitRun0Mode+0x2c>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	58024800 	.word	0x58024800

08000464 <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b0a0      	sub	sp, #128	@ 0x80
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	881b      	ldrh	r3, [r3, #0]
 8000472:	66bb      	str	r3, [r7, #104]	@ 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8000474:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	683a      	ldr	r2, [r7, #0]
 800047a:	4413      	add	r3, r2
 800047c:	677b      	str	r3, [r7, #116]	@ 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	673b      	str	r3, [r7, #112]	@ 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	667b      	str	r3, [r7, #100]	@ 0x64
  pCol2 = p2;
 8000488:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800048a:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Define new length */
  L >>= 1;
 800048c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800048e:	085b      	lsrs	r3, r3, #1
 8000490:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8000492:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	683a      	ldr	r2, [r7, #0]
 8000498:	4413      	add	r3, r2
 800049a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pMid2 = p2 + L;
 800049c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80004a2:	4413      	add	r3, r2
 80004a4:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 80004a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80004a8:	089b      	lsrs	r3, r3, #2
 80004aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80004ac:	e1b6      	b.n	800081c <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    t1[1] = p1[1];
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    t1[2] = p1[2];
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	643b      	str	r3, [r7, #64]	@ 0x40
    t1[3] = p1[3];
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	647b      	str	r3, [r7, #68]	@ 0x44

    t2[0] = p2[0];
 80004c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    t2[1] = p2[1];
 80004cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t2[2] = p2[2];
 80004d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	633b      	str	r3, [r7, #48]	@ 0x30
    t2[3] = p2[3];
 80004d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	637b      	str	r3, [r7, #52]	@ 0x34

    t3[0] = pMid1[0];
 80004de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 80004e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 80004ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 80004f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	627b      	str	r3, [r7, #36]	@ 0x24

    t4[0] = pMid2[0];
 80004f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 80004fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8000502:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8000508:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 800050e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000512:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	1d1a      	adds	r2, r3, #4
 800051a:	603a      	str	r2, [r7, #0]
 800051c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000520:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8000524:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000528:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	1d1a      	adds	r2, r3, #4
 8000530:	603a      	str	r2, [r7, #0]
 8000532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000536:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 800053a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800053e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	1d1a      	adds	r2, r3, #4
 8000546:	603a      	str	r2, [r7, #0]
 8000548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800054c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8000550:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000554:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	1d1a      	adds	r2, r3, #4
 800055c:	603a      	str	r2, [r7, #0]
 800055e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000562:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8000566:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800056a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800056e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000572:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    t2[1] = t1[1] - t2[1];
 8000576:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800057a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800057e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000582:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[2] = t1[2] - t2[2];
 8000586:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800058a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800058e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000592:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8000596:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800059a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800059e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005a2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    *pMid1++ = t3[0] + t4[0];
 80005a6:	ed97 7a06 	vldr	s14, [r7, #24]
 80005aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80005ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005b0:	1d1a      	adds	r2, r3, #4
 80005b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80005b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005b8:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 80005bc:	ed97 7a07 	vldr	s14, [r7, #28]
 80005c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80005c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005c6:	1d1a      	adds	r2, r3, #4
 80005c8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80005ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005ce:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 80005d2:	ed97 7a08 	vldr	s14, [r7, #32]
 80005d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80005da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005dc:	1d1a      	adds	r2, r3, #4
 80005de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80005e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005e4:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 80005e8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80005ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80005f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005f2:	1d1a      	adds	r2, r3, #4
 80005f4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80005f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005fa:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 80005fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8000602:	edd7 7a06 	vldr	s15, [r7, #24]
 8000606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800060a:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 800060e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000612:	edd7 7a07 	vldr	s15, [r7, #28]
 8000616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800061a:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 800061e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000622:	edd7 7a08 	vldr	s15, [r7, #32]
 8000626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800062a:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 800062e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000632:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800063a:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 800063e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000640:	1d1a      	adds	r2, r3, #4
 8000642:	673a      	str	r2, [r7, #112]	@ 0x70
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 8000648:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800064a:	1d1a      	adds	r2, r3, #4
 800064c:	673a      	str	r2, [r7, #112]	@ 0x70
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8000652:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000656:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800065a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800065e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[1] * twI;
 8000662:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000666:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800066a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800066e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[1] * twR;
 8000672:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000676:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800067a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800067e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[0] * twI;
 8000682:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000686:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800068a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800068e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8000692:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000694:	1d1a      	adds	r2, r3, #4
 8000696:	677a      	str	r2, [r7, #116]	@ 0x74
 8000698:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800069c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80006a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006a4:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 80006a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80006aa:	1d1a      	adds	r2, r3, #4
 80006ac:	677a      	str	r2, [r7, #116]	@ 0x74
 80006ae:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80006b2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80006b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006ba:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 80006be:	edd7 7a02 	vldr	s15, [r7, #8]
 80006c2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80006c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ca:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[1] * twR;
 80006ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80006d2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80006d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006da:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[1] * twI;
 80006de:	edd7 7a03 	vldr	s15, [r7, #12]
 80006e2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80006e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ea:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[0] * twR;
 80006ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80006f2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80006f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006fa:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 80006fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000700:	1d1a      	adds	r2, r3, #4
 8000702:	67ba      	str	r2, [r7, #120]	@ 0x78
 8000704:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000708:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800070c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000710:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8000714:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000716:	1d1a      	adds	r2, r3, #4
 8000718:	67ba      	str	r2, [r7, #120]	@ 0x78
 800071a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800071e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000726:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 800072a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800072c:	1d1a      	adds	r2, r3, #4
 800072e:	673a      	str	r2, [r7, #112]	@ 0x70
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 8000734:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000736:	1d1a      	adds	r2, r3, #4
 8000738:	673a      	str	r2, [r7, #112]	@ 0x70
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	65bb      	str	r3, [r7, #88]	@ 0x58

    m0 = t2[2] * twR;
 800073e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000742:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8000746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800074a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[3] * twI;
 800074e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000752:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8000756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800075a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[3] * twR;
 800075e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000762:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8000766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800076a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[2] * twI;
 800076e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000772:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8000776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800077a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *p2++ = m0 + m1;
 800077e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000780:	1d1a      	adds	r2, r3, #4
 8000782:	677a      	str	r2, [r7, #116]	@ 0x74
 8000784:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000788:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800078c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000790:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8000794:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000796:	1d1a      	adds	r2, r3, #4
 8000798:	677a      	str	r2, [r7, #116]	@ 0x74
 800079a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800079e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80007a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007a6:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 80007aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80007ae:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80007b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007b6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[3] * twR;
 80007ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80007be:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80007c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007c6:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[3] * twI;
 80007ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80007ce:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80007d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007d6:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[2] * twR;
 80007da:	edd7 7a04 	vldr	s15, [r7, #16]
 80007de:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80007e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007e6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 80007ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007ec:	1d1a      	adds	r2, r3, #4
 80007ee:	67ba      	str	r2, [r7, #120]	@ 0x78
 80007f0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80007f4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80007f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007fc:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8000800:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000802:	1d1a      	adds	r2, r3, #4
 8000804:	67ba      	str	r2, [r7, #120]	@ 0x78
 8000806:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800080a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800080e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000812:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8000816:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000818:	3b01      	subs	r3, #1
 800081a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800081c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800081e:	2b00      	cmp	r3, #0
 8000820:	f47f ae45 	bne.w	80004ae <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8000824:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000826:	b299      	uxth	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685a      	ldr	r2, [r3, #4]
 800082c:	2302      	movs	r3, #2
 800082e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000830:	f000 fef6 	bl	8001620 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8000834:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000836:	b299      	uxth	r1, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	685a      	ldr	r2, [r3, #4]
 800083c:	2302      	movs	r3, #2
 800083e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000840:	f000 feee 	bl	8001620 <arm_radix8_butterfly_f32>
}
 8000844:	bf00      	nop
 8000846:	3780      	adds	r7, #128	@ 0x80
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b0ac      	sub	sp, #176	@ 0xb0
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	085b      	lsrs	r3, r3, #1
 800085c:	b29b      	uxth	r3, r3
 800085e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8000862:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	4413      	add	r3, r2
 800086c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    float32_t * p3 = p2 + L;
 8000870:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800087a:	4413      	add	r3, r2
 800087c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    float32_t * p4 = p3 + L;
 8000880:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800088a:	4413      	add	r3, r2
 800088c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	67fb      	str	r3, [r7, #124]	@ 0x7c
    pCol2 = p2;
 8000894:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000898:	67bb      	str	r3, [r7, #120]	@ 0x78
    pCol3 = p3;
 800089a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800089e:	677b      	str	r3, [r7, #116]	@ 0x74
    pCol4 = p4;
 80008a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80008a4:	673b      	str	r3, [r7, #112]	@ 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 80008a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80008aa:	3b04      	subs	r3, #4
 80008ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pEnd2 = p3 - 1;
 80008b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80008b4:	3b04      	subs	r3, #4
 80008b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    pEnd3 = p4 - 1;
 80008ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80008be:	3b04      	subs	r3, #4
 80008c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    pEnd4 = pEnd3 + L;
 80008c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80008ce:	4413      	add	r3, r2
 80008d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80008dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80008e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80008e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80008e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    L >>= 1;
 80008ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 80008f6:	2302      	movs	r3, #2
 80008f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    twMod3 = 4;
 80008fa:	2304      	movs	r3, #4
 80008fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    twMod4 = 6;
 80008fe:	2306      	movs	r3, #6
 8000900:	667b      	str	r3, [r7, #100]	@ 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	ed93 7a00 	vldr	s14, [r3]
 8000908:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800090c:	edd3 7a00 	vldr	s15, [r3]
 8000910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000914:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	ed93 7a00 	vldr	s14, [r3]
 800091e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000922:	edd3 7a00 	vldr	s15, [r3]
 8000926:	ee77 7a67 	vsub.f32	s15, s14, s15
 800092a:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	3304      	adds	r3, #4
 8000932:	ed93 7a00 	vldr	s14, [r3]
 8000936:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800093a:	3304      	adds	r3, #4
 800093c:	edd3 7a00 	vldr	s15, [r3]
 8000940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000944:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	3304      	adds	r3, #4
 800094c:	ed93 7a00 	vldr	s14, [r3]
 8000950:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000954:	3304      	adds	r3, #4
 8000956:	edd3 7a00 	vldr	s15, [r3]
 800095a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800095e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000962:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000966:	3304      	adds	r3, #4
 8000968:	ed93 7a00 	vldr	s14, [r3]
 800096c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000970:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000974:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000978:	3304      	adds	r3, #4
 800097a:	edd3 7a00 	vldr	s15, [r3]
 800097e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000982:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000986:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800098a:	edd3 7a00 	vldr	s15, [r3]
 800098e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000996:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800099a:	edd3 7a00 	vldr	s15, [r3]
 800099e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009a2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80009a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80009aa:	edd3 7a00 	vldr	s15, [r3]
 80009ae:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80009b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80009ba:	edd3 7a00 	vldr	s15, [r3]
 80009be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009c2:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80009c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80009ca:	3304      	adds	r3, #4
 80009cc:	edd3 7a00 	vldr	s15, [r3]
 80009d0:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80009d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80009dc:	3304      	adds	r3, #4
 80009de:	edd3 7a00 	vldr	s15, [r3]
 80009e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009e6:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80009ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80009ee:	3304      	adds	r3, #4
 80009f0:	edd3 7a00 	vldr	s15, [r3]
 80009f4:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80009f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a00:	3304      	adds	r3, #4
 8000a02:	edd3 7a00 	vldr	s15, [r3]
 8000a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a0a:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000a0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000a12:	ed93 7a00 	vldr	s14, [r3]
 8000a16:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000a1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a22:	edd3 7a00 	vldr	s15, [r3]
 8000a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a2a:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000a2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000a32:	ed93 7a00 	vldr	s14, [r3]
 8000a36:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8000a3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a42:	edd3 7a00 	vldr	s15, [r3]
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	1d1a      	adds	r2, r3, #4
 8000a4a:	603a      	str	r2, [r7, #0]
 8000a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a50:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000a54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000a58:	3304      	adds	r3, #4
 8000a5a:	ed93 7a00 	vldr	s14, [r3]
 8000a5e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000a62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a6a:	3304      	adds	r3, #4
 8000a6c:	edd3 7a00 	vldr	s15, [r3]
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	1d1a      	adds	r2, r3, #4
 8000a74:	603a      	str	r2, [r7, #0]
 8000a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a7a:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8000a7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000a82:	1d1a      	adds	r2, r3, #4
 8000a84:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000a88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a8a:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8000a8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000a90:	1d1a      	adds	r2, r3, #4
 8000a92:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000a96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a98:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8000a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a9e:	1d1a      	adds	r2, r3, #4
 8000aa0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000aa4:	69fa      	ldr	r2, [r7, #28]
 8000aa6:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8000aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000aac:	1d1a      	adds	r2, r3, #4
 8000aae:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000ab2:	6a3a      	ldr	r2, [r7, #32]
 8000ab4:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8000ab6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000aba:	1d1a      	adds	r2, r3, #4
 8000abc:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8000ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ac8:	1d1a      	adds	r2, r3, #4
 8000aca:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8000ad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8000ada:	4413      	add	r3, r2
 8000adc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tw3 += twMod3;
 8000ae0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000ae8:	4413      	add	r3, r2
 8000aea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tw4 += twMod4;
 8000aee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000af6:	4413      	add	r3, r2
 8000af8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8000afc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000b00:	3b02      	subs	r3, #2
 8000b02:	085b      	lsrs	r3, r3, #1
 8000b04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000b08:	e31c      	b.n	8001144 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	ed93 7a00 	vldr	s14, [r3]
 8000b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000b14:	edd3 7a00 	vldr	s15, [r3]
 8000b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b1c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = p1[0] - p3[0];
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	ed93 7a00 	vldr	s14, [r3]
 8000b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000b2a:	edd3 7a00 	vldr	s15, [r3]
 8000b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b32:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	ed93 7a00 	vldr	s14, [r3]
 8000b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000b42:	3304      	adds	r3, #4
 8000b44:	edd3 7a00 	vldr	s15, [r3]
 8000b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b4c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = p1[1] - p3[1];
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	3304      	adds	r3, #4
 8000b54:	ed93 7a00 	vldr	s14, [r3]
 8000b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	edd3 7a00 	vldr	s15, [r3]
 8000b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b66:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000b6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000b6e:	3304      	adds	r3, #4
 8000b70:	ed93 7a00 	vldr	s14, [r3]
 8000b74:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000b78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000b80:	3304      	adds	r3, #4
 8000b82:	edd3 7a00 	vldr	s15, [r3]
 8000b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b8a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000b8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000b92:	edd3 7a00 	vldr	s15, [r3]
 8000b96:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000b9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ba2:	edd3 7a00 	vldr	s15, [r3]
 8000ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000baa:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000bae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000bb2:	edd3 7a00 	vldr	s15, [r3]
 8000bb6:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8000bba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000bc2:	edd3 7a00 	vldr	s15, [r3]
 8000bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bca:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000bce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000bd2:	3304      	adds	r3, #4
 8000bd4:	edd3 7a00 	vldr	s15, [r3]
 8000bd8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8000bdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000be4:	3304      	adds	r3, #4
 8000be6:	edd3 7a00 	vldr	s15, [r3]
 8000bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bee:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000bf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000bf6:	3304      	adds	r3, #4
 8000bf8:	edd3 7a00 	vldr	s15, [r3]
 8000bfc:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8000c00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000c08:	3304      	adds	r3, #4
 8000c0a:	edd3 7a00 	vldr	s15, [r3]
 8000c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c12:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000c16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000c1a:	ed93 7a00 	vldr	s14, [r3]
 8000c1e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000c22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000c2a:	edd3 7a00 	vldr	s15, [r3]
 8000c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c32:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000c36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000c3a:	ed93 7a00 	vldr	s14, [r3]
 8000c3e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8000c42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000c4a:	edd3 7a00 	vldr	s15, [r3]
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	1d1a      	adds	r2, r3, #4
 8000c52:	603a      	str	r2, [r7, #0]
 8000c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c58:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000c5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000c60:	3304      	adds	r3, #4
 8000c62:	ed93 7a00 	vldr	s14, [r3]
 8000c66:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000c6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000c72:	3304      	adds	r3, #4
 8000c74:	edd3 7a00 	vldr	s15, [r3]
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	1d1a      	adds	r2, r3, #4
 8000c7c:	603a      	str	r2, [r7, #0]
 8000c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c82:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8000c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	ed93 7a00 	vldr	s14, [r3]
 8000c90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c94:	3b04      	subs	r3, #4
 8000c96:	edd3 7a00 	vldr	s15, [r3]
 8000c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c9e:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8000ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	ed93 7a00 	vldr	s14, [r3]
 8000cac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000cb0:	3b04      	subs	r3, #4
 8000cb2:	edd3 7a00 	vldr	s15, [r3]
 8000cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cba:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8000cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000cc2:	ed93 7a00 	vldr	s14, [r3]
 8000cc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000cca:	edd3 7a00 	vldr	s15, [r3]
 8000cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cd2:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8000cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000cda:	ed93 7a00 	vldr	s14, [r3]
 8000cde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ce2:	edd3 7a00 	vldr	s15, [r3]
 8000ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cea:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000cee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000cf2:	ed93 7a00 	vldr	s14, [r3]
 8000cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000cfa:	edd3 7a00 	vldr	s15, [r3]
 8000cfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d02:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d0a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000d12:	ed93 7a00 	vldr	s14, [r3]
 8000d16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000d1a:	edd3 7a00 	vldr	s15, [r3]
 8000d1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000d26:	3b04      	subs	r3, #4
 8000d28:	edd3 7a00 	vldr	s15, [r3]
 8000d2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000d34:	3b04      	subs	r3, #4
 8000d36:	edd3 7a00 	vldr	s15, [r3]
 8000d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d3e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8000d42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000d46:	3b04      	subs	r3, #4
 8000d48:	edd3 7a00 	vldr	s15, [r3]
 8000d4c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8000d50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000d58:	3b04      	subs	r3, #4
 8000d5a:	edd3 7a00 	vldr	s15, [r3]
 8000d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d62:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8000d66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000d6a:	edd3 7a00 	vldr	s15, [r3]
 8000d6e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8000d72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000d7a:	edd3 7a00 	vldr	s15, [r3]
 8000d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d82:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8000d86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000d8a:	ed93 7a00 	vldr	s14, [r3]
 8000d8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000d92:	edd3 7a00 	vldr	s15, [r3]
 8000d96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d9a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000d9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000da2:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8000da6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000daa:	3b04      	subs	r3, #4
 8000dac:	ed93 7a00 	vldr	s14, [r3]
 8000db0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000db4:	3b04      	subs	r3, #4
 8000db6:	edd3 7a00 	vldr	s15, [r3]
 8000dba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dbe:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000dc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dc6:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8000dca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000dce:	ed93 7a00 	vldr	s14, [r3]
 8000dd2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8000dd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000dde:	edd3 7a00 	vldr	s15, [r3]
 8000de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000de6:	1f1a      	subs	r2, r3, #4
 8000de8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df0:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000df4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000df8:	3b04      	subs	r3, #4
 8000dfa:	ed93 7a00 	vldr	s14, [r3]
 8000dfe:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000e02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	edd3 7a00 	vldr	s15, [r3]
 8000e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e14:	1f1a      	subs	r2, r3, #4
 8000e16:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e1e:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8000e22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000e26:	1d1a      	adds	r2, r3, #4
 8000e28:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = *tw2++;
 8000e30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000e34:	1d1a      	adds	r2, r3, #4
 8000e36:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8000e3e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000e42:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e4a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[1] * twI;
 8000e4e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000e52:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e5a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[1] * twR;
 8000e5e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000e62:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e6a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[0] * twI;
 8000e6e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000e72:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e7a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p2++ = m0 + m1;
 8000e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e82:	1d1a      	adds	r2, r3, #4
 8000e84:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000e88:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8000e8c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e94:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8000e98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e9c:	1d1a      	adds	r2, r3, #4
 8000e9e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000ea2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000ea6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eae:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8000eb2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000eb6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ebe:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[2] * twR;
 8000ec2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000ec6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ece:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[2] * twI;
 8000ed2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000ed6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ede:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[3] * twR;
 8000ee2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000ee6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eee:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd2-- = m0 - m1;
 8000ef2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000ef6:	1f1a      	subs	r2, r3, #4
 8000ef8:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8000efc:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8000f00:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f08:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8000f0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f10:	1f1a      	subs	r2, r3, #4
 8000f12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8000f16:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000f1a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f22:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8000f26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw3[1];
 8000f2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f32:	3304      	adds	r3, #4
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw3 += twMod3;
 8000f38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000f40:	4413      	add	r3, r2
 8000f42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      /* Top */
      m0 = t3[0] * twR;
 8000f46:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f4a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f52:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t3[1] * twI;
 8000f56:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f5a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f62:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t3[1] * twR;
 8000f66:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f6a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f72:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t3[0] * twI;
 8000f76:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f7a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f82:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p3++ = m0 + m1;
 8000f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f8a:	1d1a      	adds	r2, r3, #4
 8000f8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000f90:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8000f94:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9c:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8000fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000fa4:	1d1a      	adds	r2, r3, #4
 8000fa6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000faa:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000fae:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fb6:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8000fba:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000fbe:	eef1 7a67 	vneg.f32	s15, s15
 8000fc2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fca:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 =  t3[2] * twI;
 8000fce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000fd2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fda:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 =  t3[2] * twR;
 8000fde:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000fe2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fea:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 =  t3[3] * twI;
 8000fee:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000ff2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ffa:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd3-- = m0 - m1;
 8000ffe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001002:	1f1a      	subs	r2, r3, #4
 8001004:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001008:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800100c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001014:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8001018:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800101c:	1f1a      	subs	r2, r3, #4
 800101e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001022:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001026:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800102a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800102e:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8001032:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw4[1];
 800103a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800103e:	3304      	adds	r3, #4
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw4 += twMod4;
 8001044:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800104c:	4413      	add	r3, r2
 800104e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      /* Top */
      m0 = t4[0] * twR;
 8001052:	edd7 7a03 	vldr	s15, [r7, #12]
 8001056:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800105a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[1] * twI;
 8001062:	edd7 7a04 	vldr	s15, [r7, #16]
 8001066:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800106a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800106e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[1] * twR;
 8001072:	edd7 7a04 	vldr	s15, [r7, #16]
 8001076:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800107a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[0] * twI;
 8001082:	edd7 7a03 	vldr	s15, [r7, #12]
 8001086:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800108a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p4++ = m0 + m1;
 8001092:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001096:	1d1a      	adds	r2, r3, #4
 8001098:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800109c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80010a0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80010a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a8:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 80010ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010b0:	1d1a      	adds	r2, r3, #4
 80010b2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80010b6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80010ba:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80010be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c2:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 80010c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80010ca:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80010ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[2] * twR;
 80010d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80010da:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80010de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e2:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[2] * twI;
 80010e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ea:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80010ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[3] * twR;
 80010f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80010fa:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80010fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001102:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd4-- = m0 - m1;
 8001106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800110a:	1f1a      	subs	r2, r3, #4
 800110c:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001110:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001114:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800111c:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8001120:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001124:	1f1a      	subs	r2, r3, #4
 8001126:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800112a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800112e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001136:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 800113a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800113e:	3b01      	subs	r3, #1
 8001140:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001144:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001148:	2b00      	cmp	r3, #0
 800114a:	f47f acde 	bne.w	8000b0a <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	ed93 7a00 	vldr	s14, [r3]
 8001154:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001160:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	ed93 7a00 	vldr	s14, [r3]
 800116a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001176:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	3304      	adds	r3, #4
 800117e:	ed93 7a00 	vldr	s14, [r3]
 8001182:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001186:	3304      	adds	r3, #4
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	3304      	adds	r3, #4
 8001198:	ed93 7a00 	vldr	s14, [r3]
 800119c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011a0:	3304      	adds	r3, #4
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011aa:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80011ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80011b2:	3304      	adds	r3, #4
 80011b4:	ed93 7a00 	vldr	s14, [r3]
 80011b8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80011bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80011c4:	3304      	adds	r3, #4
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ce:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80011d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80011d6:	edd3 7a00 	vldr	s15, [r3]
 80011da:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80011de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ee:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80011f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80011fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001202:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001206:	edd3 7a00 	vldr	s15, [r3]
 800120a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120e:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001212:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001216:	3304      	adds	r3, #4
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001220:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001224:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001228:	3304      	adds	r3, #4
 800122a:	edd3 7a00 	vldr	s15, [r3]
 800122e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001232:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001236:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800123a:	3304      	adds	r3, #4
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001244:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001248:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800124c:	3304      	adds	r3, #4
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001256:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800125a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800125e:	ed93 7a00 	vldr	s14, [r3]
 8001262:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001266:	ee37 7a27 	vadd.f32	s14, s14, s15
 800126a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800126e:	edd3 7a00 	vldr	s15, [r3]
 8001272:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001276:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800127a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800127e:	ed93 7a00 	vldr	s14, [r3]
 8001282:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001286:	ee37 7a27 	vadd.f32	s14, s14, s15
 800128a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	1d1a      	adds	r2, r3, #4
 8001296:	603a      	str	r2, [r7, #0]
 8001298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80012a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012a4:	3304      	adds	r3, #4
 80012a6:	ed93 7a00 	vldr	s14, [r3]
 80012aa:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80012ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80012b6:	3304      	adds	r3, #4
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	1d1a      	adds	r2, r3, #4
 80012c0:	603a      	str	r2, [r7, #0]
 80012c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c6:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 80012ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw2[1];
 80012d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80012d6:	3304      	adds	r3, #4
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t2[0] * twR;
 80012dc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80012e0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t2[1] * twI;
 80012ec:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80012f0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80012f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t2[1] * twR;
 80012fc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001300:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001308:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t2[0] * twI;
 800130c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001310:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001318:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p2++ = m0 + m1;
 800131c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001320:	1d1a      	adds	r2, r3, #4
 8001322:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001326:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800132a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800132e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001332:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8001336:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800133a:	1d1a      	adds	r2, r3, #4
 800133c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001340:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001344:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134c:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8001350:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw3[1];
 8001358:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800135c:	3304      	adds	r3, #4
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t3[0] * twR;
 8001362:	edd7 7a07 	vldr	s15, [r7, #28]
 8001366:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800136a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t3[1] * twI;
 8001372:	edd7 7a08 	vldr	s15, [r7, #32]
 8001376:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800137a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t3[1] * twR;
 8001382:	edd7 7a08 	vldr	s15, [r7, #32]
 8001386:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800138a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t3[0] * twI;
 8001392:	edd7 7a07 	vldr	s15, [r7, #28]
 8001396:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800139a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p3++ = m0 + m1;
 80013a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013a6:	1d1a      	adds	r2, r3, #4
 80013a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80013ac:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80013b0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 80013bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013c0:	1d1a      	adds	r2, r3, #4
 80013c2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80013c6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80013ca:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80013ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d2:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 80013d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw4[1];
 80013de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80013e2:	3304      	adds	r3, #4
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t4[0] * twR;
 80013e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ec:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80013f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t4[1] * twI;
 80013f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80013fc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001404:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t4[1] * twR;
 8001408:	edd7 7a04 	vldr	s15, [r7, #16]
 800140c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001414:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t4[0] * twI;
 8001418:	edd7 7a03 	vldr	s15, [r7, #12]
 800141c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001424:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p4++ = m0 + m1;
 8001428:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800142c:	1d1a      	adds	r2, r3, #4
 800142e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001432:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001436:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800143a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143e:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8001442:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001446:	1d1a      	adds	r2, r3, #4
 8001448:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800144c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001450:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001458:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 800145c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001460:	b299      	uxth	r1, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	2304      	movs	r3, #4
 8001468:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800146a:	f000 f8d9 	bl	8001620 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 800146e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001472:	b299      	uxth	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	2304      	movs	r3, #4
 800147a:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800147c:	f000 f8d0 	bl	8001620 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8001480:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001484:	b299      	uxth	r1, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	2304      	movs	r3, #4
 800148c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800148e:	f000 f8c7 	bl	8001620 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8001492:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001496:	b299      	uxth	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	2304      	movs	r3, #4
 800149e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80014a0:	f000 f8be 	bl	8001620 <arm_radix8_butterfly_f32>
}
 80014a4:	bf00      	nop
 80014a6:	37b0      	adds	r7, #176	@ 0xb0
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	4611      	mov	r1, r2
 80014b8:	461a      	mov	r2, r3
 80014ba:	460b      	mov	r3, r1
 80014bc:	71fb      	strb	r3, [r7, #7]
 80014be:	4613      	mov	r3, r2
 80014c0:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d117      	bne.n	80014fe <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	3304      	adds	r3, #4
 80014d2:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
 80014d8:	e00d      	b.n	80014f6 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	eef1 7a67 	vneg.f32	s15, s15
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	3308      	adds	r3, #8
 80014ee:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	3301      	adds	r3, #1
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	69fa      	ldr	r2, [r7, #28]
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d3ed      	bcc.n	80014da <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001504:	d040      	beq.n	8001588 <arm_cfft_f32+0xdc>
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800150c:	d845      	bhi.n	800159a <arm_cfft_f32+0xee>
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001514:	d033      	beq.n	800157e <arm_cfft_f32+0xd2>
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800151c:	d83d      	bhi.n	800159a <arm_cfft_f32+0xee>
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001524:	d026      	beq.n	8001574 <arm_cfft_f32+0xc8>
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800152c:	d835      	bhi.n	800159a <arm_cfft_f32+0xee>
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001534:	d028      	beq.n	8001588 <arm_cfft_f32+0xdc>
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800153c:	d82d      	bhi.n	800159a <arm_cfft_f32+0xee>
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001544:	d01b      	beq.n	800157e <arm_cfft_f32+0xd2>
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800154c:	d825      	bhi.n	800159a <arm_cfft_f32+0xee>
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b80      	cmp	r3, #128	@ 0x80
 8001552:	d00f      	beq.n	8001574 <arm_cfft_f32+0xc8>
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2b80      	cmp	r3, #128	@ 0x80
 8001558:	d81f      	bhi.n	800159a <arm_cfft_f32+0xee>
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	2b40      	cmp	r3, #64	@ 0x40
 800155e:	d013      	beq.n	8001588 <arm_cfft_f32+0xdc>
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2b40      	cmp	r3, #64	@ 0x40
 8001564:	d819      	bhi.n	800159a <arm_cfft_f32+0xee>
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2b10      	cmp	r3, #16
 800156a:	d003      	beq.n	8001574 <arm_cfft_f32+0xc8>
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2b20      	cmp	r3, #32
 8001570:	d005      	beq.n	800157e <arm_cfft_f32+0xd2>
 8001572:	e012      	b.n	800159a <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f7fe ff74 	bl	8000464 <arm_cfft_radix8by2_f32>
    break;
 800157c:	e00d      	b.n	800159a <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800157e:	68b9      	ldr	r1, [r7, #8]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7ff f963 	bl	800084c <arm_cfft_radix8by4_f32>
    break;
 8001586:	e008      	b.n	800159a <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	b299      	uxth	r1, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	2301      	movs	r3, #1
 8001592:	68b8      	ldr	r0, [r7, #8]
 8001594:	f000 f844 	bl	8001620 <arm_radix8_butterfly_f32>
    break;
 8001598:	bf00      	nop
  }

  if ( bitReverseFlag )
 800159a:	79bb      	ldrb	r3, [r7, #6]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d007      	beq.n	80015b0 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8999      	ldrh	r1, [r3, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	461a      	mov	r2, r3
 80015aa:	68b8      	ldr	r0, [r7, #8]
 80015ac:	f009 fd56 	bl	800b05c <arm_bitreversal_32>

  if (ifftFlag == 1U)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d130      	bne.n	8001618 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	ee07 3a90 	vmov	s15, r3
 80015bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c8:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	e01c      	b.n	8001610 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	1d1a      	adds	r2, r3, #4
 80015da:	61ba      	str	r2, [r7, #24]
 80015dc:	ed93 7a00 	vldr	s14, [r3]
 80015e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e8:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	edd3 7a00 	vldr	s15, [r3]
 80015f2:	eeb1 7a67 	vneg.f32	s14, s15
 80015f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80015fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	3304      	adds	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3301      	adds	r3, #1
 800160e:	61fb      	str	r3, [r7, #28]
 8001610:	69fa      	ldr	r2, [r7, #28]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	429a      	cmp	r2, r3
 8001616:	d3de      	bcc.n	80015d6 <arm_cfft_f32+0x12a>
    }
  }
}
 8001618:	bf00      	nop
 800161a:	3720      	adds	r7, #32
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8001620:	b480      	push	{r7}
 8001622:	b0bd      	sub	sp, #244	@ 0xf4
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	461a      	mov	r2, r3
 800162c:	460b      	mov	r3, r1
 800162e:	817b      	strh	r3, [r7, #10]
 8001630:	4613      	mov	r3, r2
 8001632:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8001634:	4b09      	ldr	r3, [pc, #36]	@ (800165c <arm_radix8_butterfly_f32+0x3c>)
 8001636:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

   n2 = fftLen;
 800163a:	897b      	ldrh	r3, [r7, #10]
 800163c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

   do
   {
      n1 = n2;
 8001640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001644:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      n2 = n2 >> 3;
 8001648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800164c:	08db      	lsrs	r3, r3, #3
 800164e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      i1 = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001658:	e002      	b.n	8001660 <arm_radix8_butterfly_f32+0x40>
 800165a:	bf00      	nop
 800165c:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8001660:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8001664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001668:	4413      	add	r3, r2
 800166a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         i3 = i2 + n2;
 800166e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001676:	4413      	add	r3, r2
 8001678:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
         i4 = i3 + n2;
 800167c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001684:	4413      	add	r3, r2
 8001686:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         i5 = i4 + n2;
 800168a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800168e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001692:	4413      	add	r3, r2
 8001694:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
         i6 = i5 + n2;
 8001698:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800169c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016a0:	4413      	add	r3, r2
 80016a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         i7 = i6 + n2;
 80016a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80016aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016ae:	4413      	add	r3, r2
 80016b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
         i8 = i7 + n2;
 80016b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80016b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016bc:	4413      	add	r3, r2
 80016be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80016c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	ed93 7a00 	vldr	s14, [r3]
 80016d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4413      	add	r3, r2
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e2:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80016e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	ed93 7a00 	vldr	s14, [r3]
 80016f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4413      	add	r3, r2
 80016fe:	edd3 7a00 	vldr	s15, [r3]
 8001702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001706:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800170a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	ed93 7a00 	vldr	s14, [r3]
 8001718:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	4413      	add	r3, r2
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172a:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800172e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	ed93 7a00 	vldr	s14, [r3]
 800173c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	4413      	add	r3, r2
 8001746:	edd3 7a00 	vldr	s15, [r3]
 800174a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174e:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8001752:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	ed93 7a00 	vldr	s14, [r3]
 8001760:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	4413      	add	r3, r2
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001772:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8001776:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	ed93 7a00 	vldr	s14, [r3]
 8001784:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	4413      	add	r3, r2
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001796:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800179a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	ed93 7a00 	vldr	s14, [r3]
 80017a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4413      	add	r3, r2
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ba:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80017be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	ed93 7a00 	vldr	s14, [r3]
 80017cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	4413      	add	r3, r2
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017de:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         t1 = r1 - r3;
 80017e2:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80017e6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80017ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ee:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r1 = r1 + r3;
 80017f2:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80017f6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80017fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fe:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r3 = r2 - r4;
 8001802:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8001806:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800180a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800180e:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r2 = r2 + r4;
 8001812:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8001816:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800181a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800181e:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1] = r1 + r2;
 8001822:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8001830:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001838:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800183c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4413      	add	r3, r2
 8001846:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800184a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800184e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001852:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8001856:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	3304      	adds	r3, #4
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4413      	add	r3, r2
 8001862:	ed93 7a00 	vldr	s14, [r3]
 8001866:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	3304      	adds	r3, #4
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4413      	add	r3, r2
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187a:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800187e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	3304      	adds	r3, #4
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4413      	add	r3, r2
 800188a:	ed93 7a00 	vldr	s14, [r3]
 800188e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	3304      	adds	r3, #4
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4413      	add	r3, r2
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a2:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80018a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	3304      	adds	r3, #4
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4413      	add	r3, r2
 80018b2:	ed93 7a00 	vldr	s14, [r3]
 80018b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	3304      	adds	r3, #4
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	edd3 7a00 	vldr	s15, [r3]
 80018c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ca:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80018ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	3304      	adds	r3, #4
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4413      	add	r3, r2
 80018da:	ed93 7a00 	vldr	s14, [r3]
 80018de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	3304      	adds	r3, #4
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4413      	add	r3, r2
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f2:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80018f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	3304      	adds	r3, #4
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	4413      	add	r3, r2
 8001902:	ed93 7a00 	vldr	s14, [r3]
 8001906:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	3304      	adds	r3, #4
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4413      	add	r3, r2
 8001912:	edd3 7a00 	vldr	s15, [r3]
 8001916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191a:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800191e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	3304      	adds	r3, #4
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4413      	add	r3, r2
 800192a:	ed93 7a00 	vldr	s14, [r3]
 800192e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	3304      	adds	r3, #4
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4413      	add	r3, r2
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001942:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8001946:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	3304      	adds	r3, #4
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4413      	add	r3, r2
 8001952:	ed93 7a00 	vldr	s14, [r3]
 8001956:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	3304      	adds	r3, #4
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4413      	add	r3, r2
 8001962:	edd3 7a00 	vldr	s15, [r3]
 8001966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800196a:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800196e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	3304      	adds	r3, #4
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	4413      	add	r3, r2
 800197a:	ed93 7a00 	vldr	s14, [r3]
 800197e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	3304      	adds	r3, #4
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4413      	add	r3, r2
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001992:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         t2 = r1 - s3;
 8001996:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800199a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800199e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a2:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         r1 = r1 + s3;
 80019a6:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80019aa:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80019ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b2:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s3 = r2 - r4;
 80019b6:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80019ba:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80019be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c2:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         r2 = r2 + r4;
 80019c6:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80019ca:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80019ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d2:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80019d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	3304      	adds	r3, #4
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4413      	add	r3, r2
 80019e2:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80019e6:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80019ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ee:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80019f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	3304      	adds	r3, #4
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	4413      	add	r3, r2
 80019fe:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8001a02:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a0a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8001a0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8001a1c:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a24:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8001a28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4413      	add	r3, r2
 8001a32:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8001a36:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8001a42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	3304      	adds	r3, #4
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001a52:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8001a56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8001a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	3304      	adds	r3, #4
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4413      	add	r3, r2
 8001a6a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001a6e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8001a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a76:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8001a7a:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8001a7e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a86:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8001a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8e:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r6 = (r6 + r8) * C81;
 8001a92:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8001a96:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9e:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8001aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa6:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r2 = (s6 - s8) * C81;
 8001aaa:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8001aae:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab6:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8001aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abe:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = (s6 + s8) * C81;
 8001ac2:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8001ac6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ace:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8001ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad6:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         t1 = r5 - r1;
 8001ada:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8001ade:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae6:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r5 = r5 + r1;
 8001aea:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8001aee:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af6:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r8 = r7 - r6;
 8001afa:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8001afe:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8001b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b06:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         r7 = r7 + r6;
 8001b0a:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8001b0e:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8001b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b16:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         t2 = s5 - r2;
 8001b1a:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8001b1e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b26:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         s5 = s5 + r2;
 8001b2a:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8001b2e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b36:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         s8 = s7 - s6;
 8001b3a:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8001b3e:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b46:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         s7 = s7 + s6;
 8001b4a:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8001b4e:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b56:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         pSrc[2 * i2]     = r5 + s7;
 8001b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8001b68:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b70:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8001b74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8001b82:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b8a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8001b8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8001b9c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8001ba8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8001bb6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bbe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8001bc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	3304      	adds	r3, #4
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	4413      	add	r3, r2
 8001bce:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8001bd2:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bda:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8001bde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	3304      	adds	r3, #4
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4413      	add	r3, r2
 8001bea:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8001bee:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8001bfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	3304      	adds	r3, #4
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	4413      	add	r3, r2
 8001c06:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001c0a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c12:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8001c16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4413      	add	r3, r2
 8001c22:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001c26:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2e:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8001c32:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8001c36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      } while (i1 < fftLen);
 8001c40:	897b      	ldrh	r3, [r7, #10]
 8001c42:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8001c46:	429a      	cmp	r2, r3
 8001c48:	f4ff ad0a 	bcc.w	8001660 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8001c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c50:	2b07      	cmp	r3, #7
 8001c52:	f240 84e3 	bls.w	800261c <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
      j = 1;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8001c62:	893b      	ldrh	r3, [r7, #8]
 8001c64:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001c68:	4413      	add	r3, r2
 8001c6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
         ia1 = id;
 8001c6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
         ia2 = ia1 + id;
 8001c72:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001c76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c78:	4413      	add	r3, r2
 8001c7a:	67bb      	str	r3, [r7, #120]	@ 0x78
         ia3 = ia2 + id;
 8001c7c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001c7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c80:	4413      	add	r3, r2
 8001c82:	677b      	str	r3, [r7, #116]	@ 0x74
         ia4 = ia3 + id;
 8001c84:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001c86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c88:	4413      	add	r3, r2
 8001c8a:	673b      	str	r3, [r7, #112]	@ 0x70
         ia5 = ia4 + id;
 8001c8c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001c8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c90:	4413      	add	r3, r2
 8001c92:	66fb      	str	r3, [r7, #108]	@ 0x6c
         ia6 = ia5 + id;
 8001c94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001c96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c98:	4413      	add	r3, r2
 8001c9a:	66bb      	str	r3, [r7, #104]	@ 0x68
         ia7 = ia6 + id;
 8001c9c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001c9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ca0:	4413      	add	r3, r2
 8001ca2:	667b      	str	r3, [r7, #100]	@ 0x64

         co2 = pCoef[2 * ia1];
 8001ca4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	663b      	str	r3, [r7, #96]	@ 0x60
         co3 = pCoef[2 * ia2];
 8001cb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
         co4 = pCoef[2 * ia3];
 8001cbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	65bb      	str	r3, [r7, #88]	@ 0x58
         co5 = pCoef[2 * ia4];
 8001cca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	657b      	str	r3, [r7, #84]	@ 0x54
         co6 = pCoef[2 * ia5];
 8001cd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	653b      	str	r3, [r7, #80]	@ 0x50
         co7 = pCoef[2 * ia6];
 8001ce2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
         co8 = pCoef[2 * ia7];
 8001cee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
         si2 = pCoef[2 * ia1 + 1];
 8001cfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	3304      	adds	r3, #4
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	647b      	str	r3, [r7, #68]	@ 0x44
         si3 = pCoef[2 * ia2 + 1];
 8001d0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	3304      	adds	r3, #4
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	643b      	str	r3, [r7, #64]	@ 0x40
         si4 = pCoef[2 * ia3 + 1];
 8001d18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8001d26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	63bb      	str	r3, [r7, #56]	@ 0x38
         si6 = pCoef[2 * ia5 + 1];
 8001d34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	3304      	adds	r3, #4
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	637b      	str	r3, [r7, #52]	@ 0x34
         si7 = pCoef[2 * ia6 + 1];
 8001d42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	3304      	adds	r3, #4
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	633b      	str	r3, [r7, #48]	@ 0x30
         si8 = pCoef[2 * ia7 + 1];
 8001d50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	3304      	adds	r3, #4
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

         i1 = j;
 8001d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8001d66:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8001d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d6e:	4413      	add	r3, r2
 8001d70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            i3 = i2 + n2;
 8001d74:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            i4 = i3 + n2;
 8001d82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            i5 = i4 + n2;
 8001d90:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d98:	4413      	add	r3, r2
 8001d9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            i6 = i5 + n2;
 8001d9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001da6:	4413      	add	r3, r2
 8001da8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            i7 = i6 + n2;
 8001dac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001db4:	4413      	add	r3, r2
 8001db6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            i8 = i7 + n2;
 8001dba:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001dc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	ed93 7a00 	vldr	s14, [r3]
 8001dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de8:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8001dec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4413      	add	r3, r2
 8001df6:	ed93 7a00 	vldr	s14, [r3]
 8001dfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e0c:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8001e10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4413      	add	r3, r2
 8001e1a:	ed93 7a00 	vldr	s14, [r3]
 8001e1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e30:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8001e34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	ed93 7a00 	vldr	s14, [r3]
 8001e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	edd3 7a00 	vldr	s15, [r3]
 8001e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e54:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8001e58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	4413      	add	r3, r2
 8001e62:	ed93 7a00 	vldr	s14, [r3]
 8001e66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e78:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8001e7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4413      	add	r3, r2
 8001e86:	ed93 7a00 	vldr	s14, [r3]
 8001e8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e9c:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8001ea0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	ed93 7a00 	vldr	s14, [r3]
 8001eae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	edd3 7a00 	vldr	s15, [r3]
 8001ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec0:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8001ec4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4413      	add	r3, r2
 8001ece:	ed93 7a00 	vldr	s14, [r3]
 8001ed2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4413      	add	r3, r2
 8001edc:	edd3 7a00 	vldr	s15, [r3]
 8001ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee4:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            t1 = r1 - r3;
 8001ee8:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8001eec:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8001ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef4:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r1 = r1 + r3;
 8001ef8:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8001efc:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8001f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f04:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r3 = r2 - r4;
 8001f08:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8001f0c:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8001f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f14:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r2 = r2 + r4;
 8001f18:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8001f1c:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8001f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f24:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            pSrc[2 * i1] = r1 + r2;
 8001f28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4413      	add	r3, r2
 8001f32:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8001f36:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f3e:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8001f42:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8001f46:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001f4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f4e:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8001f52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	3304      	adds	r3, #4
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	ed93 7a00 	vldr	s14, [r3]
 8001f62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	3304      	adds	r3, #4
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	edd3 7a00 	vldr	s15, [r3]
 8001f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f76:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8001f7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	3304      	adds	r3, #4
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4413      	add	r3, r2
 8001f86:	ed93 7a00 	vldr	s14, [r3]
 8001f8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	3304      	adds	r3, #4
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4413      	add	r3, r2
 8001f96:	edd3 7a00 	vldr	s15, [r3]
 8001f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9e:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8001fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	3304      	adds	r3, #4
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4413      	add	r3, r2
 8001fae:	ed93 7a00 	vldr	s14, [r3]
 8001fb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	3304      	adds	r3, #4
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	edd3 7a00 	vldr	s15, [r3]
 8001fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8001fca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	ed93 7a00 	vldr	s14, [r3]
 8001fda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	edd3 7a00 	vldr	s15, [r3]
 8001fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fee:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001ff2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	ed93 7a00 	vldr	s14, [r3]
 8002002:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	3304      	adds	r3, #4
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4413      	add	r3, r2
 800200e:	edd3 7a00 	vldr	s15, [r3]
 8002012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002016:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800201a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	3304      	adds	r3, #4
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4413      	add	r3, r2
 8002026:	ed93 7a00 	vldr	s14, [r3]
 800202a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	3304      	adds	r3, #4
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4413      	add	r3, r2
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800203e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002042:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	3304      	adds	r3, #4
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4413      	add	r3, r2
 800204e:	ed93 7a00 	vldr	s14, [r3]
 8002052:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	3304      	adds	r3, #4
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4413      	add	r3, r2
 800205e:	edd3 7a00 	vldr	s15, [r3]
 8002062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002066:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800206a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	3304      	adds	r3, #4
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4413      	add	r3, r2
 8002076:	ed93 7a00 	vldr	s14, [r3]
 800207a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	3304      	adds	r3, #4
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4413      	add	r3, r2
 8002086:	edd3 7a00 	vldr	s15, [r3]
 800208a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800208e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            t2 = s1 - s3;
 8002092:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002096:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800209a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s1 = s1 + s3;
 80020a2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80020a6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80020aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ae:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s3 = s2 - s4;
 80020b2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80020b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80020ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020be:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s2 = s2 + s4;
 80020c2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80020c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80020ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ce:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            r1 = t1 + s3;
 80020d2:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80020d6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80020da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020de:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            t1 = t1 - s3;
 80020e2:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80020e6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80020ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ee:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 80020f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	3304      	adds	r3, #4
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4413      	add	r3, r2
 80020fe:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002102:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800210a:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800210e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002112:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002116:	ee77 7a67 	vsub.f32	s15, s14, s15
 800211a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s1 = t2 - r3;
 800211e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002122:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800212a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            t2 = t2 + r3;
 800212e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002132:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800213a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co5 * r2;
 800213e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002142:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800214e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002152:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800215e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002162:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800216a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800216e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002172:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800217a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800217e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4413      	add	r3, r2
 8002188:	ed97 7a07 	vldr	s14, [r7, #28]
 800218c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002194:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8002198:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	3304      	adds	r3, #4
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4413      	add	r3, r2
 80021a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80021a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80021ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021b0:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 80021b4:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80021b8:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80021bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 80021c4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80021c8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80021cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 80021d4:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80021d8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80021dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 80021e4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80021e8:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80021ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 80021f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4413      	add	r3, r2
 80021fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8002202:	edd7 7a06 	vldr	s15, [r7, #24]
 8002206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800220e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	3304      	adds	r3, #4
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4413      	add	r3, r2
 800221a:	ed97 7a05 	vldr	s14, [r7, #20]
 800221e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002226:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800222a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800222e:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002236:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800223a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800223e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8002242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002246:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800224a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800224e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8002252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002256:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800225a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800225e:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002266:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800226a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	ed97 7a07 	vldr	s14, [r7, #28]
 8002278:	edd7 7a06 	vldr	s15, [r7, #24]
 800227c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002280:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8002284:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	3304      	adds	r3, #4
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	ed97 7a05 	vldr	s14, [r7, #20]
 8002294:	edd7 7a04 	vldr	s15, [r7, #16]
 8002298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800229c:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 80022a0:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80022a4:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80022a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ac:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80022b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b4:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r6 = (r6 + r8) * C81;
 80022b8:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80022bc:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80022c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c4:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80022c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022cc:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            s1 = (s6 - s8) * C81;
 80022d0:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80022d4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80022d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022dc:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80022e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s6 = (s6 + s8) * C81;
 80022e8:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80022ec:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80022f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f4:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80022f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fc:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t1 = r5 - r1;
 8002300:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8002304:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8002308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800230c:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r5 = r5 + r1;
 8002310:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8002314:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8002318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800231c:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r8 = r7 - r6;
 8002320:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8002324:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8002328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800232c:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            r7 = r7 + r6;
 8002330:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8002334:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8002338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233c:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            t2 = s5 - s1;
 8002340:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002344:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800234c:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s5 = s5 + s1;
 8002350:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002354:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800235c:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s8 = s7 - s6;
 8002360:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8002364:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800236c:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            s7 = s7 + s6;
 8002370:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8002374:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237c:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            r1 = r5 + s7;
 8002380:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8002384:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8002388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238c:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = r5 - s7;
 8002390:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8002394:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8002398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800239c:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r6 = t1 + s8;
 80023a0:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80023a4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80023a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ac:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            t1 = t1 - s8;
 80023b0:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80023b4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80023b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023bc:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            s1 = s5 - r7;
 80023c0:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80023c4:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80023c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023cc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = s5 + r7;
 80023d0:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80023d4:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80023d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023dc:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s6 = t2 - r8;
 80023e0:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80023e4:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80023e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ec:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t2 = t2 + r8;
 80023f0:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80023f4:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80023f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fc:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co2 * r1;
 8002400:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002404:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8002408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8002410:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002414:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8002420:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002424:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8002430:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002434:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8002438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8002440:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4413      	add	r3, r2
 800244a:	ed97 7a07 	vldr	s14, [r7, #28]
 800244e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002456:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800245a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	3304      	adds	r3, #4
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4413      	add	r3, r2
 8002466:	ed97 7a05 	vldr	s14, [r7, #20]
 800246a:	edd7 7a04 	vldr	s15, [r7, #16]
 800246e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002472:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8002476:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800247a:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800247e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002482:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8002486:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800248a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800248e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002492:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8002496:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800249a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800249e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a2:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 80024a6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80024aa:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80024ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 80024b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80024c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80024c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024cc:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 80024d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	3304      	adds	r3, #4
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80024e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80024e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024e8:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 80024ec:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80024f0:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80024f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 80024fc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002500:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002508:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800250c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002510:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002518:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800251c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002520:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8002524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002528:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800252c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4413      	add	r3, r2
 8002536:	ed97 7a07 	vldr	s14, [r7, #28]
 800253a:	edd7 7a06 	vldr	s15, [r7, #24]
 800253e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002542:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8002546:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	3304      	adds	r3, #4
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4413      	add	r3, r2
 8002552:	ed97 7a05 	vldr	s14, [r7, #20]
 8002556:	edd7 7a04 	vldr	s15, [r7, #16]
 800255a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800255e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8002562:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002566:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800256a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8002572:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002576:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800257a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8002582:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002586:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800258a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8002592:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002596:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800259a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 80025a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4413      	add	r3, r2
 80025ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80025b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80025b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 80025bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	3304      	adds	r3, #4
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80025cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80025d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d4:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 80025d8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80025dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80025e0:	4413      	add	r3, r2
 80025e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
         } while (i1 < fftLen);
 80025e6:	897b      	ldrh	r3, [r7, #10]
 80025e8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80025ec:	429a      	cmp	r2, r3
 80025ee:	f4ff abba 	bcc.w	8001d66 <arm_radix8_butterfly_f32+0x746>

         j++;
 80025f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025f6:	3301      	adds	r3, #1
 80025f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      } while (j < n2);
 80025fc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002604:	429a      	cmp	r2, r3
 8002606:	f4ff ab2c 	bcc.w	8001c62 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800260a:	893b      	ldrh	r3, [r7, #8]
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8002610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002614:	2b07      	cmp	r3, #7
 8002616:	f63f a813 	bhi.w	8001640 <arm_radix8_butterfly_f32+0x20>
}
 800261a:	e000      	b.n	800261e <arm_radix8_butterfly_f32+0xffe>
         break;
 800261c:	bf00      	nop
}
 800261e:	bf00      	nop
 8002620:	37f4      	adds	r7, #244	@ 0xf4
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop

0800262c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800262c:	b5b0      	push	{r4, r5, r7, lr}
 800262e:	b096      	sub	sp, #88	@ 0x58
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t UserTxBuffer[] = "WaveShare Open7XXI-C Board STM32 Virtual COM Port Driver \r\n";
 8002632:	4b3f      	ldr	r3, [pc, #252]	@ (8002730 <main+0x104>)
 8002634:	f107 040c 	add.w	r4, r7, #12
 8002638:	461d      	mov	r5, r3
 800263a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800263c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800263e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002646:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800264a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	arm_status status;
	float32_t maxValue;
	uint8_t raw_bytes[4];

	status = ARM_MATH_SUCCESS;
 800264e:	2300      	movs	r3, #0
 8002650:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8002654:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002658:	64bb      	str	r3, [r7, #72]	@ 0x48
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800265a:	f000 f98d 	bl	8002978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800265e:	f000 f87b 	bl	8002758 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8002662:	4b34      	ldr	r3, [pc, #208]	@ (8002734 <main+0x108>)
 8002664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002668:	4a32      	ldr	r2, [pc, #200]	@ (8002734 <main+0x108>)
 800266a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800266e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002672:	4b30      	ldr	r3, [pc, #192]	@ (8002734 <main+0x108>)
 8002674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267c:	603b      	str	r3, [r7, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8002680:	2000      	movs	r0, #0
 8002682:	f000 fcfb 	bl	800307c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8002686:	2100      	movs	r1, #0
 8002688:	2000      	movs	r0, #0
 800268a:	f000 fd11 	bl	80030b0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800268e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002692:	64bb      	str	r3, [r7, #72]	@ 0x48
  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  //MX_DSIHOST_DSI_Init();
  //MX_LTDC_Init();
  //MX_SAI1_Init();
  MX_USB_DEVICE_Init();
 8002694:	f007 ff50 	bl	800a538 <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  for(int i = 0; i < TEST_LENGTH_SAMPLES/2; i++)
 8002698:	2300      	movs	r3, #0
 800269a:	657b      	str	r3, [r7, #84]	@ 0x54
 800269c:	e009      	b.n	80026b2 <main+0x86>
	  {
	    testOutput[i] = 0.0;
 800269e:	4a26      	ldr	r2, [pc, #152]	@ (8002738 <main+0x10c>)
 80026a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < TEST_LENGTH_SAMPLES/2; i++)
 80026ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ae:	3301      	adds	r3, #1
 80026b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80026b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026b8:	dbf1      	blt.n	800269e <main+0x72>
	  }


	  /* Process the data through the CFFT/CIFFT module */
	  arm_cfft_f32(&arm_cfft_sR_f32_len1024, testInput_f32_10khz, ifftFlag, doBitReverse);
 80026ba:	4b20      	ldr	r3, [pc, #128]	@ (800273c <main+0x110>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002740 <main+0x114>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	491f      	ldr	r1, [pc, #124]	@ (8002744 <main+0x118>)
 80026c8:	481f      	ldr	r0, [pc, #124]	@ (8002748 <main+0x11c>)
 80026ca:	f7fe feef 	bl	80014ac <arm_cfft_f32>
	  /* Process the data through the Complex Magnitude Module for
	   calculating the magnitude at each bin */
	  arm_cmplx_mag_f32(testInput_f32_10khz, testOutput, fftSize);
 80026ce:	4b1f      	ldr	r3, [pc, #124]	@ (800274c <main+0x120>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	4918      	ldr	r1, [pc, #96]	@ (8002738 <main+0x10c>)
 80026d6:	481b      	ldr	r0, [pc, #108]	@ (8002744 <main+0x118>)
 80026d8:	f008 fce8 	bl	800b0ac <arm_cmplx_mag_f32>
	  /* Calculates maxValue and returns corresponding BIN value */
	  arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
 80026dc:	4b1b      	ldr	r3, [pc, #108]	@ (800274c <main+0x120>)
 80026de:	6819      	ldr	r1, [r3, #0]
 80026e0:	f107 0208 	add.w	r2, r7, #8
 80026e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <main+0x124>)
 80026e6:	4814      	ldr	r0, [pc, #80]	@ (8002738 <main+0x10c>)
 80026e8:	f008 fc50 	bl	800af8c <arm_max_f32>

	  //USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t*)&UserTxBuffer, sizeof(UserTxBuffer));
	  //USBD_CDC_TransmitPacket(&hUsbDeviceFS);
	  for(int i = 0; i < TEST_LENGTH_SAMPLES/2; i++)
 80026ec:	2300      	movs	r3, #0
 80026ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80026f0:	e014      	b.n	800271c <main+0xf0>
	  {
	    memcpy(raw_bytes, &testOutput[i], sizeof(float32_t));
 80026f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4a10      	ldr	r2, [pc, #64]	@ (8002738 <main+0x10c>)
 80026f8:	4413      	add	r3, r2
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	607b      	str	r3, [r7, #4]
	  	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t*)&raw_bytes, sizeof(raw_bytes));
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	2204      	movs	r2, #4
 8002702:	4619      	mov	r1, r3
 8002704:	4813      	ldr	r0, [pc, #76]	@ (8002754 <main+0x128>)
 8002706:	f006 fb35 	bl	8008d74 <USBD_CDC_SetTxBuffer>
	  	USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800270a:	4812      	ldr	r0, [pc, #72]	@ (8002754 <main+0x128>)
 800270c:	f006 fb72 	bl	8008df4 <USBD_CDC_TransmitPacket>
	  	HAL_Delay(100);
 8002710:	2064      	movs	r0, #100	@ 0x64
 8002712:	f000 f9c3 	bl	8002a9c <HAL_Delay>
	  for(int i = 0; i < TEST_LENGTH_SAMPLES/2; i++)
 8002716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002718:	3301      	adds	r3, #1
 800271a:	653b      	str	r3, [r7, #80]	@ 0x50
 800271c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800271e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002722:	dbe6      	blt.n	80026f2 <main+0xc6>
	  }

	  HAL_Delay(1000);
 8002724:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002728:	f000 f9b8 	bl	8002a9c <HAL_Delay>

	  while (1);
 800272c:	bf00      	nop
 800272e:	e7fd      	b.n	800272c <main+0x100>
 8002730:	0800b3b4 	.word	0x0800b3b4
 8002734:	58024400 	.word	0x58024400
 8002738:	24002178 	.word	0x24002178
 800273c:	24003178 	.word	0x24003178
 8002740:	2400200c 	.word	0x2400200c
 8002744:	24000008 	.word	0x24000008
 8002748:	0800b448 	.word	0x0800b448
 800274c:	24002008 	.word	0x24002008
 8002750:	2400317c 	.word	0x2400317c
 8002754:	24003188 	.word	0x24003188

08002758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b09c      	sub	sp, #112	@ 0x70
 800275c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800275e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002762:	224c      	movs	r2, #76	@ 0x4c
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f008 fdc4 	bl	800b2f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800276c:	1d3b      	adds	r3, r7, #4
 800276e:	2220      	movs	r2, #32
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f008 fdbe 	bl	800b2f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002778:	2004      	movs	r0, #4
 800277a:	f001 ff4d 	bl	8004618 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800277e:	2300      	movs	r3, #0
 8002780:	603b      	str	r3, [r7, #0]
 8002782:	4b36      	ldr	r3, [pc, #216]	@ (800285c <SystemClock_Config+0x104>)
 8002784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002786:	4a35      	ldr	r2, [pc, #212]	@ (800285c <SystemClock_Config+0x104>)
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800278e:	4b33      	ldr	r3, [pc, #204]	@ (800285c <SystemClock_Config+0x104>)
 8002790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	4b31      	ldr	r3, [pc, #196]	@ (8002860 <SystemClock_Config+0x108>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	4a30      	ldr	r2, [pc, #192]	@ (8002860 <SystemClock_Config+0x108>)
 800279e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027a2:	6193      	str	r3, [r2, #24]
 80027a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002860 <SystemClock_Config+0x108>)
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80027ac:	603b      	str	r3, [r7, #0]
 80027ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80027b0:	bf00      	nop
 80027b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002860 <SystemClock_Config+0x108>)
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027be:	d1f8      	bne.n	80027b2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80027c0:	2323      	movs	r3, #35	@ 0x23
 80027c2:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80027ca:	2301      	movs	r3, #1
 80027cc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027ce:	2340      	movs	r3, #64	@ 0x40
 80027d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80027d2:	2301      	movs	r3, #1
 80027d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027d6:	2302      	movs	r3, #2
 80027d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027da:	2302      	movs	r3, #2
 80027dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80027de:	2302      	movs	r3, #2
 80027e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80027e2:	230c      	movs	r3, #12
 80027e4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80027e6:	2302      	movs	r3, #2
 80027e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 80027ea:	2301      	movs	r3, #1
 80027ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80027ee:	2302      	movs	r3, #2
 80027f0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80027f2:	230c      	movs	r3, #12
 80027f4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80027f6:	2302      	movs	r3, #2
 80027f8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002802:	4618      	mov	r0, r3
 8002804:	f001 ff72 	bl	80046ec <HAL_RCC_OscConfig>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800280e:	f000 f829 	bl	8002864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002812:	233f      	movs	r3, #63	@ 0x3f
 8002814:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002816:	2303      	movs	r3, #3
 8002818:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800282e:	2300      	movs	r3, #0
 8002830:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	2101      	movs	r1, #1
 8002836:	4618      	mov	r0, r3
 8002838:	f002 fbb2 	bl	8004fa0 <HAL_RCC_ClockConfig>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8002842:	f000 f80f 	bl	8002864 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8002846:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800284a:	2100      	movs	r1, #0
 800284c:	2000      	movs	r0, #0
 800284e:	f002 fd5d 	bl	800530c <HAL_RCC_MCOConfig>
}
 8002852:	bf00      	nop
 8002854:	3770      	adds	r7, #112	@ 0x70
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	58000400 	.word	0x58000400
 8002860:	58024800 	.word	0x58024800

08002864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002868:	b672      	cpsid	i
}
 800286a:	bf00      	nop
  __disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287e:	4b0a      	ldr	r3, [pc, #40]	@ (80028a8 <HAL_MspInit+0x30>)
 8002880:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002884:	4a08      	ldr	r2, [pc, #32]	@ (80028a8 <HAL_MspInit+0x30>)
 8002886:	f043 0302 	orr.w	r3, r3, #2
 800288a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <HAL_MspInit+0x30>)
 8002890:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	58024400 	.word	0x58024400

080028ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <NMI_Handler+0x4>

080028b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <HardFault_Handler+0x4>

080028bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <MemManage_Handler+0x4>

080028c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <BusFault_Handler+0x4>

080028cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <UsageFault_Handler+0x4>

080028d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002902:	f000 f8ab 	bl	8002a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002910:	4802      	ldr	r0, [pc, #8]	@ (800291c <OTG_FS_IRQHandler+0x10>)
 8002912:	f000 fd22 	bl	800335a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	24004664 	.word	0x24004664

08002920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002920:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800295c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002924:	f7fd fd86 	bl	8000434 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002928:	f7fd fcd6 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800292c:	480c      	ldr	r0, [pc, #48]	@ (8002960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800292e:	490d      	ldr	r1, [pc, #52]	@ (8002964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002930:	4a0d      	ldr	r2, [pc, #52]	@ (8002968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002934:	e002      	b.n	800293c <LoopCopyDataInit>

08002936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293a:	3304      	adds	r3, #4

0800293c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800293c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002940:	d3f9      	bcc.n	8002936 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002942:	4a0a      	ldr	r2, [pc, #40]	@ (800296c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002944:	4c0a      	ldr	r4, [pc, #40]	@ (8002970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002948:	e001      	b.n	800294e <LoopFillZerobss>

0800294a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800294c:	3204      	adds	r2, #4

0800294e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002950:	d3fb      	bcc.n	800294a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002952:	f008 fcdd 	bl	800b310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002956:	f7ff fe69 	bl	800262c <main>
  bx  lr
 800295a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800295c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002960:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002964:	2400215c 	.word	0x2400215c
  ldr r2, =_sidata
 8002968:	0800e270 	.word	0x0800e270
  ldr r2, =_sbss
 800296c:	2400215c 	.word	0x2400215c
  ldr r4, =_ebss
 8002970:	24004ea0 	.word	0x24004ea0

08002974 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002974:	e7fe      	b.n	8002974 <ADC3_IRQHandler>
	...

08002978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297e:	2003      	movs	r0, #3
 8002980:	f000 f98c 	bl	8002c9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002984:	f002 fd2c 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 8002988:	4602      	mov	r2, r0
 800298a:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <HAL_Init+0x68>)
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	4913      	ldr	r1, [pc, #76]	@ (80029e4 <HAL_Init+0x6c>)
 8002996:	5ccb      	ldrb	r3, [r1, r3]
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
 80029a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029a2:	4b0f      	ldr	r3, [pc, #60]	@ (80029e0 <HAL_Init+0x68>)
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	4a0e      	ldr	r2, [pc, #56]	@ (80029e4 <HAL_Init+0x6c>)
 80029ac:	5cd3      	ldrb	r3, [r2, r3]
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	fa22 f303 	lsr.w	r3, r2, r3
 80029b8:	4a0b      	ldr	r2, [pc, #44]	@ (80029e8 <HAL_Init+0x70>)
 80029ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029bc:	4a0b      	ldr	r2, [pc, #44]	@ (80029ec <HAL_Init+0x74>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029c2:	2000      	movs	r0, #0
 80029c4:	f000 f814 	bl	80029f0 <HAL_InitTick>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e002      	b.n	80029d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029d2:	f7ff ff51 	bl	8002878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	58024400 	.word	0x58024400
 80029e4:	0800b438 	.word	0x0800b438
 80029e8:	24000004 	.word	0x24000004
 80029ec:	24000000 	.word	0x24000000

080029f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80029f8:	4b15      	ldr	r3, [pc, #84]	@ (8002a50 <HAL_InitTick+0x60>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e021      	b.n	8002a48 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a04:	4b13      	ldr	r3, [pc, #76]	@ (8002a54 <HAL_InitTick+0x64>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <HAL_InitTick+0x60>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 f971 	bl	8002d02 <HAL_SYSTICK_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00e      	b.n	8002a48 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b0f      	cmp	r3, #15
 8002a2e:	d80a      	bhi.n	8002a46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a30:	2200      	movs	r2, #0
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
 8002a38:	f000 f93b 	bl	8002cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a3c:	4a06      	ldr	r2, [pc, #24]	@ (8002a58 <HAL_InitTick+0x68>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e000      	b.n	8002a48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	24002014 	.word	0x24002014
 8002a54:	24000000 	.word	0x24000000
 8002a58:	24002010 	.word	0x24002010

08002a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a60:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <HAL_IncTick+0x20>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <HAL_IncTick+0x24>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	4a04      	ldr	r2, [pc, #16]	@ (8002a80 <HAL_IncTick+0x24>)
 8002a6e:	6013      	str	r3, [r2, #0]
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	24002014 	.word	0x24002014
 8002a80:	24003180 	.word	0x24003180

08002a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return uwTick;
 8002a88:	4b03      	ldr	r3, [pc, #12]	@ (8002a98 <HAL_GetTick+0x14>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	24003180 	.word	0x24003180

08002a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa4:	f7ff ffee 	bl	8002a84 <HAL_GetTick>
 8002aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d005      	beq.n	8002ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae0 <HAL_Delay+0x44>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4413      	add	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ac2:	bf00      	nop
 8002ac4:	f7ff ffde 	bl	8002a84 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d8f7      	bhi.n	8002ac4 <HAL_Delay+0x28>
  {
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	24002014 	.word	0x24002014

08002ae4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002ae8:	4b03      	ldr	r3, [pc, #12]	@ (8002af8 <HAL_GetREVID+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0c1b      	lsrs	r3, r3, #16
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	5c001000 	.word	0x5c001000

08002afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <__NVIC_SetPriorityGrouping+0x40>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b24:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2a:	4a04      	ldr	r2, [pc, #16]	@ (8002b3c <__NVIC_SetPriorityGrouping+0x40>)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	60d3      	str	r3, [r2, #12]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000ed00 	.word	0xe000ed00
 8002b40:	05fa0000 	.word	0x05fa0000

08002b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b48:	4b04      	ldr	r3, [pc, #16]	@ (8002b5c <__NVIC_GetPriorityGrouping+0x18>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	0a1b      	lsrs	r3, r3, #8
 8002b4e:	f003 0307 	and.w	r3, r3, #7
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	db0b      	blt.n	8002b8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	f003 021f 	and.w	r2, r3, #31
 8002b78:	4907      	ldr	r1, [pc, #28]	@ (8002b98 <__NVIC_EnableIRQ+0x38>)
 8002b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	2001      	movs	r0, #1
 8002b82:	fa00 f202 	lsl.w	r2, r0, r2
 8002b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	e000e100 	.word	0xe000e100

08002b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	6039      	str	r1, [r7, #0]
 8002ba6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ba8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	db0a      	blt.n	8002bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	490c      	ldr	r1, [pc, #48]	@ (8002be8 <__NVIC_SetPriority+0x4c>)
 8002bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bba:	0112      	lsls	r2, r2, #4
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc4:	e00a      	b.n	8002bdc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4908      	ldr	r1, [pc, #32]	@ (8002bec <__NVIC_SetPriority+0x50>)
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	3b04      	subs	r3, #4
 8002bd4:	0112      	lsls	r2, r2, #4
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	440b      	add	r3, r1
 8002bda:	761a      	strb	r2, [r3, #24]
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000e100 	.word	0xe000e100
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	@ 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f1c3 0307 	rsb	r3, r3, #7
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	bf28      	it	cs
 8002c0e:	2304      	movcs	r3, #4
 8002c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3304      	adds	r3, #4
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d902      	bls.n	8002c20 <NVIC_EncodePriority+0x30>
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3b03      	subs	r3, #3
 8002c1e:	e000      	b.n	8002c22 <NVIC_EncodePriority+0x32>
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	f04f 32ff 	mov.w	r2, #4294967295
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	401a      	ands	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c38:	f04f 31ff 	mov.w	r1, #4294967295
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c42:	43d9      	mvns	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	4313      	orrs	r3, r2
         );
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3724      	adds	r7, #36	@ 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c68:	d301      	bcc.n	8002c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e00f      	b.n	8002c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c98 <SysTick_Config+0x40>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c76:	210f      	movs	r1, #15
 8002c78:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7c:	f7ff ff8e 	bl	8002b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c80:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <SysTick_Config+0x40>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c86:	4b04      	ldr	r3, [pc, #16]	@ (8002c98 <SysTick_Config+0x40>)
 8002c88:	2207      	movs	r2, #7
 8002c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	e000e010 	.word	0xe000e010

08002c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff ff29 	bl	8002afc <__NVIC_SetPriorityGrouping>
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b086      	sub	sp, #24
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	4603      	mov	r3, r0
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc0:	f7ff ff40 	bl	8002b44 <__NVIC_GetPriorityGrouping>
 8002cc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	6978      	ldr	r0, [r7, #20]
 8002ccc:	f7ff ff90 	bl	8002bf0 <NVIC_EncodePriority>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff5f 	bl	8002b9c <__NVIC_SetPriority>
}
 8002cde:	bf00      	nop
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff ff33 	bl	8002b60 <__NVIC_EnableIRQ>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff ffa4 	bl	8002c58 <SysTick_Config>
 8002d10:	4603      	mov	r3, r0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	@ 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d2a:	4b89      	ldr	r3, [pc, #548]	@ (8002f50 <HAL_GPIO_Init+0x234>)
 8002d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d2e:	e194      	b.n	800305a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2101      	movs	r1, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8186 	beq.w	8003054 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d005      	beq.n	8002d60 <HAL_GPIO_Init+0x44>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d130      	bne.n	8002dc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d96:	2201      	movs	r2, #1
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	f003 0201 	and.w	r2, r3, #1
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d017      	beq.n	8002dfe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	2203      	movs	r2, #3
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d123      	bne.n	8002e52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	08da      	lsrs	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3208      	adds	r2, #8
 8002e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	220f      	movs	r2, #15
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	08da      	lsrs	r2, r3, #3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3208      	adds	r2, #8
 8002e4c:	69b9      	ldr	r1, [r7, #24]
 8002e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0203 	and.w	r2, r3, #3
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80e0 	beq.w	8003054 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e94:	4b2f      	ldr	r3, [pc, #188]	@ (8002f54 <HAL_GPIO_Init+0x238>)
 8002e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e9a:	4a2e      	ldr	r2, [pc, #184]	@ (8002f54 <HAL_GPIO_Init+0x238>)
 8002e9c:	f043 0302 	orr.w	r3, r3, #2
 8002ea0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f54 <HAL_GPIO_Init+0x238>)
 8002ea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eb2:	4a29      	ldr	r2, [pc, #164]	@ (8002f58 <HAL_GPIO_Init+0x23c>)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	3302      	adds	r3, #2
 8002eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	220f      	movs	r2, #15
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a20      	ldr	r2, [pc, #128]	@ (8002f5c <HAL_GPIO_Init+0x240>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d052      	beq.n	8002f84 <HAL_GPIO_Init+0x268>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8002f60 <HAL_GPIO_Init+0x244>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d031      	beq.n	8002f4a <HAL_GPIO_Init+0x22e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8002f64 <HAL_GPIO_Init+0x248>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d02b      	beq.n	8002f46 <HAL_GPIO_Init+0x22a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f68 <HAL_GPIO_Init+0x24c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d025      	beq.n	8002f42 <HAL_GPIO_Init+0x226>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f6c <HAL_GPIO_Init+0x250>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d01f      	beq.n	8002f3e <HAL_GPIO_Init+0x222>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a1b      	ldr	r2, [pc, #108]	@ (8002f70 <HAL_GPIO_Init+0x254>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d019      	beq.n	8002f3a <HAL_GPIO_Init+0x21e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a1a      	ldr	r2, [pc, #104]	@ (8002f74 <HAL_GPIO_Init+0x258>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <HAL_GPIO_Init+0x21a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a19      	ldr	r2, [pc, #100]	@ (8002f78 <HAL_GPIO_Init+0x25c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00d      	beq.n	8002f32 <HAL_GPIO_Init+0x216>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a18      	ldr	r2, [pc, #96]	@ (8002f7c <HAL_GPIO_Init+0x260>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d007      	beq.n	8002f2e <HAL_GPIO_Init+0x212>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a17      	ldr	r2, [pc, #92]	@ (8002f80 <HAL_GPIO_Init+0x264>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_GPIO_Init+0x20e>
 8002f26:	2309      	movs	r3, #9
 8002f28:	e02d      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f2a:	230a      	movs	r3, #10
 8002f2c:	e02b      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f2e:	2308      	movs	r3, #8
 8002f30:	e029      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f32:	2307      	movs	r3, #7
 8002f34:	e027      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f36:	2306      	movs	r3, #6
 8002f38:	e025      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f3a:	2305      	movs	r3, #5
 8002f3c:	e023      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f3e:	2304      	movs	r3, #4
 8002f40:	e021      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f42:	2303      	movs	r3, #3
 8002f44:	e01f      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e01d      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e01b      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f4e:	bf00      	nop
 8002f50:	58000080 	.word	0x58000080
 8002f54:	58024400 	.word	0x58024400
 8002f58:	58000400 	.word	0x58000400
 8002f5c:	58020000 	.word	0x58020000
 8002f60:	58020400 	.word	0x58020400
 8002f64:	58020800 	.word	0x58020800
 8002f68:	58020c00 	.word	0x58020c00
 8002f6c:	58021000 	.word	0x58021000
 8002f70:	58021400 	.word	0x58021400
 8002f74:	58021800 	.word	0x58021800
 8002f78:	58021c00 	.word	0x58021c00
 8002f7c:	58022000 	.word	0x58022000
 8002f80:	58022400 	.word	0x58022400
 8002f84:	2300      	movs	r3, #0
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	f002 0203 	and.w	r2, r2, #3
 8002f8c:	0092      	lsls	r2, r2, #2
 8002f8e:	4093      	lsls	r3, r2
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f96:	4938      	ldr	r1, [pc, #224]	@ (8003078 <HAL_GPIO_Init+0x35c>)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002fca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002fd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ff8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	3301      	adds	r3, #1
 8003058:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	f47f ae63 	bne.w	8002d30 <HAL_GPIO_Init+0x14>
  }
}
 800306a:	bf00      	nop
 800306c:	bf00      	nop
 800306e:	3724      	adds	r7, #36	@ 0x24
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	58000400 	.word	0x58000400

0800307c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003084:	4a08      	ldr	r2, [pc, #32]	@ (80030a8 <HAL_HSEM_FastTake+0x2c>)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3320      	adds	r3, #32
 800308a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308e:	4a07      	ldr	r2, [pc, #28]	@ (80030ac <HAL_HSEM_FastTake+0x30>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d101      	bne.n	8003098 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	e000      	b.n	800309a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
}
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	58026400 	.word	0x58026400
 80030ac:	80000300 	.word	0x80000300

080030b0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80030ba:	4906      	ldr	r1, [pc, #24]	@ (80030d4 <HAL_HSEM_Release+0x24>)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	58026400 	.word	0x58026400

080030d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af02      	add	r7, sp, #8
 80030de:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0fe      	b.n	80032e8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f007 fbfc 	bl	800a8fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2203      	movs	r2, #3
 8003108:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f003 ffe2 	bl	80070da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	7c1a      	ldrb	r2, [r3, #16]
 800311e:	f88d 2000 	strb.w	r2, [sp]
 8003122:	3304      	adds	r3, #4
 8003124:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003126:	f003 feb3 	bl	8006e90 <USB_CoreInit>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0d5      	b.n	80032e8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f003 ffda 	bl	80070fc <USB_SetCurrentMode>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2202      	movs	r2, #2
 8003152:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e0c6      	b.n	80032e8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	e04a      	b.n	80031f6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	3315      	adds	r3, #21
 8003170:	2201      	movs	r2, #1
 8003172:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003174:	7bfa      	ldrb	r2, [r7, #15]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	3314      	adds	r3, #20
 8003184:	7bfa      	ldrb	r2, [r7, #15]
 8003186:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003188:	7bfa      	ldrb	r2, [r7, #15]
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	b298      	uxth	r0, r3
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	332e      	adds	r3, #46	@ 0x2e
 800319c:	4602      	mov	r2, r0
 800319e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031a0:	7bfa      	ldrb	r2, [r7, #15]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	3318      	adds	r3, #24
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	331c      	adds	r3, #28
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031c8:	7bfa      	ldrb	r2, [r7, #15]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	3320      	adds	r3, #32
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	3324      	adds	r3, #36	@ 0x24
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	3301      	adds	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	791b      	ldrb	r3, [r3, #4]
 80031fa:	7bfa      	ldrb	r2, [r7, #15]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d3af      	bcc.n	8003160 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003200:	2300      	movs	r3, #0
 8003202:	73fb      	strb	r3, [r7, #15]
 8003204:	e044      	b.n	8003290 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800322e:	7bfa      	ldrb	r2, [r7, #15]
 8003230:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003232:	7bfa      	ldrb	r2, [r7, #15]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800325e:	7bfa      	ldrb	r2, [r7, #15]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003274:	7bfa      	ldrb	r2, [r7, #15]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	3301      	adds	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	791b      	ldrb	r3, [r3, #4]
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	429a      	cmp	r2, r3
 8003298:	d3b5      	bcc.n	8003206 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	7c1a      	ldrb	r2, [r3, #16]
 80032a2:	f88d 2000 	strb.w	r2, [sp]
 80032a6:	3304      	adds	r3, #4
 80032a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032aa:	f003 ff73 	bl	8007194 <USB_DevInit>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e013      	b.n	80032e8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	7b1b      	ldrb	r3, [r3, #12]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d102      	bne.n	80032dc <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f001 f96e 	bl	80045b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f004 ffb6 	bl	8008252 <USB_DevDisconnect>

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_PCD_Start+0x1c>
 8003308:	2302      	movs	r3, #2
 800330a:	e022      	b.n	8003352 <HAL_PCD_Start+0x62>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d009      	beq.n	8003334 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003324:	2b01      	cmp	r3, #1
 8003326:	d105      	bne.n	8003334 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f003 febd 	bl	80070b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f004 ff64 	bl	8008210 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800335a:	b590      	push	{r4, r7, lr}
 800335c:	b08d      	sub	sp, #52	@ 0x34
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f005 f822 	bl	80083ba <USB_GetMode>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	f040 84b9 	bne.w	8003cf0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f004 ff86 	bl	8008294 <USB_ReadInterrupts>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 84af 	beq.w	8003cee <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f004 ff73 	bl	8008294 <USB_ReadInterrupts>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d107      	bne.n	80033c8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f002 0202 	and.w	r2, r2, #2
 80033c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f004 ff61 	bl	8008294 <USB_ReadInterrupts>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b10      	cmp	r3, #16
 80033da:	d161      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0210 	bic.w	r2, r2, #16
 80033ea:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	f003 020f 	and.w	r2, r3, #15
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	3304      	adds	r3, #4
 800340a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003412:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003416:	d124      	bne.n	8003462 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d035      	beq.n	8003490 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800342e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003432:	b29b      	uxth	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	6a38      	ldr	r0, [r7, #32]
 8003438:	f004 fd98 	bl	8007f6c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	091b      	lsrs	r3, r3, #4
 8003444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003448:	441a      	add	r2, r3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	695a      	ldr	r2, [r3, #20]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800345a:	441a      	add	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	615a      	str	r2, [r3, #20]
 8003460:	e016      	b.n	8003490 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003468:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800346c:	d110      	bne.n	8003490 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003474:	2208      	movs	r2, #8
 8003476:	4619      	mov	r1, r3
 8003478:	6a38      	ldr	r0, [r7, #32]
 800347a:	f004 fd77 	bl	8007f6c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800348a:	441a      	add	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0210 	orr.w	r2, r2, #16
 800349e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f004 fef5 	bl	8008294 <USB_ReadInterrupts>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034b4:	f040 80a7 	bne.w	8003606 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f004 fefa 	bl	80082ba <USB_ReadDevAllOutEpInterrupt>
 80034c6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80034c8:	e099      	b.n	80035fe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80034ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 808e 	beq.w	80035f2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f004 ff1e 	bl	8008322 <USB_ReadDevOutEPInterrupt>
 80034e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00c      	beq.n	800350c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034fe:	461a      	mov	r2, r3
 8003500:	2301      	movs	r3, #1
 8003502:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003504:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fed0 	bl	80042ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	4413      	add	r3, r2
 800351e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003522:	461a      	mov	r2, r3
 8003524:	2308      	movs	r3, #8
 8003526:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003528:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 ffa6 	bl	800447c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b00      	cmp	r3, #0
 8003538:	d008      	beq.n	800354c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	4413      	add	r3, r2
 8003542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003546:	461a      	mov	r2, r3
 8003548:	2310      	movs	r3, #16
 800354a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d030      	beq.n	80035b8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800355e:	2b80      	cmp	r3, #128	@ 0x80
 8003560:	d109      	bne.n	8003576 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	69fa      	ldr	r2, [r7, #28]
 800356c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003570:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003574:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	4413      	add	r3, r2
 8003588:	3304      	adds	r3, #4
 800358a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	78db      	ldrb	r3, [r3, #3]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d108      	bne.n	80035a6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2200      	movs	r2, #0
 8003598:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	b2db      	uxtb	r3, r3
 800359e:	4619      	mov	r1, r3
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f007 fae1 	bl	800ab68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80035a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035b2:	461a      	mov	r2, r3
 80035b4:	2302      	movs	r3, #2
 80035b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ce:	461a      	mov	r2, r3
 80035d0:	2320      	movs	r3, #32
 80035d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ea:	461a      	mov	r2, r3
 80035ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	3301      	adds	r3, #1
 80035f6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80035f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fa:	085b      	lsrs	r3, r3, #1
 80035fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80035fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	f47f af62 	bne.w	80034ca <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f004 fe42 	bl	8008294 <USB_ReadInterrupts>
 8003610:	4603      	mov	r3, r0
 8003612:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003616:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800361a:	f040 80db 	bne.w	80037d4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f004 fe63 	bl	80082ee <USB_ReadDevAllInEpInterrupt>
 8003628:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800362e:	e0cd      	b.n	80037cc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 80c2 	beq.w	80037c0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	4611      	mov	r1, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f004 fe89 	bl	800835e <USB_ReadDevInEPInterrupt>
 800364c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d057      	beq.n	8003708 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	2201      	movs	r2, #1
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800366c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	43db      	mvns	r3, r3
 8003672:	69f9      	ldr	r1, [r7, #28]
 8003674:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003678:	4013      	ands	r3, r2
 800367a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003688:	461a      	mov	r2, r3
 800368a:	2301      	movs	r3, #1
 800368c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	799b      	ldrb	r3, [r3, #6]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d132      	bne.n	80036fc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	3320      	adds	r3, #32
 80036a6:	6819      	ldr	r1, [r3, #0]
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4403      	add	r3, r0
 80036b6:	331c      	adds	r3, #28
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4419      	add	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c0:	4613      	mov	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4403      	add	r3, r0
 80036ca:	3320      	adds	r3, #32
 80036cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80036ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d113      	bne.n	80036fc <HAL_PCD_IRQHandler+0x3a2>
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	3324      	adds	r3, #36	@ 0x24
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d108      	bne.n	80036fc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036f4:	461a      	mov	r2, r3
 80036f6:	2101      	movs	r1, #1
 80036f8:	f004 fe92 	bl	8008420 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	4619      	mov	r1, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f007 f9ab 	bl	800aa5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800371e:	461a      	mov	r2, r3
 8003720:	2308      	movs	r3, #8
 8003722:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	4413      	add	r3, r2
 8003736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800373a:	461a      	mov	r2, r3
 800373c:	2310      	movs	r3, #16
 800373e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003756:	461a      	mov	r2, r3
 8003758:	2340      	movs	r3, #64	@ 0x40
 800375a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d023      	beq.n	80037ae <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003766:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003768:	6a38      	ldr	r0, [r7, #32]
 800376a:	f003 fe71 	bl	8007450 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800376e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	3310      	adds	r3, #16
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	3304      	adds	r3, #4
 8003780:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	78db      	ldrb	r3, [r3, #3]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d108      	bne.n	800379c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2200      	movs	r2, #0
 800378e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003792:	b2db      	uxtb	r3, r3
 8003794:	4619      	mov	r1, r3
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f007 f9f8 	bl	800ab8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037a8:	461a      	mov	r2, r3
 80037aa:	2302      	movs	r3, #2
 80037ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fcea 	bl	8004194 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c2:	3301      	adds	r3, #1
 80037c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80037c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80037cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f47f af2e 	bne.w	8003630 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f004 fd5b 	bl	8008294 <USB_ReadInterrupts>
 80037de:	4603      	mov	r3, r0
 80037e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037e8:	d122      	bne.n	8003830 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003804:	2b01      	cmp	r3, #1
 8003806:	d108      	bne.n	800381a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003810:	2100      	movs	r1, #0
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fef4 	bl	8004600 <HAL_PCDEx_LPM_Callback>
 8003818:	e002      	b.n	8003820 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f007 f996 	bl	800ab4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800382e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f004 fd2d 	bl	8008294 <USB_ReadInterrupts>
 800383a:	4603      	mov	r3, r0
 800383c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003840:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003844:	d112      	bne.n	800386c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d102      	bne.n	800385c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f007 f952 	bl	800ab00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800386a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f004 fd0f 	bl	8008294 <USB_ReadInterrupts>
 8003876:	4603      	mov	r3, r0
 8003878:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800387c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003880:	d121      	bne.n	80038c6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003890:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003898:	2b00      	cmp	r3, #0
 800389a:	d111      	bne.n	80038c0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038aa:	089b      	lsrs	r3, r3, #2
 80038ac:	f003 020f 	and.w	r2, r3, #15
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80038b6:	2101      	movs	r1, #1
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 fea1 	bl	8004600 <HAL_PCDEx_LPM_Callback>
 80038be:	e002      	b.n	80038c6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f007 f91d 	bl	800ab00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f004 fce2 	bl	8008294 <USB_ReadInterrupts>
 80038d0:	4603      	mov	r3, r0
 80038d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038da:	f040 80b7 	bne.w	8003a4c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2110      	movs	r1, #16
 80038f8:	4618      	mov	r0, r3
 80038fa:	f003 fda9 	bl	8007450 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038fe:	2300      	movs	r3, #0
 8003900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003902:	e046      	b.n	8003992 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003910:	461a      	mov	r2, r3
 8003912:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003916:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003928:	0151      	lsls	r1, r2, #5
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	440a      	add	r2, r1
 800392e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003932:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003936:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003944:	461a      	mov	r2, r3
 8003946:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800394a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800394c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800395c:	0151      	lsls	r1, r2, #5
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	440a      	add	r2, r1
 8003962:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003966:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800396a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800396c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800397c:	0151      	lsls	r1, r2, #5
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	440a      	add	r2, r1
 8003982:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003986:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800398a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800398c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398e:	3301      	adds	r3, #1
 8003990:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	791b      	ldrb	r3, [r3, #4]
 8003996:	461a      	mov	r2, r3
 8003998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800399a:	4293      	cmp	r3, r2
 800399c:	d3b2      	bcc.n	8003904 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039ac:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80039b0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	7bdb      	ldrb	r3, [r3, #15]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d016      	beq.n	80039e8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039ca:	f043 030b 	orr.w	r3, r3, #11
 80039ce:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039e0:	f043 030b 	orr.w	r3, r3, #11
 80039e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80039e6:	e015      	b.n	8003a14 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ee:	695a      	ldr	r2, [r3, #20]
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039f6:	4619      	mov	r1, r3
 80039f8:	f242 032b 	movw	r3, #8235	@ 0x202b
 80039fc:	4313      	orrs	r3, r2
 80039fe:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a0e:	f043 030b 	orr.w	r3, r3, #11
 8003a12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a22:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003a26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a36:	461a      	mov	r2, r3
 8003a38:	f004 fcf2 	bl	8008420 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003a4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f004 fc1f 	bl	8008294 <USB_ReadInterrupts>
 8003a56:	4603      	mov	r3, r0
 8003a58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a60:	d123      	bne.n	8003aaa <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f004 fcb6 	bl	80083d8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f003 fd66 	bl	8007542 <USB_GetDevSpeed>
 8003a76:	4603      	mov	r3, r0
 8003a78:	461a      	mov	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681c      	ldr	r4, [r3, #0]
 8003a82:	f001 fe27 	bl	80056d4 <HAL_RCC_GetHCLKFreq>
 8003a86:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f003 fa70 	bl	8006f74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f007 f80a 	bl	800aaae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695a      	ldr	r2, [r3, #20]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003aa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f004 fbf0 	bl	8008294 <USB_ReadInterrupts>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d10a      	bne.n	8003ad4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f006 ffe7 	bl	800aa92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695a      	ldr	r2, [r3, #20]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f002 0208 	and.w	r2, r2, #8
 8003ad2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f004 fbdb 	bl	8008294 <USB_ReadInterrupts>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae4:	2b80      	cmp	r3, #128	@ 0x80
 8003ae6:	d123      	bne.n	8003b30 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003af4:	2301      	movs	r3, #1
 8003af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af8:	e014      	b.n	8003b24 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d105      	bne.n	8003b1e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	4619      	mov	r1, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fb0a 	bl	8004132 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	3301      	adds	r3, #1
 8003b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	791b      	ldrb	r3, [r3, #4]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d3e4      	bcc.n	8003afa <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f004 fbad 	bl	8008294 <USB_ReadInterrupts>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b44:	d13c      	bne.n	8003bc0 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b46:	2301      	movs	r3, #1
 8003b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b4a:	e02b      	b.n	8003ba4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	3318      	adds	r3, #24
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d115      	bne.n	8003b9e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b72:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	da12      	bge.n	8003b9e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	3317      	adds	r3, #23
 8003b88:	2201      	movs	r2, #1
 8003b8a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	4619      	mov	r1, r3
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 faca 	bl	8004132 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	791b      	ldrb	r3, [r3, #4]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d3cd      	bcc.n	8003b4c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f004 fb65 	bl	8008294 <USB_ReadInterrupts>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bd4:	d156      	bne.n	8003c84 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bda:	e045      	b.n	8003c68 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d12e      	bne.n	8003c62 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c04:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	da2b      	bge.n	8003c62 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	0c1a      	lsrs	r2, r3, #16
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003c14:	4053      	eors	r3, r2
 8003c16:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d121      	bne.n	8003c62 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c22:	4613      	mov	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003c30:	2201      	movs	r2, #1
 8003c32:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c5e:	6053      	str	r3, [r2, #4]
            break;
 8003c60:	e008      	b.n	8003c74 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	3301      	adds	r3, #1
 8003c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	791b      	ldrb	r3, [r3, #4]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d3b3      	bcc.n	8003bdc <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695a      	ldr	r2, [r3, #20]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f004 fb03 	bl	8008294 <USB_ReadInterrupts>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c98:	d10a      	bne.n	8003cb0 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f006 ff88 	bl	800abb0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f004 faed 	bl	8008294 <USB_ReadInterrupts>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d115      	bne.n	8003cf0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f006 ff78 	bl	800abcc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6859      	ldr	r1, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	605a      	str	r2, [r3, #4]
 8003cec:	e000      	b.n	8003cf0 <HAL_PCD_IRQHandler+0x996>
      return;
 8003cee:	bf00      	nop
    }
  }
}
 8003cf0:	3734      	adds	r7, #52	@ 0x34
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd90      	pop	{r4, r7, pc}

08003cf6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_PCD_SetAddress+0x1a>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e012      	b.n	8003d36 <HAL_PCD_SetAddress+0x40>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	4611      	mov	r1, r2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f004 fa4c 	bl	80081c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	4608      	mov	r0, r1
 8003d48:	4611      	mov	r1, r2
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	70fb      	strb	r3, [r7, #3]
 8003d50:	460b      	mov	r3, r1
 8003d52:	803b      	strh	r3, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	da0f      	bge.n	8003d84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	f003 020f 	and.w	r2, r3, #15
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	3310      	adds	r3, #16
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	4413      	add	r3, r2
 8003d78:	3304      	adds	r3, #4
 8003d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	705a      	strb	r2, [r3, #1]
 8003d82:	e00f      	b.n	8003da4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	f003 020f 	and.w	r2, r3, #15
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	4413      	add	r3, r2
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003db0:	883b      	ldrh	r3, [r7, #0]
 8003db2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	78ba      	ldrb	r2, [r7, #2]
 8003dbe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	785b      	ldrb	r3, [r3, #1]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d004      	beq.n	8003dd2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003dd2:	78bb      	ldrb	r3, [r7, #2]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d102      	bne.n	8003dde <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_PCD_EP_Open+0xae>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e00e      	b.n	8003e0a <HAL_PCD_EP_Open+0xcc>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68f9      	ldr	r1, [r7, #12]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f003 fbc6 	bl	800758c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003e08:	7afb      	ldrb	r3, [r7, #11]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	da0f      	bge.n	8003e46 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	f003 020f 	and.w	r2, r3, #15
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	3310      	adds	r3, #16
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	4413      	add	r3, r2
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	705a      	strb	r2, [r3, #1]
 8003e44:	e00f      	b.n	8003e66 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e46:	78fb      	ldrb	r3, [r7, #3]
 8003e48:	f003 020f 	and.w	r2, r3, #15
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_PCD_EP_Close+0x6e>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e00e      	b.n	8003e9e <HAL_PCD_EP_Close+0x8c>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68f9      	ldr	r1, [r7, #12]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f003 fc04 	bl	800769c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b086      	sub	sp, #24
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eb6:	7afb      	ldrb	r3, [r7, #11]
 8003eb8:	f003 020f 	and.w	r2, r3, #15
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	3304      	adds	r3, #4
 8003ece:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ee8:	7afb      	ldrb	r3, [r7, #11]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	799b      	ldrb	r3, [r3, #6]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d102      	bne.n	8003f02 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	799b      	ldrb	r3, [r3, #6]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	6979      	ldr	r1, [r7, #20]
 8003f0e:	f003 fca1 	bl	8007854 <USB_EPStartXfer>

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	f003 020f 	and.w	r2, r3, #15
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003f3e:	681b      	ldr	r3, [r3, #0]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f5c:	7afb      	ldrb	r3, [r7, #11]
 8003f5e:	f003 020f 	and.w	r2, r3, #15
 8003f62:	4613      	mov	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	3310      	adds	r3, #16
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4413      	add	r3, r2
 8003f70:	3304      	adds	r3, #4
 8003f72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2200      	movs	r2, #0
 8003f84:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f8c:	7afb      	ldrb	r3, [r7, #11]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	799b      	ldrb	r3, [r3, #6]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d102      	bne.n	8003fa6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	799b      	ldrb	r3, [r3, #6]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	6979      	ldr	r1, [r7, #20]
 8003fb2:	f003 fc4f 	bl	8007854 <USB_EPStartXfer>

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	7912      	ldrb	r2, [r2, #4]
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d901      	bls.n	8003fde <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e04f      	b.n	800407e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	da0f      	bge.n	8004006 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fe6:	78fb      	ldrb	r3, [r7, #3]
 8003fe8:	f003 020f 	and.w	r2, r3, #15
 8003fec:	4613      	mov	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	3310      	adds	r3, #16
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	705a      	strb	r2, [r3, #1]
 8004004:	e00d      	b.n	8004022 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004006:	78fa      	ldrb	r2, [r7, #3]
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	4413      	add	r3, r2
 8004018:	3304      	adds	r3, #4
 800401a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	b2da      	uxtb	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_PCD_EP_SetStall+0x82>
 800403e:	2302      	movs	r3, #2
 8004040:	e01d      	b.n	800407e <HAL_PCD_EP_SetStall+0xbe>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68f9      	ldr	r1, [r7, #12]
 8004050:	4618      	mov	r0, r3
 8004052:	f003 ffe3 	bl	800801c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	2b00      	cmp	r3, #0
 800405e:	d109      	bne.n	8004074 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	7999      	ldrb	r1, [r3, #6]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800406e:	461a      	mov	r2, r3
 8004070:	f004 f9d6 	bl	8008420 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	7912      	ldrb	r2, [r2, #4]
 800409c:	4293      	cmp	r3, r2
 800409e:	d901      	bls.n	80040a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e042      	b.n	800412a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	da0f      	bge.n	80040cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	f003 020f 	and.w	r2, r3, #15
 80040b2:	4613      	mov	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	3310      	adds	r3, #16
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	4413      	add	r3, r2
 80040c0:	3304      	adds	r3, #4
 80040c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	705a      	strb	r2, [r3, #1]
 80040ca:	e00f      	b.n	80040ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	f003 020f 	and.w	r2, r3, #15
 80040d2:	4613      	mov	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	4413      	add	r3, r2
 80040e2:	3304      	adds	r3, #4
 80040e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_PCD_EP_ClrStall+0x86>
 8004108:	2302      	movs	r3, #2
 800410a:	e00e      	b.n	800412a <HAL_PCD_EP_ClrStall+0xa4>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68f9      	ldr	r1, [r7, #12]
 800411a:	4618      	mov	r0, r3
 800411c:	f003 ffec 	bl	80080f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	460b      	mov	r3, r1
 800413c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800413e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004142:	2b00      	cmp	r3, #0
 8004144:	da0c      	bge.n	8004160 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	f003 020f 	and.w	r2, r3, #15
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	3310      	adds	r3, #16
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	4413      	add	r3, r2
 800415a:	3304      	adds	r3, #4
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e00c      	b.n	800417a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	f003 020f 	and.w	r2, r3, #15
 8004166:	4613      	mov	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	3304      	adds	r3, #4
 8004178:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	4618      	mov	r0, r3
 8004182:	f003 fe0b 	bl	8007d9c <USB_EPStopXfer>
 8004186:	4603      	mov	r3, r0
 8004188:	72fb      	strb	r3, [r7, #11]

  return ret;
 800418a:	7afb      	ldrb	r3, [r7, #11]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08a      	sub	sp, #40	@ 0x28
 8004198:	af02      	add	r7, sp, #8
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	4613      	mov	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	3310      	adds	r3, #16
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	4413      	add	r3, r2
 80041b8:	3304      	adds	r3, #4
 80041ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	695a      	ldr	r2, [r3, #20]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d901      	bls.n	80041cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e06b      	b.n	80042a4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	69fa      	ldr	r2, [r7, #28]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d902      	bls.n	80041e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	3303      	adds	r3, #3
 80041ec:	089b      	lsrs	r3, r3, #2
 80041ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041f0:	e02a      	b.n	8004248 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	429a      	cmp	r2, r3
 8004206:	d902      	bls.n	800420e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	3303      	adds	r3, #3
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	68d9      	ldr	r1, [r3, #12]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	4603      	mov	r3, r0
 800422a:	6978      	ldr	r0, [r7, #20]
 800422c:	f003 fe60 	bl	8007ef0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	441a      	add	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	441a      	add	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	429a      	cmp	r2, r3
 800425c:	d809      	bhi.n	8004272 <PCD_WriteEmptyTxFifo+0xde>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004266:	429a      	cmp	r2, r3
 8004268:	d203      	bcs.n	8004272 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1bf      	bne.n	80041f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	429a      	cmp	r2, r3
 800427c:	d811      	bhi.n	80042a2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	f003 030f 	and.w	r3, r3, #15
 8004284:	2201      	movs	r2, #1
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004292:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	43db      	mvns	r3, r3
 8004298:	6939      	ldr	r1, [r7, #16]
 800429a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800429e:	4013      	ands	r3, r2
 80042a0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3720      	adds	r7, #32
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	333c      	adds	r3, #60	@ 0x3c
 80042c4:	3304      	adds	r3, #4
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	799b      	ldrb	r3, [r3, #6]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d17b      	bne.n	80043da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d015      	beq.n	8004318 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	4a61      	ldr	r2, [pc, #388]	@ (8004474 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	f240 80b9 	bls.w	8004468 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80b3 	beq.w	8004468 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800430e:	461a      	mov	r2, r3
 8004310:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004314:	6093      	str	r3, [r2, #8]
 8004316:	e0a7      	b.n	8004468 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800432e:	461a      	mov	r2, r3
 8004330:	2320      	movs	r3, #32
 8004332:	6093      	str	r3, [r2, #8]
 8004334:	e098      	b.n	8004468 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800433c:	2b00      	cmp	r3, #0
 800433e:	f040 8093 	bne.w	8004468 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	4a4b      	ldr	r2, [pc, #300]	@ (8004474 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d90f      	bls.n	800436a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004360:	461a      	mov	r2, r3
 8004362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004366:	6093      	str	r3, [r2, #8]
 8004368:	e07e      	b.n	8004468 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	4613      	mov	r3, r2
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	4413      	add	r3, r2
 800437c:	3304      	adds	r3, #4
 800437e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a1a      	ldr	r2, [r3, #32]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	0159      	lsls	r1, r3, #5
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	440b      	add	r3, r1
 800438c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004396:	1ad2      	subs	r2, r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d114      	bne.n	80043cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043b4:	461a      	mov	r2, r3
 80043b6:	2101      	movs	r1, #1
 80043b8:	f004 f832 	bl	8008420 <USB_EP0_OutStart>
 80043bc:	e006      	b.n	80043cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	441a      	add	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	4619      	mov	r1, r3
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f006 fb28 	bl	800aa28 <HAL_PCD_DataOutStageCallback>
 80043d8:	e046      	b.n	8004468 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	4a26      	ldr	r2, [pc, #152]	@ (8004478 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d124      	bne.n	800442c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043f8:	461a      	mov	r2, r3
 80043fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043fe:	6093      	str	r3, [r2, #8]
 8004400:	e032      	b.n	8004468 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004418:	461a      	mov	r2, r3
 800441a:	2320      	movs	r3, #32
 800441c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	4619      	mov	r1, r3
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f006 faff 	bl	800aa28 <HAL_PCD_DataOutStageCallback>
 800442a:	e01d      	b.n	8004468 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d114      	bne.n	800445c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	4613      	mov	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d108      	bne.n	800445c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004454:	461a      	mov	r2, r3
 8004456:	2100      	movs	r1, #0
 8004458:	f003 ffe2 	bl	8008420 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	4619      	mov	r1, r3
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f006 fae0 	bl	800aa28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3720      	adds	r7, #32
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	4f54300a 	.word	0x4f54300a
 8004478:	4f54310a 	.word	0x4f54310a

0800447c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	333c      	adds	r3, #60	@ 0x3c
 8004494:	3304      	adds	r3, #4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4a15      	ldr	r2, [pc, #84]	@ (8004504 <PCD_EP_OutSetupPacket_int+0x88>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d90e      	bls.n	80044d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d009      	beq.n	80044d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c8:	461a      	mov	r2, r3
 80044ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f006 fa97 	bl	800aa04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004504 <PCD_EP_OutSetupPacket_int+0x88>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d90c      	bls.n	80044f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	799b      	ldrb	r3, [r3, #6]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d108      	bne.n	80044f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044f0:	461a      	mov	r2, r3
 80044f2:	2101      	movs	r1, #1
 80044f4:	f003 ff94 	bl	8008420 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	4f54300a 	.word	0x4f54300a

08004508 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	70fb      	strb	r3, [r7, #3]
 8004514:	4613      	mov	r3, r2
 8004516:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d107      	bne.n	8004536 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004526:	883b      	ldrh	r3, [r7, #0]
 8004528:	0419      	lsls	r1, r3, #16
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	430a      	orrs	r2, r1
 8004532:	629a      	str	r2, [r3, #40]	@ 0x28
 8004534:	e028      	b.n	8004588 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453c:	0c1b      	lsrs	r3, r3, #16
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	4413      	add	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004544:	2300      	movs	r3, #0
 8004546:	73fb      	strb	r3, [r7, #15]
 8004548:	e00d      	b.n	8004566 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	3340      	adds	r3, #64	@ 0x40
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	0c1b      	lsrs	r3, r3, #16
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	4413      	add	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	3301      	adds	r3, #1
 8004564:	73fb      	strb	r3, [r7, #15]
 8004566:	7bfa      	ldrb	r2, [r7, #15]
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	3b01      	subs	r3, #1
 800456c:	429a      	cmp	r2, r3
 800456e:	d3ec      	bcc.n	800454a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004570:	883b      	ldrh	r3, [r7, #0]
 8004572:	0418      	lsls	r0, r3, #16
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6819      	ldr	r1, [r3, #0]
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	3b01      	subs	r3, #1
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	4302      	orrs	r2, r0
 8004580:	3340      	adds	r3, #64	@ 0x40
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	460b      	mov	r3, r1
 80045a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	887a      	ldrh	r2, [r7, #2]
 80045a8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045e6:	4b05      	ldr	r3, [pc, #20]	@ (80045fc <HAL_PCDEx_ActivateLPM+0x44>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	10000003 	.word	0x10000003

08004600 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004620:	4b29      	ldr	r3, [pc, #164]	@ (80046c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	2b06      	cmp	r3, #6
 800462a:	d00a      	beq.n	8004642 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800462c:	4b26      	ldr	r3, [pc, #152]	@ (80046c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	429a      	cmp	r2, r3
 8004638:	d001      	beq.n	800463e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e040      	b.n	80046c0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	e03e      	b.n	80046c0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004642:	4b21      	ldr	r3, [pc, #132]	@ (80046c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800464a:	491f      	ldr	r1, [pc, #124]	@ (80046c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4313      	orrs	r3, r2
 8004650:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004652:	f7fe fa17 	bl	8002a84 <HAL_GetTick>
 8004656:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004658:	e009      	b.n	800466e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800465a:	f7fe fa13 	bl	8002a84 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004668:	d901      	bls.n	800466e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e028      	b.n	80046c0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800466e:	4b16      	ldr	r3, [pc, #88]	@ (80046c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800467a:	d1ee      	bne.n	800465a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b1e      	cmp	r3, #30
 8004680:	d008      	beq.n	8004694 <HAL_PWREx_ConfigSupply+0x7c>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b2e      	cmp	r3, #46	@ 0x2e
 8004686:	d005      	beq.n	8004694 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b1d      	cmp	r3, #29
 800468c:	d002      	beq.n	8004694 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b2d      	cmp	r3, #45	@ 0x2d
 8004692:	d114      	bne.n	80046be <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004694:	f7fe f9f6 	bl	8002a84 <HAL_GetTick>
 8004698:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800469a:	e009      	b.n	80046b0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800469c:	f7fe f9f2 	bl	8002a84 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046aa:	d901      	bls.n	80046b0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e007      	b.n	80046c0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80046b0:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <HAL_PWREx_ConfigSupply+0xb0>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046bc:	d1ee      	bne.n	800469c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	58024800 	.word	0x58024800

080046cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80046d0:	4b05      	ldr	r3, [pc, #20]	@ (80046e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4a04      	ldr	r2, [pc, #16]	@ (80046e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80046d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046da:	60d3      	str	r3, [r2, #12]
}
 80046dc:	bf00      	nop
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	58024800 	.word	0x58024800

080046ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08c      	sub	sp, #48	@ 0x30
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d102      	bne.n	8004700 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	f000 bc48 	b.w	8004f90 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8088 	beq.w	800481e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800470e:	4b99      	ldr	r3, [pc, #612]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004716:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004718:	4b96      	ldr	r3, [pc, #600]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800471a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800471e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004720:	2b10      	cmp	r3, #16
 8004722:	d007      	beq.n	8004734 <HAL_RCC_OscConfig+0x48>
 8004724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004726:	2b18      	cmp	r3, #24
 8004728:	d111      	bne.n	800474e <HAL_RCC_OscConfig+0x62>
 800472a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d10c      	bne.n	800474e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004734:	4b8f      	ldr	r3, [pc, #572]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d06d      	beq.n	800481c <HAL_RCC_OscConfig+0x130>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d169      	bne.n	800481c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	f000 bc21 	b.w	8004f90 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004756:	d106      	bne.n	8004766 <HAL_RCC_OscConfig+0x7a>
 8004758:	4b86      	ldr	r3, [pc, #536]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a85      	ldr	r2, [pc, #532]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800475e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	e02e      	b.n	80047c4 <HAL_RCC_OscConfig+0xd8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10c      	bne.n	8004788 <HAL_RCC_OscConfig+0x9c>
 800476e:	4b81      	ldr	r3, [pc, #516]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a80      	ldr	r2, [pc, #512]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004774:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	4b7e      	ldr	r3, [pc, #504]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a7d      	ldr	r2, [pc, #500]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004780:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	e01d      	b.n	80047c4 <HAL_RCC_OscConfig+0xd8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004790:	d10c      	bne.n	80047ac <HAL_RCC_OscConfig+0xc0>
 8004792:	4b78      	ldr	r3, [pc, #480]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a77      	ldr	r2, [pc, #476]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004798:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	4b75      	ldr	r3, [pc, #468]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a74      	ldr	r2, [pc, #464]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80047a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e00b      	b.n	80047c4 <HAL_RCC_OscConfig+0xd8>
 80047ac:	4b71      	ldr	r3, [pc, #452]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a70      	ldr	r2, [pc, #448]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80047b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	4b6e      	ldr	r3, [pc, #440]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a6d      	ldr	r2, [pc, #436]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80047be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d013      	beq.n	80047f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fe f95a 	bl	8002a84 <HAL_GetTick>
 80047d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d4:	f7fe f956 	bl	8002a84 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b64      	cmp	r3, #100	@ 0x64
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e3d4      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047e6:	4b63      	ldr	r3, [pc, #396]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0xe8>
 80047f2:	e014      	b.n	800481e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f4:	f7fe f946 	bl	8002a84 <HAL_GetTick>
 80047f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047fc:	f7fe f942 	bl	8002a84 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b64      	cmp	r3, #100	@ 0x64
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e3c0      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800480e:	4b59      	ldr	r3, [pc, #356]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0x110>
 800481a:	e000      	b.n	800481e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 80ca 	beq.w	80049c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800482c:	4b51      	ldr	r3, [pc, #324]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004834:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004836:	4b4f      	ldr	r3, [pc, #316]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <HAL_RCC_OscConfig+0x166>
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	2b18      	cmp	r3, #24
 8004846:	d156      	bne.n	80048f6 <HAL_RCC_OscConfig+0x20a>
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d151      	bne.n	80048f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004852:	4b48      	ldr	r3, [pc, #288]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <HAL_RCC_OscConfig+0x17e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e392      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800486a:	4b42      	ldr	r3, [pc, #264]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 0219 	bic.w	r2, r3, #25
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	493f      	ldr	r1, [pc, #252]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004878:	4313      	orrs	r3, r2
 800487a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7fe f902 	bl	8002a84 <HAL_GetTick>
 8004880:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004884:	f7fe f8fe 	bl	8002a84 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e37c      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004896:	4b37      	ldr	r3, [pc, #220]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f0      	beq.n	8004884 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a2:	f7fe f91f 	bl	8002ae4 <HAL_GetREVID>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d817      	bhi.n	80048e0 <HAL_RCC_OscConfig+0x1f4>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b40      	cmp	r3, #64	@ 0x40
 80048b6:	d108      	bne.n	80048ca <HAL_RCC_OscConfig+0x1de>
 80048b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80048c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80048c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048c8:	e07a      	b.n	80049c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	031b      	lsls	r3, r3, #12
 80048d8:	4926      	ldr	r1, [pc, #152]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048de:	e06f      	b.n	80049c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e0:	4b24      	ldr	r3, [pc, #144]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	061b      	lsls	r3, r3, #24
 80048ee:	4921      	ldr	r1, [pc, #132]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048f4:	e064      	b.n	80049c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d047      	beq.n	800498e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f023 0219 	bic.w	r2, r3, #25
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	491a      	ldr	r1, [pc, #104]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800490c:	4313      	orrs	r3, r2
 800490e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fe f8b8 	bl	8002a84 <HAL_GetTick>
 8004914:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004918:	f7fe f8b4 	bl	8002a84 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e332      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800492a:	4b12      	ldr	r3, [pc, #72]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0f0      	beq.n	8004918 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004936:	f7fe f8d5 	bl	8002ae4 <HAL_GetREVID>
 800493a:	4603      	mov	r3, r0
 800493c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004940:	4293      	cmp	r3, r2
 8004942:	d819      	bhi.n	8004978 <HAL_RCC_OscConfig+0x28c>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2b40      	cmp	r3, #64	@ 0x40
 800494a:	d108      	bne.n	800495e <HAL_RCC_OscConfig+0x272>
 800494c:	4b09      	ldr	r3, [pc, #36]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004954:	4a07      	ldr	r2, [pc, #28]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800495a:	6053      	str	r3, [r2, #4]
 800495c:	e030      	b.n	80049c0 <HAL_RCC_OscConfig+0x2d4>
 800495e:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	031b      	lsls	r3, r3, #12
 800496c:	4901      	ldr	r1, [pc, #4]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800496e:	4313      	orrs	r3, r2
 8004970:	604b      	str	r3, [r1, #4]
 8004972:	e025      	b.n	80049c0 <HAL_RCC_OscConfig+0x2d4>
 8004974:	58024400 	.word	0x58024400
 8004978:	4b9a      	ldr	r3, [pc, #616]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	061b      	lsls	r3, r3, #24
 8004986:	4997      	ldr	r1, [pc, #604]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004988:	4313      	orrs	r3, r2
 800498a:	604b      	str	r3, [r1, #4]
 800498c:	e018      	b.n	80049c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800498e:	4b95      	ldr	r3, [pc, #596]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a94      	ldr	r2, [pc, #592]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499a:	f7fe f873 	bl	8002a84 <HAL_GetTick>
 800499e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049a2:	f7fe f86f 	bl	8002a84 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e2ed      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049b4:	4b8b      	ldr	r3, [pc, #556]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f0      	bne.n	80049a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 80a9 	beq.w	8004b20 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ce:	4b85      	ldr	r3, [pc, #532]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049d8:	4b82      	ldr	r3, [pc, #520]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d007      	beq.n	80049f4 <HAL_RCC_OscConfig+0x308>
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	2b18      	cmp	r3, #24
 80049e8:	d13a      	bne.n	8004a60 <HAL_RCC_OscConfig+0x374>
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d135      	bne.n	8004a60 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049f4:	4b7b      	ldr	r3, [pc, #492]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <HAL_RCC_OscConfig+0x320>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	2b80      	cmp	r3, #128	@ 0x80
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e2c1      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a0c:	f7fe f86a 	bl	8002ae4 <HAL_GetREVID>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d817      	bhi.n	8004a4a <HAL_RCC_OscConfig+0x35e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d108      	bne.n	8004a34 <HAL_RCC_OscConfig+0x348>
 8004a22:	4b70      	ldr	r3, [pc, #448]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004a2a:	4a6e      	ldr	r2, [pc, #440]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004a2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a30:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a32:	e075      	b.n	8004b20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a34:	4b6b      	ldr	r3, [pc, #428]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	069b      	lsls	r3, r3, #26
 8004a42:	4968      	ldr	r1, [pc, #416]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a48:	e06a      	b.n	8004b20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a4a:	4b66      	ldr	r3, [pc, #408]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	4962      	ldr	r1, [pc, #392]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a5e:	e05f      	b.n	8004b20 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d042      	beq.n	8004aee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004a68:	4b5e      	ldr	r3, [pc, #376]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a5d      	ldr	r2, [pc, #372]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a74:	f7fe f806 	bl	8002a84 <HAL_GetTick>
 8004a78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a7c:	f7fe f802 	bl	8002a84 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e280      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a8e:	4b55      	ldr	r3, [pc, #340]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a9a:	f7fe f823 	bl	8002ae4 <HAL_GetREVID>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d817      	bhi.n	8004ad8 <HAL_RCC_OscConfig+0x3ec>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d108      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x3d6>
 8004ab0:	4b4c      	ldr	r3, [pc, #304]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004ab8:	4a4a      	ldr	r2, [pc, #296]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004aba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004abe:	6053      	str	r3, [r2, #4]
 8004ac0:	e02e      	b.n	8004b20 <HAL_RCC_OscConfig+0x434>
 8004ac2:	4b48      	ldr	r3, [pc, #288]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	069b      	lsls	r3, r3, #26
 8004ad0:	4944      	ldr	r1, [pc, #272]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	604b      	str	r3, [r1, #4]
 8004ad6:	e023      	b.n	8004b20 <HAL_RCC_OscConfig+0x434>
 8004ad8:	4b42      	ldr	r3, [pc, #264]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	061b      	lsls	r3, r3, #24
 8004ae6:	493f      	ldr	r1, [pc, #252]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60cb      	str	r3, [r1, #12]
 8004aec:	e018      	b.n	8004b20 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004aee:	4b3d      	ldr	r3, [pc, #244]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a3c      	ldr	r2, [pc, #240]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004af4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afa:	f7fd ffc3 	bl	8002a84 <HAL_GetTick>
 8004afe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b02:	f7fd ffbf 	bl	8002a84 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e23d      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b14:	4b33      	ldr	r3, [pc, #204]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1f0      	bne.n	8004b02 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d036      	beq.n	8004b9a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d019      	beq.n	8004b68 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b34:	4b2b      	ldr	r3, [pc, #172]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b38:	4a2a      	ldr	r2, [pc, #168]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b40:	f7fd ffa0 	bl	8002a84 <HAL_GetTick>
 8004b44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b48:	f7fd ff9c 	bl	8002a84 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e21a      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b5a:	4b22      	ldr	r3, [pc, #136]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCC_OscConfig+0x45c>
 8004b66:	e018      	b.n	8004b9a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b68:	4b1e      	ldr	r3, [pc, #120]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004b6e:	f023 0301 	bic.w	r3, r3, #1
 8004b72:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b74:	f7fd ff86 	bl	8002a84 <HAL_GetTick>
 8004b78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b7c:	f7fd ff82 	bl	8002a84 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e200      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b8e:	4b15      	ldr	r3, [pc, #84]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f0      	bne.n	8004b7c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d039      	beq.n	8004c1a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01c      	beq.n	8004be8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bae:	4b0d      	ldr	r3, [pc, #52]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004bb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004bb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004bba:	f7fd ff63 	bl	8002a84 <HAL_GetTick>
 8004bbe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bc2:	f7fd ff5f 	bl	8002a84 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e1dd      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004bd4:	4b03      	ldr	r3, [pc, #12]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x4d6>
 8004be0:	e01b      	b.n	8004c1a <HAL_RCC_OscConfig+0x52e>
 8004be2:	bf00      	nop
 8004be4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004be8:	4b9b      	ldr	r3, [pc, #620]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a9a      	ldr	r2, [pc, #616]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004bee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bf2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004bf4:	f7fd ff46 	bl	8002a84 <HAL_GetTick>
 8004bf8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bfc:	f7fd ff42 	bl	8002a84 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e1c0      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c0e:	4b92      	ldr	r3, [pc, #584]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 8081 	beq.w	8004d2a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c28:	4b8c      	ldr	r3, [pc, #560]	@ (8004e5c <HAL_RCC_OscConfig+0x770>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a8b      	ldr	r2, [pc, #556]	@ (8004e5c <HAL_RCC_OscConfig+0x770>)
 8004c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c34:	f7fd ff26 	bl	8002a84 <HAL_GetTick>
 8004c38:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3c:	f7fd ff22 	bl	8002a84 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b64      	cmp	r3, #100	@ 0x64
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e1a0      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c4e:	4b83      	ldr	r3, [pc, #524]	@ (8004e5c <HAL_RCC_OscConfig+0x770>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f0      	beq.n	8004c3c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d106      	bne.n	8004c70 <HAL_RCC_OscConfig+0x584>
 8004c62:	4b7d      	ldr	r3, [pc, #500]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c66:	4a7c      	ldr	r2, [pc, #496]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004c68:	f043 0301 	orr.w	r3, r3, #1
 8004c6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c6e:	e02d      	b.n	8004ccc <HAL_RCC_OscConfig+0x5e0>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10c      	bne.n	8004c92 <HAL_RCC_OscConfig+0x5a6>
 8004c78:	4b77      	ldr	r3, [pc, #476]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7c:	4a76      	ldr	r2, [pc, #472]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c84:	4b74      	ldr	r3, [pc, #464]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c88:	4a73      	ldr	r2, [pc, #460]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004c8a:	f023 0304 	bic.w	r3, r3, #4
 8004c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c90:	e01c      	b.n	8004ccc <HAL_RCC_OscConfig+0x5e0>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b05      	cmp	r3, #5
 8004c98:	d10c      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x5c8>
 8004c9a:	4b6f      	ldr	r3, [pc, #444]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c9e:	4a6e      	ldr	r2, [pc, #440]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004ca0:	f043 0304 	orr.w	r3, r3, #4
 8004ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004caa:	4a6b      	ldr	r2, [pc, #428]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cb2:	e00b      	b.n	8004ccc <HAL_RCC_OscConfig+0x5e0>
 8004cb4:	4b68      	ldr	r3, [pc, #416]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb8:	4a67      	ldr	r2, [pc, #412]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cc0:	4b65      	ldr	r3, [pc, #404]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc4:	4a64      	ldr	r2, [pc, #400]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004cc6:	f023 0304 	bic.w	r3, r3, #4
 8004cca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d015      	beq.n	8004d00 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd4:	f7fd fed6 	bl	8002a84 <HAL_GetTick>
 8004cd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cda:	e00a      	b.n	8004cf2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cdc:	f7fd fed2 	bl	8002a84 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e14e      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cf2:	4b59      	ldr	r3, [pc, #356]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0ee      	beq.n	8004cdc <HAL_RCC_OscConfig+0x5f0>
 8004cfe:	e014      	b.n	8004d2a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d00:	f7fd fec0 	bl	8002a84 <HAL_GetTick>
 8004d04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d06:	e00a      	b.n	8004d1e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d08:	f7fd febc 	bl	8002a84 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e138      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d1e:	4b4e      	ldr	r3, [pc, #312]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1ee      	bne.n	8004d08 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 812d 	beq.w	8004f8e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004d34:	4b48      	ldr	r3, [pc, #288]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d3c:	2b18      	cmp	r3, #24
 8004d3e:	f000 80bd 	beq.w	8004ebc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	f040 809e 	bne.w	8004e88 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d4c:	4b42      	ldr	r3, [pc, #264]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a41      	ldr	r2, [pc, #260]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fd fe94 	bl	8002a84 <HAL_GetTick>
 8004d5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d60:	f7fd fe90 	bl	8002a84 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e10e      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d72:	4b39      	ldr	r3, [pc, #228]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d7e:	4b36      	ldr	r3, [pc, #216]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004d80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d82:	4b37      	ldr	r3, [pc, #220]	@ (8004e60 <HAL_RCC_OscConfig+0x774>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d8e:	0112      	lsls	r2, r2, #4
 8004d90:	430a      	orrs	r2, r1
 8004d92:	4931      	ldr	r1, [pc, #196]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da6:	3b01      	subs	r3, #1
 8004da8:	025b      	lsls	r3, r3, #9
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db2:	3b01      	subs	r3, #1
 8004db4:	041b      	lsls	r3, r3, #16
 8004db6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	061b      	lsls	r3, r3, #24
 8004dc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004dc8:	4923      	ldr	r1, [pc, #140]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004dce:	4b22      	ldr	r3, [pc, #136]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd2:	4a21      	ldr	r2, [pc, #132]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004dd4:	f023 0301 	bic.w	r3, r3, #1
 8004dd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004dda:	4b1f      	ldr	r3, [pc, #124]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dde:	4b21      	ldr	r3, [pc, #132]	@ (8004e64 <HAL_RCC_OscConfig+0x778>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004de6:	00d2      	lsls	r2, r2, #3
 8004de8:	491b      	ldr	r1, [pc, #108]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004dee:	4b1a      	ldr	r3, [pc, #104]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df2:	f023 020c 	bic.w	r2, r3, #12
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfa:	4917      	ldr	r1, [pc, #92]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004e00:	4b15      	ldr	r3, [pc, #84]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e04:	f023 0202 	bic.w	r2, r3, #2
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0c:	4912      	ldr	r1, [pc, #72]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e12:	4b11      	ldr	r3, [pc, #68]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e16:	4a10      	ldr	r2, [pc, #64]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e22:	4a0d      	ldr	r2, [pc, #52]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004e36:	4b08      	ldr	r3, [pc, #32]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3a:	4a07      	ldr	r2, [pc, #28]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e42:	4b05      	ldr	r3, [pc, #20]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a04      	ldr	r2, [pc, #16]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4e:	f7fd fe19 	bl	8002a84 <HAL_GetTick>
 8004e52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e54:	e011      	b.n	8004e7a <HAL_RCC_OscConfig+0x78e>
 8004e56:	bf00      	nop
 8004e58:	58024400 	.word	0x58024400
 8004e5c:	58024800 	.word	0x58024800
 8004e60:	fffffc0c 	.word	0xfffffc0c
 8004e64:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e68:	f7fd fe0c 	bl	8002a84 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e08a      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e7a:	4b47      	ldr	r3, [pc, #284]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0x77c>
 8004e86:	e082      	b.n	8004f8e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e88:	4b43      	ldr	r3, [pc, #268]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a42      	ldr	r2, [pc, #264]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004e8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e94:	f7fd fdf6 	bl	8002a84 <HAL_GetTick>
 8004e98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e9c:	f7fd fdf2 	bl	8002a84 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e070      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eae:	4b3a      	ldr	r3, [pc, #232]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0x7b0>
 8004eba:	e068      	b.n	8004f8e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ebc:	4b36      	ldr	r3, [pc, #216]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ec2:	4b35      	ldr	r3, [pc, #212]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d031      	beq.n	8004f34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f003 0203 	and.w	r2, r3, #3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d12a      	bne.n	8004f34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	091b      	lsrs	r3, r3, #4
 8004ee2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d122      	bne.n	8004f34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d11a      	bne.n	8004f34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	0a5b      	lsrs	r3, r3, #9
 8004f02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f0a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d111      	bne.n	8004f34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	0c1b      	lsrs	r3, r3, #16
 8004f14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d108      	bne.n	8004f34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	0e1b      	lsrs	r3, r3, #24
 8004f26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e02b      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004f38:	4b17      	ldr	r3, [pc, #92]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3c:	08db      	lsrs	r3, r3, #3
 8004f3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f42:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d01f      	beq.n	8004f8e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004f4e:	4b12      	ldr	r3, [pc, #72]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f52:	4a11      	ldr	r2, [pc, #68]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004f54:	f023 0301 	bic.w	r3, r3, #1
 8004f58:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f5a:	f7fd fd93 	bl	8002a84 <HAL_GetTick>
 8004f5e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004f60:	bf00      	nop
 8004f62:	f7fd fd8f 	bl	8002a84 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d0f9      	beq.n	8004f62 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004f70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f72:	4b0a      	ldr	r3, [pc, #40]	@ (8004f9c <HAL_RCC_OscConfig+0x8b0>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f7a:	00d2      	lsls	r2, r2, #3
 8004f7c:	4906      	ldr	r1, [pc, #24]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004f82:	4b05      	ldr	r3, [pc, #20]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f86:	4a04      	ldr	r2, [pc, #16]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004f88:	f043 0301 	orr.w	r3, r3, #1
 8004f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3730      	adds	r7, #48	@ 0x30
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	58024400 	.word	0x58024400
 8004f9c:	ffff0007 	.word	0xffff0007

08004fa0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e19c      	b.n	80052ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb4:	4b8a      	ldr	r3, [pc, #552]	@ (80051e0 <HAL_RCC_ClockConfig+0x240>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d910      	bls.n	8004fe4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc2:	4b87      	ldr	r3, [pc, #540]	@ (80051e0 <HAL_RCC_ClockConfig+0x240>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f023 020f 	bic.w	r2, r3, #15
 8004fca:	4985      	ldr	r1, [pc, #532]	@ (80051e0 <HAL_RCC_ClockConfig+0x240>)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd2:	4b83      	ldr	r3, [pc, #524]	@ (80051e0 <HAL_RCC_ClockConfig+0x240>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d001      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e184      	b.n	80052ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d010      	beq.n	8005012 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	4b7b      	ldr	r3, [pc, #492]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d908      	bls.n	8005012 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005000:	4b78      	ldr	r3, [pc, #480]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	4975      	ldr	r1, [pc, #468]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 800500e:	4313      	orrs	r3, r2
 8005010:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	2b00      	cmp	r3, #0
 800501c:	d010      	beq.n	8005040 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695a      	ldr	r2, [r3, #20]
 8005022:	4b70      	ldr	r3, [pc, #448]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800502a:	429a      	cmp	r2, r3
 800502c:	d908      	bls.n	8005040 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800502e:	4b6d      	ldr	r3, [pc, #436]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	496a      	ldr	r1, [pc, #424]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 800503c:	4313      	orrs	r3, r2
 800503e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b00      	cmp	r3, #0
 800504a:	d010      	beq.n	800506e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699a      	ldr	r2, [r3, #24]
 8005050:	4b64      	ldr	r3, [pc, #400]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005058:	429a      	cmp	r2, r3
 800505a:	d908      	bls.n	800506e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800505c:	4b61      	ldr	r3, [pc, #388]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	495e      	ldr	r1, [pc, #376]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 800506a:	4313      	orrs	r3, r2
 800506c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b00      	cmp	r3, #0
 8005078:	d010      	beq.n	800509c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69da      	ldr	r2, [r3, #28]
 800507e:	4b59      	ldr	r3, [pc, #356]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005086:	429a      	cmp	r2, r3
 8005088:	d908      	bls.n	800509c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800508a:	4b56      	ldr	r3, [pc, #344]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	4953      	ldr	r1, [pc, #332]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005098:	4313      	orrs	r3, r2
 800509a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d010      	beq.n	80050ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	4b4d      	ldr	r3, [pc, #308]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d908      	bls.n	80050ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b8:	4b4a      	ldr	r3, [pc, #296]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	f023 020f 	bic.w	r2, r3, #15
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4947      	ldr	r1, [pc, #284]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d055      	beq.n	8005182 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80050d6:	4b43      	ldr	r3, [pc, #268]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	4940      	ldr	r1, [pc, #256]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d107      	bne.n	8005100 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050f0:	4b3c      	ldr	r3, [pc, #240]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d121      	bne.n	8005140 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0f6      	b.n	80052ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b03      	cmp	r3, #3
 8005106:	d107      	bne.n	8005118 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005108:	4b36      	ldr	r3, [pc, #216]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d115      	bne.n	8005140 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e0ea      	b.n	80052ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d107      	bne.n	8005130 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005120:	4b30      	ldr	r3, [pc, #192]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005128:	2b00      	cmp	r3, #0
 800512a:	d109      	bne.n	8005140 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0de      	b.n	80052ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005130:	4b2c      	ldr	r3, [pc, #176]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0d6      	b.n	80052ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005140:	4b28      	ldr	r3, [pc, #160]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f023 0207 	bic.w	r2, r3, #7
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	4925      	ldr	r1, [pc, #148]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 800514e:	4313      	orrs	r3, r2
 8005150:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005152:	f7fd fc97 	bl	8002a84 <HAL_GetTick>
 8005156:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005158:	e00a      	b.n	8005170 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800515a:	f7fd fc93 	bl	8002a84 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005168:	4293      	cmp	r3, r2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e0be      	b.n	80052ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005170:	4b1c      	ldr	r3, [pc, #112]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	429a      	cmp	r2, r3
 8005180:	d1eb      	bne.n	800515a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d010      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	4b14      	ldr	r3, [pc, #80]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	429a      	cmp	r2, r3
 800519c:	d208      	bcs.n	80051b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800519e:	4b11      	ldr	r3, [pc, #68]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f023 020f 	bic.w	r2, r3, #15
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	490e      	ldr	r1, [pc, #56]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051b0:	4b0b      	ldr	r3, [pc, #44]	@ (80051e0 <HAL_RCC_ClockConfig+0x240>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d214      	bcs.n	80051e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b08      	ldr	r3, [pc, #32]	@ (80051e0 <HAL_RCC_ClockConfig+0x240>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f023 020f 	bic.w	r2, r3, #15
 80051c6:	4906      	ldr	r1, [pc, #24]	@ (80051e0 <HAL_RCC_ClockConfig+0x240>)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ce:	4b04      	ldr	r3, [pc, #16]	@ (80051e0 <HAL_RCC_ClockConfig+0x240>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d005      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e086      	b.n	80052ee <HAL_RCC_ClockConfig+0x34e>
 80051e0:	52002000 	.word	0x52002000
 80051e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d010      	beq.n	8005216 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	4b3f      	ldr	r3, [pc, #252]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005200:	429a      	cmp	r2, r3
 8005202:	d208      	bcs.n	8005216 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005204:	4b3c      	ldr	r3, [pc, #240]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	4939      	ldr	r1, [pc, #228]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 8005212:	4313      	orrs	r3, r2
 8005214:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d010      	beq.n	8005244 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695a      	ldr	r2, [r3, #20]
 8005226:	4b34      	ldr	r3, [pc, #208]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800522e:	429a      	cmp	r2, r3
 8005230:	d208      	bcs.n	8005244 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005232:	4b31      	ldr	r3, [pc, #196]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	492e      	ldr	r1, [pc, #184]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 8005240:	4313      	orrs	r3, r2
 8005242:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b00      	cmp	r3, #0
 800524e:	d010      	beq.n	8005272 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	699a      	ldr	r2, [r3, #24]
 8005254:	4b28      	ldr	r3, [pc, #160]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800525c:	429a      	cmp	r2, r3
 800525e:	d208      	bcs.n	8005272 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005260:	4b25      	ldr	r3, [pc, #148]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	4922      	ldr	r1, [pc, #136]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 800526e:	4313      	orrs	r3, r2
 8005270:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d010      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69da      	ldr	r2, [r3, #28]
 8005282:	4b1d      	ldr	r3, [pc, #116]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800528a:	429a      	cmp	r2, r3
 800528c:	d208      	bcs.n	80052a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800528e:	4b1a      	ldr	r3, [pc, #104]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	4917      	ldr	r1, [pc, #92]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 800529c:	4313      	orrs	r3, r2
 800529e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80052a0:	f000 f89e 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b14      	ldr	r3, [pc, #80]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	4912      	ldr	r1, [pc, #72]	@ (80052fc <HAL_RCC_ClockConfig+0x35c>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	fa22 f303 	lsr.w	r3, r2, r3
 80052bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052be:	4b0e      	ldr	r3, [pc, #56]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	4a0d      	ldr	r2, [pc, #52]	@ (80052fc <HAL_RCC_ClockConfig+0x35c>)
 80052c8:	5cd3      	ldrb	r3, [r2, r3]
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	fa22 f303 	lsr.w	r3, r2, r3
 80052d4:	4a0a      	ldr	r2, [pc, #40]	@ (8005300 <HAL_RCC_ClockConfig+0x360>)
 80052d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052d8:	4a0a      	ldr	r2, [pc, #40]	@ (8005304 <HAL_RCC_ClockConfig+0x364>)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80052de:	4b0a      	ldr	r3, [pc, #40]	@ (8005308 <HAL_RCC_ClockConfig+0x368>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fd fb84 	bl	80029f0 <HAL_InitTick>
 80052e8:	4603      	mov	r3, r0
 80052ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	58024400 	.word	0x58024400
 80052fc:	0800b438 	.word	0x0800b438
 8005300:	24000004 	.word	0x24000004
 8005304:	24000000 	.word	0x24000000
 8005308:	24002010 	.word	0x24002010

0800530c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08c      	sub	sp, #48	@ 0x30
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d12a      	bne.n	8005374 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800531e:	4b2d      	ldr	r3, [pc, #180]	@ (80053d4 <HAL_RCC_MCOConfig+0xc8>)
 8005320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005324:	4a2b      	ldr	r2, [pc, #172]	@ (80053d4 <HAL_RCC_MCOConfig+0xc8>)
 8005326:	f043 0301 	orr.w	r3, r3, #1
 800532a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800532e:	4b29      	ldr	r3, [pc, #164]	@ (80053d4 <HAL_RCC_MCOConfig+0xc8>)
 8005330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	61bb      	str	r3, [r7, #24]
 800533a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800533c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005342:	2302      	movs	r3, #2
 8005344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005346:	2303      	movs	r3, #3
 8005348:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800534a:	2300      	movs	r3, #0
 800534c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800534e:	2300      	movs	r3, #0
 8005350:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005352:	f107 031c 	add.w	r3, r7, #28
 8005356:	4619      	mov	r1, r3
 8005358:	481f      	ldr	r0, [pc, #124]	@ (80053d8 <HAL_RCC_MCOConfig+0xcc>)
 800535a:	f7fd fcdf 	bl	8002d1c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800535e:	4b1d      	ldr	r3, [pc, #116]	@ (80053d4 <HAL_RCC_MCOConfig+0xc8>)
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	430b      	orrs	r3, r1
 800536c:	4919      	ldr	r1, [pc, #100]	@ (80053d4 <HAL_RCC_MCOConfig+0xc8>)
 800536e:	4313      	orrs	r3, r2
 8005370:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005372:	e02a      	b.n	80053ca <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005374:	4b17      	ldr	r3, [pc, #92]	@ (80053d4 <HAL_RCC_MCOConfig+0xc8>)
 8005376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800537a:	4a16      	ldr	r2, [pc, #88]	@ (80053d4 <HAL_RCC_MCOConfig+0xc8>)
 800537c:	f043 0304 	orr.w	r3, r3, #4
 8005380:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005384:	4b13      	ldr	r3, [pc, #76]	@ (80053d4 <HAL_RCC_MCOConfig+0xc8>)
 8005386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005392:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005398:	2302      	movs	r3, #2
 800539a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800539c:	2303      	movs	r3, #3
 800539e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80053a4:	2300      	movs	r3, #0
 80053a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80053a8:	f107 031c 	add.w	r3, r7, #28
 80053ac:	4619      	mov	r1, r3
 80053ae:	480b      	ldr	r0, [pc, #44]	@ (80053dc <HAL_RCC_MCOConfig+0xd0>)
 80053b0:	f7fd fcb4 	bl	8002d1c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80053b4:	4b07      	ldr	r3, [pc, #28]	@ (80053d4 <HAL_RCC_MCOConfig+0xc8>)
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	01d9      	lsls	r1, r3, #7
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	430b      	orrs	r3, r1
 80053c4:	4903      	ldr	r1, [pc, #12]	@ (80053d4 <HAL_RCC_MCOConfig+0xc8>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	610b      	str	r3, [r1, #16]
}
 80053ca:	bf00      	nop
 80053cc:	3730      	adds	r7, #48	@ 0x30
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	58024400 	.word	0x58024400
 80053d8:	58020000 	.word	0x58020000
 80053dc:	58020800 	.word	0x58020800

080053e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b089      	sub	sp, #36	@ 0x24
 80053e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053e6:	4bb3      	ldr	r3, [pc, #716]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053ee:	2b18      	cmp	r3, #24
 80053f0:	f200 8155 	bhi.w	800569e <HAL_RCC_GetSysClockFreq+0x2be>
 80053f4:	a201      	add	r2, pc, #4	@ (adr r2, 80053fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80053f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fa:	bf00      	nop
 80053fc:	08005461 	.word	0x08005461
 8005400:	0800569f 	.word	0x0800569f
 8005404:	0800569f 	.word	0x0800569f
 8005408:	0800569f 	.word	0x0800569f
 800540c:	0800569f 	.word	0x0800569f
 8005410:	0800569f 	.word	0x0800569f
 8005414:	0800569f 	.word	0x0800569f
 8005418:	0800569f 	.word	0x0800569f
 800541c:	08005487 	.word	0x08005487
 8005420:	0800569f 	.word	0x0800569f
 8005424:	0800569f 	.word	0x0800569f
 8005428:	0800569f 	.word	0x0800569f
 800542c:	0800569f 	.word	0x0800569f
 8005430:	0800569f 	.word	0x0800569f
 8005434:	0800569f 	.word	0x0800569f
 8005438:	0800569f 	.word	0x0800569f
 800543c:	0800548d 	.word	0x0800548d
 8005440:	0800569f 	.word	0x0800569f
 8005444:	0800569f 	.word	0x0800569f
 8005448:	0800569f 	.word	0x0800569f
 800544c:	0800569f 	.word	0x0800569f
 8005450:	0800569f 	.word	0x0800569f
 8005454:	0800569f 	.word	0x0800569f
 8005458:	0800569f 	.word	0x0800569f
 800545c:	08005493 	.word	0x08005493
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005460:	4b94      	ldr	r3, [pc, #592]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0320 	and.w	r3, r3, #32
 8005468:	2b00      	cmp	r3, #0
 800546a:	d009      	beq.n	8005480 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800546c:	4b91      	ldr	r3, [pc, #580]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	08db      	lsrs	r3, r3, #3
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	4a90      	ldr	r2, [pc, #576]	@ (80056b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005478:	fa22 f303 	lsr.w	r3, r2, r3
 800547c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800547e:	e111      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005480:	4b8d      	ldr	r3, [pc, #564]	@ (80056b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005482:	61bb      	str	r3, [r7, #24]
      break;
 8005484:	e10e      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005486:	4b8d      	ldr	r3, [pc, #564]	@ (80056bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005488:	61bb      	str	r3, [r7, #24]
      break;
 800548a:	e10b      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800548c:	4b8c      	ldr	r3, [pc, #560]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800548e:	61bb      	str	r3, [r7, #24]
      break;
 8005490:	e108      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005492:	4b88      	ldr	r3, [pc, #544]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800549c:	4b85      	ldr	r3, [pc, #532]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800549e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80054a8:	4b82      	ldr	r3, [pc, #520]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80054b2:	4b80      	ldr	r3, [pc, #512]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b6:	08db      	lsrs	r3, r3, #3
 80054b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	fb02 f303 	mul.w	r3, r2, r3
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 80e1 	beq.w	8005698 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b02      	cmp	r3, #2
 80054da:	f000 8083 	beq.w	80055e4 <HAL_RCC_GetSysClockFreq+0x204>
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	f200 80a1 	bhi.w	8005628 <HAL_RCC_GetSysClockFreq+0x248>
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HAL_RCC_GetSysClockFreq+0x114>
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d056      	beq.n	80055a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80054f2:	e099      	b.n	8005628 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054f4:	4b6f      	ldr	r3, [pc, #444]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d02d      	beq.n	800555c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005500:	4b6c      	ldr	r3, [pc, #432]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	08db      	lsrs	r3, r3, #3
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	4a6b      	ldr	r2, [pc, #428]	@ (80056b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
 8005510:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	ee07 3a90 	vmov	s15, r3
 8005518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800552a:	4b62      	ldr	r3, [pc, #392]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800552c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553a:	ed97 6a02 	vldr	s12, [r7, #8]
 800553e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80056c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800554e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005556:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800555a:	e087      	b.n	800566c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005566:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80056c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800556a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800556e:	4b51      	ldr	r3, [pc, #324]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800557e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005582:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80056c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800558a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800558e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800559e:	e065      	b.n	800566c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055aa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80056cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80055ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055b2:	4b40      	ldr	r3, [pc, #256]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ba:	ee07 3a90 	vmov	s15, r3
 80055be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80055c6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80056c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055e2:	e043      	b.n	800566c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	ee07 3a90 	vmov	s15, r3
 80055ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80056d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80055f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055f6:	4b2f      	ldr	r3, [pc, #188]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005606:	ed97 6a02 	vldr	s12, [r7, #8]
 800560a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80056c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800560e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800561a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800561e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005622:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005626:	e021      	b.n	800566c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80056cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800563a:	4b1e      	ldr	r3, [pc, #120]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800563c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800564a:	ed97 6a02 	vldr	s12, [r7, #8]
 800564e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80056c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800565a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800565e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005666:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800566a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800566c:	4b11      	ldr	r3, [pc, #68]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800566e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005670:	0a5b      	lsrs	r3, r3, #9
 8005672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005676:	3301      	adds	r3, #1
 8005678:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005684:	edd7 6a07 	vldr	s13, [r7, #28]
 8005688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800568c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005690:	ee17 3a90 	vmov	r3, s15
 8005694:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005696:	e005      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	61bb      	str	r3, [r7, #24]
      break;
 800569c:	e002      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800569e:	4b07      	ldr	r3, [pc, #28]	@ (80056bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056a0:	61bb      	str	r3, [r7, #24]
      break;
 80056a2:	bf00      	nop
  }

  return sysclockfreq;
 80056a4:	69bb      	ldr	r3, [r7, #24]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3724      	adds	r7, #36	@ 0x24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	58024400 	.word	0x58024400
 80056b8:	03d09000 	.word	0x03d09000
 80056bc:	003d0900 	.word	0x003d0900
 80056c0:	017d7840 	.word	0x017d7840
 80056c4:	46000000 	.word	0x46000000
 80056c8:	4c742400 	.word	0x4c742400
 80056cc:	4a742400 	.word	0x4a742400
 80056d0:	4bbebc20 	.word	0x4bbebc20

080056d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80056da:	f7ff fe81 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 80056de:	4602      	mov	r2, r0
 80056e0:	4b10      	ldr	r3, [pc, #64]	@ (8005724 <HAL_RCC_GetHCLKFreq+0x50>)
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	0a1b      	lsrs	r3, r3, #8
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	490f      	ldr	r1, [pc, #60]	@ (8005728 <HAL_RCC_GetHCLKFreq+0x54>)
 80056ec:	5ccb      	ldrb	r3, [r1, r3]
 80056ee:	f003 031f 	and.w	r3, r3, #31
 80056f2:	fa22 f303 	lsr.w	r3, r2, r3
 80056f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005724 <HAL_RCC_GetHCLKFreq+0x50>)
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	4a09      	ldr	r2, [pc, #36]	@ (8005728 <HAL_RCC_GetHCLKFreq+0x54>)
 8005702:	5cd3      	ldrb	r3, [r2, r3]
 8005704:	f003 031f 	and.w	r3, r3, #31
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	fa22 f303 	lsr.w	r3, r2, r3
 800570e:	4a07      	ldr	r2, [pc, #28]	@ (800572c <HAL_RCC_GetHCLKFreq+0x58>)
 8005710:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005712:	4a07      	ldr	r2, [pc, #28]	@ (8005730 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005718:	4b04      	ldr	r3, [pc, #16]	@ (800572c <HAL_RCC_GetHCLKFreq+0x58>)
 800571a:	681b      	ldr	r3, [r3, #0]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	58024400 	.word	0x58024400
 8005728:	0800b438 	.word	0x0800b438
 800572c:	24000004 	.word	0x24000004
 8005730:	24000000 	.word	0x24000000

08005734 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005738:	b0cc      	sub	sp, #304	@ 0x130
 800573a:	af00      	add	r7, sp, #0
 800573c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005740:	2300      	movs	r3, #0
 8005742:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005746:	2300      	movs	r3, #0
 8005748:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800574c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005758:	2500      	movs	r5, #0
 800575a:	ea54 0305 	orrs.w	r3, r4, r5
 800575e:	d049      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005760:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005766:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800576a:	d02f      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800576c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005770:	d828      	bhi.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005772:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005776:	d01a      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005778:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800577c:	d822      	bhi.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005782:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005786:	d007      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005788:	e01c      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800578a:	4bb8      	ldr	r3, [pc, #736]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800578c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578e:	4ab7      	ldr	r2, [pc, #732]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005794:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005796:	e01a      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005798:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800579c:	3308      	adds	r3, #8
 800579e:	2102      	movs	r1, #2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 fa11 	bl	8006bc8 <RCCEx_PLL2_Config>
 80057a6:	4603      	mov	r3, r0
 80057a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80057ac:	e00f      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057b2:	3328      	adds	r3, #40	@ 0x28
 80057b4:	2102      	movs	r1, #2
 80057b6:	4618      	mov	r0, r3
 80057b8:	f001 fab8 	bl	8006d2c <RCCEx_PLL3_Config>
 80057bc:	4603      	mov	r3, r0
 80057be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80057c2:	e004      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80057ca:	e000      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80057cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80057d6:	4ba5      	ldr	r3, [pc, #660]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80057de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057e4:	4aa1      	ldr	r2, [pc, #644]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057e6:	430b      	orrs	r3, r1
 80057e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80057ea:	e003      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057f0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005800:	f04f 0900 	mov.w	r9, #0
 8005804:	ea58 0309 	orrs.w	r3, r8, r9
 8005808:	d047      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800580a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800580e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005810:	2b04      	cmp	r3, #4
 8005812:	d82a      	bhi.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005814:	a201      	add	r2, pc, #4	@ (adr r2, 800581c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581a:	bf00      	nop
 800581c:	08005831 	.word	0x08005831
 8005820:	0800583f 	.word	0x0800583f
 8005824:	08005855 	.word	0x08005855
 8005828:	08005873 	.word	0x08005873
 800582c:	08005873 	.word	0x08005873
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005830:	4b8e      	ldr	r3, [pc, #568]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005834:	4a8d      	ldr	r2, [pc, #564]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800583a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800583c:	e01a      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800583e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005842:	3308      	adds	r3, #8
 8005844:	2100      	movs	r1, #0
 8005846:	4618      	mov	r0, r3
 8005848:	f001 f9be 	bl	8006bc8 <RCCEx_PLL2_Config>
 800584c:	4603      	mov	r3, r0
 800584e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005852:	e00f      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005854:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005858:	3328      	adds	r3, #40	@ 0x28
 800585a:	2100      	movs	r1, #0
 800585c:	4618      	mov	r0, r3
 800585e:	f001 fa65 	bl	8006d2c <RCCEx_PLL3_Config>
 8005862:	4603      	mov	r3, r0
 8005864:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005868:	e004      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005870:	e000      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005874:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10a      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800587c:	4b7b      	ldr	r3, [pc, #492]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800587e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005880:	f023 0107 	bic.w	r1, r3, #7
 8005884:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800588a:	4a78      	ldr	r2, [pc, #480]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800588c:	430b      	orrs	r3, r1
 800588e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005890:	e003      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005892:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005896:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800589a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80058a6:	f04f 0b00 	mov.w	fp, #0
 80058aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80058ae:	d04c      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80058b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ba:	d030      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80058bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058c0:	d829      	bhi.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80058c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80058c4:	d02d      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80058c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80058c8:	d825      	bhi.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80058ca:	2b80      	cmp	r3, #128	@ 0x80
 80058cc:	d018      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80058ce:	2b80      	cmp	r3, #128	@ 0x80
 80058d0:	d821      	bhi.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80058d6:	2b40      	cmp	r3, #64	@ 0x40
 80058d8:	d007      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80058da:	e01c      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058dc:	4b63      	ldr	r3, [pc, #396]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e0:	4a62      	ldr	r2, [pc, #392]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058e8:	e01c      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058ee:	3308      	adds	r3, #8
 80058f0:	2100      	movs	r1, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	f001 f968 	bl	8006bc8 <RCCEx_PLL2_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058fe:	e011      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005900:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005904:	3328      	adds	r3, #40	@ 0x28
 8005906:	2100      	movs	r1, #0
 8005908:	4618      	mov	r0, r3
 800590a:	f001 fa0f 	bl	8006d2c <RCCEx_PLL3_Config>
 800590e:	4603      	mov	r3, r0
 8005910:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005914:	e006      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800591c:	e002      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800591e:	bf00      	nop
 8005920:	e000      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005924:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10a      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800592c:	4b4f      	ldr	r3, [pc, #316]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800592e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005930:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005934:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800593a:	4a4c      	ldr	r2, [pc, #304]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800593c:	430b      	orrs	r3, r1
 800593e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005940:	e003      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005942:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005946:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800594a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005952:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005956:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800595a:	2300      	movs	r3, #0
 800595c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005960:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005964:	460b      	mov	r3, r1
 8005966:	4313      	orrs	r3, r2
 8005968:	d053      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800596a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800596e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005972:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005976:	d035      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005978:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800597c:	d82e      	bhi.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800597e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005982:	d031      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005984:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005988:	d828      	bhi.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800598a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800598e:	d01a      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005990:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005994:	d822      	bhi.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800599a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800599e:	d007      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80059a0:	e01c      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059a2:	4b32      	ldr	r3, [pc, #200]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a6:	4a31      	ldr	r2, [pc, #196]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059ae:	e01c      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059b4:	3308      	adds	r3, #8
 80059b6:	2100      	movs	r1, #0
 80059b8:	4618      	mov	r0, r3
 80059ba:	f001 f905 	bl	8006bc8 <RCCEx_PLL2_Config>
 80059be:	4603      	mov	r3, r0
 80059c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80059c4:	e011      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059ca:	3328      	adds	r3, #40	@ 0x28
 80059cc:	2100      	movs	r1, #0
 80059ce:	4618      	mov	r0, r3
 80059d0:	f001 f9ac 	bl	8006d2c <RCCEx_PLL3_Config>
 80059d4:	4603      	mov	r3, r0
 80059d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059da:	e006      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80059e2:	e002      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80059e4:	bf00      	nop
 80059e6:	e000      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80059e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10b      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80059f2:	4b1e      	ldr	r3, [pc, #120]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80059fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a02:	4a1a      	ldr	r2, [pc, #104]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a04:	430b      	orrs	r3, r1
 8005a06:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a08:	e003      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a0e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005a1e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005a22:	2300      	movs	r3, #0
 8005a24:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005a28:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	d056      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005a32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a3e:	d038      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005a40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a44:	d831      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a46:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a4a:	d034      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005a4c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a50:	d82b      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a56:	d01d      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005a58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a5c:	d825      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d006      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005a62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a66:	d00a      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005a68:	e01f      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a6a:	bf00      	nop
 8005a6c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a70:	4ba2      	ldr	r3, [pc, #648]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a74:	4aa1      	ldr	r2, [pc, #644]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a7c:	e01c      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a82:	3308      	adds	r3, #8
 8005a84:	2100      	movs	r1, #0
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 f89e 	bl	8006bc8 <RCCEx_PLL2_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a92:	e011      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a98:	3328      	adds	r3, #40	@ 0x28
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 f945 	bl	8006d2c <RCCEx_PLL3_Config>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005aa8:	e006      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ab0:	e002      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005ab2:	bf00      	nop
 8005ab4:	e000      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ab8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10b      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ac0:	4b8e      	ldr	r3, [pc, #568]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005ac8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005acc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ad0:	4a8a      	ldr	r2, [pc, #552]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ad6:	e003      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005adc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ae0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005aec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005af0:	2300      	movs	r3, #0
 8005af2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005af6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005afa:	460b      	mov	r3, r1
 8005afc:	4313      	orrs	r3, r2
 8005afe:	d03a      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005b00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b06:	2b30      	cmp	r3, #48	@ 0x30
 8005b08:	d01f      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005b0a:	2b30      	cmp	r3, #48	@ 0x30
 8005b0c:	d819      	bhi.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	d00c      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d815      	bhi.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d019      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005b1a:	2b10      	cmp	r3, #16
 8005b1c:	d111      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b1e:	4b77      	ldr	r3, [pc, #476]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b22:	4a76      	ldr	r2, [pc, #472]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b2a:	e011      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b30:	3308      	adds	r3, #8
 8005b32:	2102      	movs	r1, #2
 8005b34:	4618      	mov	r0, r3
 8005b36:	f001 f847 	bl	8006bc8 <RCCEx_PLL2_Config>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b40:	e006      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005b48:	e002      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b4a:	bf00      	nop
 8005b4c:	e000      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b50:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b58:	4b68      	ldr	r3, [pc, #416]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b5c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b66:	4a65      	ldr	r2, [pc, #404]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b6c:	e003      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b72:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005b82:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b86:	2300      	movs	r3, #0
 8005b88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b8c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005b90:	460b      	mov	r3, r1
 8005b92:	4313      	orrs	r3, r2
 8005b94:	d051      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005b96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ba0:	d035      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005ba2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ba6:	d82e      	bhi.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ba8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bac:	d031      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005bae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bb2:	d828      	bhi.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005bb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bb8:	d01a      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bbe:	d822      	bhi.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bc8:	d007      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005bca:	e01c      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	4a4a      	ldr	r2, [pc, #296]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bd8:	e01c      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bde:	3308      	adds	r3, #8
 8005be0:	2100      	movs	r1, #0
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fff0 	bl	8006bc8 <RCCEx_PLL2_Config>
 8005be8:	4603      	mov	r3, r0
 8005bea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bee:	e011      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bf4:	3328      	adds	r3, #40	@ 0x28
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f001 f897 	bl	8006d2c <RCCEx_PLL3_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c04:	e006      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005c0c:	e002      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c0e:	bf00      	nop
 8005c10:	e000      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c1c:	4b37      	ldr	r3, [pc, #220]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c20:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005c24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c2a:	4a34      	ldr	r2, [pc, #208]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c30:	e003      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c36:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005c46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005c50:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4313      	orrs	r3, r2
 8005c58:	d056      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005c5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c64:	d033      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005c66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c6a:	d82c      	bhi.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c70:	d02f      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005c72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c76:	d826      	bhi.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c7c:	d02b      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005c7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c82:	d820      	bhi.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c88:	d012      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005c8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c8e:	d81a      	bhi.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d022      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c98:	d115      	bne.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c9e:	3308      	adds	r3, #8
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 ff90 	bl	8006bc8 <RCCEx_PLL2_Config>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005cae:	e015      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cb4:	3328      	adds	r3, #40	@ 0x28
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f001 f837 	bl	8006d2c <RCCEx_PLL3_Config>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005cc4:	e00a      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ccc:	e006      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005cce:	bf00      	nop
 8005cd0:	e004      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005cd2:	bf00      	nop
 8005cd4:	e002      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005cd6:	bf00      	nop
 8005cd8:	e000      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cdc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10d      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ce4:	4b05      	ldr	r3, [pc, #20]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ce8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005cec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cf2:	4a02      	ldr	r2, [pc, #8]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cf8:	e006      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005cfa:	bf00      	nop
 8005cfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d00:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d04:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005d14:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d18:	2300      	movs	r3, #0
 8005d1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d1e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005d22:	460b      	mov	r3, r1
 8005d24:	4313      	orrs	r3, r2
 8005d26:	d055      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005d28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d34:	d033      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d3a:	d82c      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d40:	d02f      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d46:	d826      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d4c:	d02b      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005d4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d52:	d820      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d58:	d012      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005d5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d5e:	d81a      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d022      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005d64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d68:	d115      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d6e:	3308      	adds	r3, #8
 8005d70:	2101      	movs	r1, #1
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 ff28 	bl	8006bc8 <RCCEx_PLL2_Config>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d7e:	e015      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d84:	3328      	adds	r3, #40	@ 0x28
 8005d86:	2101      	movs	r1, #1
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 ffcf 	bl	8006d2c <RCCEx_PLL3_Config>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d94:	e00a      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d9c:	e006      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d9e:	bf00      	nop
 8005da0:	e004      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005da2:	bf00      	nop
 8005da4:	e002      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005da6:	bf00      	nop
 8005da8:	e000      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10b      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005db4:	4bb6      	ldr	r3, [pc, #728]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005dbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005dc4:	4ab2      	ldr	r2, [pc, #712]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005dc6:	430b      	orrs	r3, r1
 8005dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dca:	e003      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dcc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005dd0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005dd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005de0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005de4:	2300      	movs	r3, #0
 8005de6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005dea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4313      	orrs	r3, r2
 8005df2:	d02a      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005df4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d011      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e02:	d10a      	bne.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e08:	3308      	adds	r3, #8
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 fedb 	bl	8006bc8 <RCCEx_PLL2_Config>
 8005e12:	4603      	mov	r3, r0
 8005e14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8005e18:	e004      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e20:	e000      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8005e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e24:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10a      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005e2c:	4b98      	ldr	r3, [pc, #608]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e30:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005e34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e3a:	4a95      	ldr	r2, [pc, #596]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e3c:	430b      	orrs	r3, r1
 8005e3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e40:	e003      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e46:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e52:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005e56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005e60:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e64:	460b      	mov	r3, r1
 8005e66:	4313      	orrs	r3, r2
 8005e68:	d037      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005e6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e74:	d00e      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8005e76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e7a:	d816      	bhi.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d018      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005e80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e84:	d111      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e86:	4b82      	ldr	r3, [pc, #520]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8a:	4a81      	ldr	r2, [pc, #516]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e92:	e00f      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e98:	3308      	adds	r3, #8
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fe93 	bl	8006bc8 <RCCEx_PLL2_Config>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ea8:	e004      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005eb0:	e000      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8005eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10a      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ebc:	4b74      	ldr	r3, [pc, #464]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ec0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005ec4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eca:	4a71      	ldr	r2, [pc, #452]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ed0:	e003      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ed6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005eda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005ee6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005eea:	2300      	movs	r3, #0
 8005eec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005ef0:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	d03a      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d81d      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005f04:	a201      	add	r2, pc, #4	@ (adr r2, 8005f0c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0a:	bf00      	nop
 8005f0c:	08005f49 	.word	0x08005f49
 8005f10:	08005f1d 	.word	0x08005f1d
 8005f14:	08005f2b 	.word	0x08005f2b
 8005f18:	08005f49 	.word	0x08005f49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f1c:	4b5c      	ldr	r3, [pc, #368]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f20:	4a5b      	ldr	r2, [pc, #364]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f28:	e00f      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f2e:	3308      	adds	r3, #8
 8005f30:	2102      	movs	r1, #2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fe48 	bl	8006bc8 <RCCEx_PLL2_Config>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f3e:	e004      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f46:	e000      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8005f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f4a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f52:	4b4f      	ldr	r3, [pc, #316]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f56:	f023 0103 	bic.w	r1, r3, #3
 8005f5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f60:	4a4b      	ldr	r2, [pc, #300]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005f62:	430b      	orrs	r3, r1
 8005f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f66:	e003      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f68:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f6c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005f7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f80:	2300      	movs	r3, #0
 8005f82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	f000 80a0 	beq.w	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f92:	4b40      	ldr	r3, [pc, #256]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a3f      	ldr	r2, [pc, #252]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f9e:	f7fc fd71 	bl	8002a84 <HAL_GetTick>
 8005fa2:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fa6:	e00b      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fa8:	f7fc fd6c 	bl	8002a84 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b64      	cmp	r3, #100	@ 0x64
 8005fb6:	d903      	bls.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005fbe:	e005      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fc0:	4b34      	ldr	r3, [pc, #208]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0ed      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005fcc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d17a      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005fd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005fd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fdc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005fe0:	4053      	eors	r3, r2
 8005fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d015      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fea:	4b29      	ldr	r3, [pc, #164]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ff2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ff6:	4b26      	ldr	r3, [pc, #152]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ffa:	4a25      	ldr	r2, [pc, #148]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006000:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006002:	4b23      	ldr	r3, [pc, #140]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006006:	4a22      	ldr	r2, [pc, #136]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800600c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800600e:	4a20      	ldr	r2, [pc, #128]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006010:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006014:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006016:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800601a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800601e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006022:	d118      	bne.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006024:	f7fc fd2e 	bl	8002a84 <HAL_GetTick>
 8006028:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800602c:	e00d      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800602e:	f7fc fd29 	bl	8002a84 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006038:	1ad2      	subs	r2, r2, r3
 800603a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800603e:	429a      	cmp	r2, r3
 8006040:	d903      	bls.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8006048:	e005      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800604a:	4b11      	ldr	r3, [pc, #68]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800604c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0eb      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8006056:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800605a:	2b00      	cmp	r3, #0
 800605c:	d130      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800605e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006062:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800606a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800606e:	d115      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8006070:	4b07      	ldr	r3, [pc, #28]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006078:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800607c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006080:	091a      	lsrs	r2, r3, #4
 8006082:	4b05      	ldr	r3, [pc, #20]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8006084:	4013      	ands	r3, r2
 8006086:	4a02      	ldr	r2, [pc, #8]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006088:	430b      	orrs	r3, r1
 800608a:	6113      	str	r3, [r2, #16]
 800608c:	e00c      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800608e:	bf00      	nop
 8006090:	58024400 	.word	0x58024400
 8006094:	58024800 	.word	0x58024800
 8006098:	00ffffcf 	.word	0x00ffffcf
 800609c:	4bd4      	ldr	r3, [pc, #848]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	4ad3      	ldr	r2, [pc, #844]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80060a2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80060a6:	6113      	str	r3, [r2, #16]
 80060a8:	4bd1      	ldr	r3, [pc, #836]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80060aa:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80060ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80060b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060b8:	4acd      	ldr	r2, [pc, #820]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80060ba:	430b      	orrs	r3, r1
 80060bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80060be:	e008      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060c4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80060c8:	e003      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80060d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060da:	f002 0301 	and.w	r3, r2, #1
 80060de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060e2:	2300      	movs	r3, #0
 80060e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80060ec:	460b      	mov	r3, r1
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f000 808b 	beq.w	800620a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80060f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060fc:	2b28      	cmp	r3, #40	@ 0x28
 80060fe:	d86b      	bhi.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006100:	a201      	add	r2, pc, #4	@ (adr r2, 8006108 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8006102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006106:	bf00      	nop
 8006108:	080061e1 	.word	0x080061e1
 800610c:	080061d9 	.word	0x080061d9
 8006110:	080061d9 	.word	0x080061d9
 8006114:	080061d9 	.word	0x080061d9
 8006118:	080061d9 	.word	0x080061d9
 800611c:	080061d9 	.word	0x080061d9
 8006120:	080061d9 	.word	0x080061d9
 8006124:	080061d9 	.word	0x080061d9
 8006128:	080061ad 	.word	0x080061ad
 800612c:	080061d9 	.word	0x080061d9
 8006130:	080061d9 	.word	0x080061d9
 8006134:	080061d9 	.word	0x080061d9
 8006138:	080061d9 	.word	0x080061d9
 800613c:	080061d9 	.word	0x080061d9
 8006140:	080061d9 	.word	0x080061d9
 8006144:	080061d9 	.word	0x080061d9
 8006148:	080061c3 	.word	0x080061c3
 800614c:	080061d9 	.word	0x080061d9
 8006150:	080061d9 	.word	0x080061d9
 8006154:	080061d9 	.word	0x080061d9
 8006158:	080061d9 	.word	0x080061d9
 800615c:	080061d9 	.word	0x080061d9
 8006160:	080061d9 	.word	0x080061d9
 8006164:	080061d9 	.word	0x080061d9
 8006168:	080061e1 	.word	0x080061e1
 800616c:	080061d9 	.word	0x080061d9
 8006170:	080061d9 	.word	0x080061d9
 8006174:	080061d9 	.word	0x080061d9
 8006178:	080061d9 	.word	0x080061d9
 800617c:	080061d9 	.word	0x080061d9
 8006180:	080061d9 	.word	0x080061d9
 8006184:	080061d9 	.word	0x080061d9
 8006188:	080061e1 	.word	0x080061e1
 800618c:	080061d9 	.word	0x080061d9
 8006190:	080061d9 	.word	0x080061d9
 8006194:	080061d9 	.word	0x080061d9
 8006198:	080061d9 	.word	0x080061d9
 800619c:	080061d9 	.word	0x080061d9
 80061a0:	080061d9 	.word	0x080061d9
 80061a4:	080061d9 	.word	0x080061d9
 80061a8:	080061e1 	.word	0x080061e1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061b0:	3308      	adds	r3, #8
 80061b2:	2101      	movs	r1, #1
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fd07 	bl	8006bc8 <RCCEx_PLL2_Config>
 80061ba:	4603      	mov	r3, r0
 80061bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80061c0:	e00f      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061c6:	3328      	adds	r3, #40	@ 0x28
 80061c8:	2101      	movs	r1, #1
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fdae 	bl	8006d2c <RCCEx_PLL3_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80061d6:	e004      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80061de:	e000      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80061e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10b      	bne.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80061ea:	4b81      	ldr	r3, [pc, #516]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80061ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80061f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061fa:	4a7d      	ldr	r2, [pc, #500]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80061fc:	430b      	orrs	r3, r1
 80061fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8006200:	e003      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006202:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006206:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800620a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006212:	f002 0302 	and.w	r3, r2, #2
 8006216:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800621a:	2300      	movs	r3, #0
 800621c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006220:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006224:	460b      	mov	r3, r1
 8006226:	4313      	orrs	r3, r2
 8006228:	d042      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800622a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800622e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006230:	2b05      	cmp	r3, #5
 8006232:	d825      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8006234:	a201      	add	r2, pc, #4	@ (adr r2, 800623c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8006236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623a:	bf00      	nop
 800623c:	08006289 	.word	0x08006289
 8006240:	08006255 	.word	0x08006255
 8006244:	0800626b 	.word	0x0800626b
 8006248:	08006289 	.word	0x08006289
 800624c:	08006289 	.word	0x08006289
 8006250:	08006289 	.word	0x08006289
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006254:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006258:	3308      	adds	r3, #8
 800625a:	2101      	movs	r1, #1
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fcb3 	bl	8006bc8 <RCCEx_PLL2_Config>
 8006262:	4603      	mov	r3, r0
 8006264:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006268:	e00f      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800626a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800626e:	3328      	adds	r3, #40	@ 0x28
 8006270:	2101      	movs	r1, #1
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fd5a 	bl	8006d2c <RCCEx_PLL3_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800627e:	e004      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006286:	e000      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8006288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800628a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006292:	4b57      	ldr	r3, [pc, #348]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006296:	f023 0107 	bic.w	r1, r3, #7
 800629a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800629e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062a0:	4a53      	ldr	r2, [pc, #332]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80062a2:	430b      	orrs	r3, r1
 80062a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80062a6:	e003      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062ac:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	f002 0304 	and.w	r3, r2, #4
 80062bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062c0:	2300      	movs	r3, #0
 80062c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80062ca:	460b      	mov	r3, r1
 80062cc:	4313      	orrs	r3, r2
 80062ce:	d044      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80062d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062d8:	2b05      	cmp	r3, #5
 80062da:	d825      	bhi.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80062dc:	a201      	add	r2, pc, #4	@ (adr r2, 80062e4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80062de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e2:	bf00      	nop
 80062e4:	08006331 	.word	0x08006331
 80062e8:	080062fd 	.word	0x080062fd
 80062ec:	08006313 	.word	0x08006313
 80062f0:	08006331 	.word	0x08006331
 80062f4:	08006331 	.word	0x08006331
 80062f8:	08006331 	.word	0x08006331
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006300:	3308      	adds	r3, #8
 8006302:	2101      	movs	r1, #1
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fc5f 	bl	8006bc8 <RCCEx_PLL2_Config>
 800630a:	4603      	mov	r3, r0
 800630c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006310:	e00f      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006312:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006316:	3328      	adds	r3, #40	@ 0x28
 8006318:	2101      	movs	r1, #1
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fd06 	bl	8006d2c <RCCEx_PLL3_Config>
 8006320:	4603      	mov	r3, r0
 8006322:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006326:	e004      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800632e:	e000      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8006330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006332:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10b      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800633a:	4b2d      	ldr	r3, [pc, #180]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800633c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800633e:	f023 0107 	bic.w	r1, r3, #7
 8006342:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006346:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800634a:	4a29      	ldr	r2, [pc, #164]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800634c:	430b      	orrs	r3, r1
 800634e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006350:	e003      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006352:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006356:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800635a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	f002 0320 	and.w	r3, r2, #32
 8006366:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800636a:	2300      	movs	r3, #0
 800636c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006370:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006374:	460b      	mov	r3, r1
 8006376:	4313      	orrs	r3, r2
 8006378:	d057      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800637a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800637e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006382:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006386:	d035      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006388:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800638c:	d82c      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800638e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006392:	d031      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8006394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006398:	d826      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800639a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800639e:	d02d      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80063a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063a4:	d820      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80063a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063aa:	d012      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80063ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063b0:	d81a      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d024      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80063b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063ba:	d115      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063c0:	3308      	adds	r3, #8
 80063c2:	2100      	movs	r1, #0
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 fbff 	bl	8006bc8 <RCCEx_PLL2_Config>
 80063ca:	4603      	mov	r3, r0
 80063cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80063d0:	e017      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063d6:	3328      	adds	r3, #40	@ 0x28
 80063d8:	2102      	movs	r1, #2
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 fca6 	bl	8006d2c <RCCEx_PLL3_Config>
 80063e0:	4603      	mov	r3, r0
 80063e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80063e6:	e00c      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80063ee:	e008      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80063f0:	58024400 	.word	0x58024400
        break;
 80063f4:	bf00      	nop
 80063f6:	e004      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80063f8:	bf00      	nop
 80063fa:	e002      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80063fc:	bf00      	nop
 80063fe:	e000      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006402:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10b      	bne.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800640a:	4bc2      	ldr	r3, [pc, #776]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800640c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800640e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006412:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800641a:	4abe      	ldr	r2, [pc, #760]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800641c:	430b      	orrs	r3, r1
 800641e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006420:	e003      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006422:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006426:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800642a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800642e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006432:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006436:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800643a:	2300      	movs	r3, #0
 800643c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006440:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006444:	460b      	mov	r3, r1
 8006446:	4313      	orrs	r3, r2
 8006448:	d055      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800644a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800644e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006452:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006456:	d033      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006458:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800645c:	d82c      	bhi.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800645e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006462:	d02f      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8006464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006468:	d826      	bhi.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800646a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800646e:	d02b      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006470:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006474:	d820      	bhi.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800647a:	d012      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800647c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006480:	d81a      	bhi.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006482:	2b00      	cmp	r3, #0
 8006484:	d022      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800648a:	d115      	bne.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800648c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006490:	3308      	adds	r3, #8
 8006492:	2100      	movs	r1, #0
 8006494:	4618      	mov	r0, r3
 8006496:	f000 fb97 	bl	8006bc8 <RCCEx_PLL2_Config>
 800649a:	4603      	mov	r3, r0
 800649c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80064a0:	e015      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064a6:	3328      	adds	r3, #40	@ 0x28
 80064a8:	2102      	movs	r1, #2
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 fc3e 	bl	8006d2c <RCCEx_PLL3_Config>
 80064b0:	4603      	mov	r3, r0
 80064b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80064b6:	e00a      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80064be:	e006      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80064c0:	bf00      	nop
 80064c2:	e004      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80064c4:	bf00      	nop
 80064c6:	e002      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80064c8:	bf00      	nop
 80064ca:	e000      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80064cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10b      	bne.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064d6:	4b8f      	ldr	r3, [pc, #572]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064da:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80064de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80064e6:	4a8b      	ldr	r2, [pc, #556]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064e8:	430b      	orrs	r3, r1
 80064ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80064ec:	e003      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80064f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006502:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006506:	2300      	movs	r3, #0
 8006508:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800650c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006510:	460b      	mov	r3, r1
 8006512:	4313      	orrs	r3, r2
 8006514:	d055      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006516:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800651a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800651e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006522:	d033      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006524:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006528:	d82c      	bhi.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800652a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800652e:	d02f      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006530:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006534:	d826      	bhi.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006536:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800653a:	d02b      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800653c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006540:	d820      	bhi.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006542:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006546:	d012      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006548:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800654c:	d81a      	bhi.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800654e:	2b00      	cmp	r3, #0
 8006550:	d022      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8006552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006556:	d115      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006558:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800655c:	3308      	adds	r3, #8
 800655e:	2100      	movs	r1, #0
 8006560:	4618      	mov	r0, r3
 8006562:	f000 fb31 	bl	8006bc8 <RCCEx_PLL2_Config>
 8006566:	4603      	mov	r3, r0
 8006568:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800656c:	e015      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800656e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006572:	3328      	adds	r3, #40	@ 0x28
 8006574:	2102      	movs	r1, #2
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fbd8 	bl	8006d2c <RCCEx_PLL3_Config>
 800657c:	4603      	mov	r3, r0
 800657e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006582:	e00a      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800658a:	e006      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800658c:	bf00      	nop
 800658e:	e004      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006590:	bf00      	nop
 8006592:	e002      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006594:	bf00      	nop
 8006596:	e000      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800659a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10b      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80065a2:	4b5c      	ldr	r3, [pc, #368]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80065a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a6:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80065aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80065b2:	4a58      	ldr	r2, [pc, #352]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80065b4:	430b      	orrs	r3, r1
 80065b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80065b8:	e003      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065be:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80065c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	f002 0308 	and.w	r3, r2, #8
 80065ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065d2:	2300      	movs	r3, #0
 80065d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065d8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80065dc:	460b      	mov	r3, r1
 80065de:	4313      	orrs	r3, r2
 80065e0:	d01e      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80065e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ee:	d10c      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065f4:	3328      	adds	r3, #40	@ 0x28
 80065f6:	2102      	movs	r1, #2
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 fb97 	bl	8006d2c <RCCEx_PLL3_Config>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800660a:	4b42      	ldr	r3, [pc, #264]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800660c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800660e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006612:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800661a:	4a3e      	ldr	r2, [pc, #248]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800661c:	430b      	orrs	r3, r1
 800661e:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006620:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006628:	f002 0310 	and.w	r3, r2, #16
 800662c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006630:	2300      	movs	r3, #0
 8006632:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006636:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800663a:	460b      	mov	r3, r1
 800663c:	4313      	orrs	r3, r2
 800663e:	d01e      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006640:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006644:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800664c:	d10c      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800664e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006652:	3328      	adds	r3, #40	@ 0x28
 8006654:	2102      	movs	r1, #2
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fb68 	bl	8006d2c <RCCEx_PLL3_Config>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006668:	4b2a      	ldr	r3, [pc, #168]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800666a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800666c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006670:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006674:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006678:	4a26      	ldr	r2, [pc, #152]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800667a:	430b      	orrs	r3, r1
 800667c:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800667e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800668a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800668e:	2300      	movs	r3, #0
 8006690:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006694:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006698:	460b      	mov	r3, r1
 800669a:	4313      	orrs	r3, r2
 800669c:	d040      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800669e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80066a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066aa:	d022      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80066ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066b0:	d81b      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80066b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066ba:	d00b      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80066bc:	e015      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066c2:	3308      	adds	r3, #8
 80066c4:	2100      	movs	r1, #0
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fa7e 	bl	8006bc8 <RCCEx_PLL2_Config>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80066d2:	e00f      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066d8:	3328      	adds	r3, #40	@ 0x28
 80066da:	2102      	movs	r1, #2
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 fb25 	bl	8006d2c <RCCEx_PLL3_Config>
 80066e2:	4603      	mov	r3, r0
 80066e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80066e8:	e004      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80066f0:	e000      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80066f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10d      	bne.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066fc:	4b05      	ldr	r3, [pc, #20]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80066fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006700:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006704:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006708:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800670c:	4a01      	ldr	r2, [pc, #4]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800670e:	430b      	orrs	r3, r1
 8006710:	6593      	str	r3, [r2, #88]	@ 0x58
 8006712:	e005      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006714:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006718:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800671c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006720:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800672c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800672e:	2300      	movs	r3, #0
 8006730:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006732:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006736:	460b      	mov	r3, r1
 8006738:	4313      	orrs	r3, r2
 800673a:	d03b      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800673c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006744:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006748:	d01f      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800674a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800674e:	d818      	bhi.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006750:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006754:	d003      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006756:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800675a:	d007      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 800675c:	e011      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800675e:	4b64      	ldr	r3, [pc, #400]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006762:	4a63      	ldr	r2, [pc, #396]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006768:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800676a:	e00f      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800676c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006770:	3328      	adds	r3, #40	@ 0x28
 8006772:	2101      	movs	r1, #1
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fad9 	bl	8006d2c <RCCEx_PLL3_Config>
 800677a:	4603      	mov	r3, r0
 800677c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006780:	e004      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006788:	e000      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800678a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800678c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10b      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006794:	4b56      	ldr	r3, [pc, #344]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006798:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800679c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067a4:	4a52      	ldr	r2, [pc, #328]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80067a6:	430b      	orrs	r3, r1
 80067a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80067aa:	e003      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067b0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80067b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80067c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80067c2:	2300      	movs	r3, #0
 80067c4:	677b      	str	r3, [r7, #116]	@ 0x74
 80067c6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80067ca:	460b      	mov	r3, r1
 80067cc:	4313      	orrs	r3, r2
 80067ce:	d031      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80067d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80067da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067de:	d007      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80067e0:	e011      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067e2:	4b43      	ldr	r3, [pc, #268]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80067e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e6:	4a42      	ldr	r2, [pc, #264]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80067e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80067ee:	e00e      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067f4:	3308      	adds	r3, #8
 80067f6:	2102      	movs	r1, #2
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 f9e5 	bl	8006bc8 <RCCEx_PLL2_Config>
 80067fe:	4603      	mov	r3, r0
 8006800:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006804:	e003      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800680c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800680e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10a      	bne.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006816:	4b36      	ldr	r3, [pc, #216]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800681a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800681e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006824:	4a32      	ldr	r2, [pc, #200]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006826:	430b      	orrs	r3, r1
 8006828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800682a:	e003      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800682c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006830:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006834:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006840:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006842:	2300      	movs	r3, #0
 8006844:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006846:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800684a:	460b      	mov	r3, r1
 800684c:	4313      	orrs	r3, r2
 800684e:	d00c      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006850:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006854:	3328      	adds	r3, #40	@ 0x28
 8006856:	2102      	movs	r1, #2
 8006858:	4618      	mov	r0, r3
 800685a:	f000 fa67 	bl	8006d2c <RCCEx_PLL3_Config>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800686a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006876:	663b      	str	r3, [r7, #96]	@ 0x60
 8006878:	2300      	movs	r3, #0
 800687a:	667b      	str	r3, [r7, #100]	@ 0x64
 800687c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006880:	460b      	mov	r3, r1
 8006882:	4313      	orrs	r3, r2
 8006884:	d03a      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006886:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800688a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800688e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006892:	d018      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8006894:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006898:	d811      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800689a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800689e:	d014      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80068a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068a4:	d80b      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d011      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80068aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ae:	d106      	bne.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068b0:	4b0f      	ldr	r3, [pc, #60]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80068b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b4:	4a0e      	ldr	r2, [pc, #56]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80068b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80068bc:	e008      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80068c4:	e004      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80068c6:	bf00      	nop
 80068c8:	e002      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80068ca:	bf00      	nop
 80068cc:	e000      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80068ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10d      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068d8:	4b05      	ldr	r3, [pc, #20]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80068da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068dc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068e8:	4a01      	ldr	r2, [pc, #4]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80068ea:	430b      	orrs	r3, r1
 80068ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80068ee:	e005      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80068f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006908:	65bb      	str	r3, [r7, #88]	@ 0x58
 800690a:	2300      	movs	r3, #0
 800690c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800690e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006912:	460b      	mov	r3, r1
 8006914:	4313      	orrs	r3, r2
 8006916:	d009      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006918:	4baa      	ldr	r3, [pc, #680]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800691a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800691c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006920:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006924:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006926:	4aa7      	ldr	r2, [pc, #668]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006928:	430b      	orrs	r3, r1
 800692a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800692c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006938:	653b      	str	r3, [r7, #80]	@ 0x50
 800693a:	2300      	movs	r3, #0
 800693c:	657b      	str	r3, [r7, #84]	@ 0x54
 800693e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006942:	460b      	mov	r3, r1
 8006944:	4313      	orrs	r3, r2
 8006946:	d00a      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006948:	4b9e      	ldr	r3, [pc, #632]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006950:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006954:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006958:	4a9a      	ldr	r2, [pc, #616]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800695a:	430b      	orrs	r3, r1
 800695c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800695e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006966:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800696a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800696c:	2300      	movs	r3, #0
 800696e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006970:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006974:	460b      	mov	r3, r1
 8006976:	4313      	orrs	r3, r2
 8006978:	d009      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800697a:	4b92      	ldr	r3, [pc, #584]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800697c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800697e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006982:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006988:	4a8e      	ldr	r2, [pc, #568]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800698a:	430b      	orrs	r3, r1
 800698c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800698e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800699a:	643b      	str	r3, [r7, #64]	@ 0x40
 800699c:	2300      	movs	r3, #0
 800699e:	647b      	str	r3, [r7, #68]	@ 0x44
 80069a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80069a4:	460b      	mov	r3, r1
 80069a6:	4313      	orrs	r3, r2
 80069a8:	d00e      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069aa:	4b86      	ldr	r3, [pc, #536]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	4a85      	ldr	r2, [pc, #532]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80069b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80069b4:	6113      	str	r3, [r2, #16]
 80069b6:	4b83      	ldr	r3, [pc, #524]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80069b8:	6919      	ldr	r1, [r3, #16]
 80069ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80069c2:	4a80      	ldr	r2, [pc, #512]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80069c4:	430b      	orrs	r3, r1
 80069c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80069c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80069d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069d6:	2300      	movs	r3, #0
 80069d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80069de:	460b      	mov	r3, r1
 80069e0:	4313      	orrs	r3, r2
 80069e2:	d009      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80069e4:	4b77      	ldr	r3, [pc, #476]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80069e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069e8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80069ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069f2:	4a74      	ldr	r2, [pc, #464]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80069f4:	430b      	orrs	r3, r1
 80069f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006a04:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a06:	2300      	movs	r3, #0
 8006a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a0a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4313      	orrs	r3, r2
 8006a12:	d00a      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a14:	4b6b      	ldr	r3, [pc, #428]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a18:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006a1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a24:	4a67      	ldr	r2, [pc, #412]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006a26:	430b      	orrs	r3, r1
 8006a28:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006a2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	2100      	movs	r1, #0
 8006a34:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a3c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006a40:	460b      	mov	r3, r1
 8006a42:	4313      	orrs	r3, r2
 8006a44:	d011      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 f8ba 	bl	8006bc8 <RCCEx_PLL2_Config>
 8006a54:	4603      	mov	r3, r0
 8006a56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006a5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a66:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006a6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a72:	2100      	movs	r1, #0
 8006a74:	6239      	str	r1, [r7, #32]
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a7c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006a80:	460b      	mov	r3, r1
 8006a82:	4313      	orrs	r3, r2
 8006a84:	d011      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 f89a 	bl	8006bc8 <RCCEx_PLL2_Config>
 8006a94:	4603      	mov	r3, r0
 8006a96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006a9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006aa6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006aaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	61b9      	str	r1, [r7, #24]
 8006ab6:	f003 0304 	and.w	r3, r3, #4
 8006aba:	61fb      	str	r3, [r7, #28]
 8006abc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	d011      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006aca:	3308      	adds	r3, #8
 8006acc:	2102      	movs	r1, #2
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 f87a 	bl	8006bc8 <RCCEx_PLL2_Config>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006ada:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ae6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006aea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	2100      	movs	r1, #0
 8006af4:	6139      	str	r1, [r7, #16]
 8006af6:	f003 0308 	and.w	r3, r3, #8
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006b00:	460b      	mov	r3, r1
 8006b02:	4313      	orrs	r3, r2
 8006b04:	d011      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b0a:	3328      	adds	r3, #40	@ 0x28
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 f90c 	bl	8006d2c <RCCEx_PLL3_Config>
 8006b14:	4603      	mov	r3, r0
 8006b16:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8006b1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b26:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006b2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b32:	2100      	movs	r1, #0
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	f003 0310 	and.w	r3, r3, #16
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006b40:	460b      	mov	r3, r1
 8006b42:	4313      	orrs	r3, r2
 8006b44:	d011      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b4a:	3328      	adds	r3, #40	@ 0x28
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 f8ec 	bl	8006d2c <RCCEx_PLL3_Config>
 8006b54:	4603      	mov	r3, r0
 8006b56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006b5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b66:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006b6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	2100      	movs	r1, #0
 8006b74:	6039      	str	r1, [r7, #0]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	607b      	str	r3, [r7, #4]
 8006b7c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b80:	460b      	mov	r3, r1
 8006b82:	4313      	orrs	r3, r2
 8006b84:	d011      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b8a:	3328      	adds	r3, #40	@ 0x28
 8006b8c:	2102      	movs	r1, #2
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 f8cc 	bl	8006d2c <RCCEx_PLL3_Config>
 8006b94:	4603      	mov	r3, r0
 8006b96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006b9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ba6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8006baa:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	e000      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bc4:	58024400 	.word	0x58024400

08006bc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bd6:	4b53      	ldr	r3, [pc, #332]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bda:	f003 0303 	and.w	r3, r3, #3
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d101      	bne.n	8006be6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e099      	b.n	8006d1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006be6:	4b4f      	ldr	r3, [pc, #316]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a4e      	ldr	r2, [pc, #312]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006bec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bf2:	f7fb ff47 	bl	8002a84 <HAL_GetTick>
 8006bf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bf8:	e008      	b.n	8006c0c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006bfa:	f7fb ff43 	bl	8002a84 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d901      	bls.n	8006c0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e086      	b.n	8006d1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c0c:	4b45      	ldr	r3, [pc, #276]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1f0      	bne.n	8006bfa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006c18:	4b42      	ldr	r3, [pc, #264]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	031b      	lsls	r3, r3, #12
 8006c26:	493f      	ldr	r1, [pc, #252]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	3b01      	subs	r3, #1
 8006c32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	025b      	lsls	r3, r3, #9
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	431a      	orrs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	3b01      	subs	r3, #1
 8006c48:	041b      	lsls	r3, r3, #16
 8006c4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	3b01      	subs	r3, #1
 8006c56:	061b      	lsls	r3, r3, #24
 8006c58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c5c:	4931      	ldr	r1, [pc, #196]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c62:	4b30      	ldr	r3, [pc, #192]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	492d      	ldr	r1, [pc, #180]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006c74:	4b2b      	ldr	r3, [pc, #172]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c78:	f023 0220 	bic.w	r2, r3, #32
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	4928      	ldr	r1, [pc, #160]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006c86:	4b27      	ldr	r3, [pc, #156]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8a:	4a26      	ldr	r2, [pc, #152]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c8c:	f023 0310 	bic.w	r3, r3, #16
 8006c90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c92:	4b24      	ldr	r3, [pc, #144]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006c94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c96:	4b24      	ldr	r3, [pc, #144]	@ (8006d28 <RCCEx_PLL2_Config+0x160>)
 8006c98:	4013      	ands	r3, r2
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	69d2      	ldr	r2, [r2, #28]
 8006c9e:	00d2      	lsls	r2, r2, #3
 8006ca0:	4920      	ldr	r1, [pc, #128]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006caa:	4a1e      	ldr	r2, [pc, #120]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006cac:	f043 0310 	orr.w	r3, r3, #16
 8006cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d106      	bne.n	8006cc6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbc:	4a19      	ldr	r2, [pc, #100]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006cbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006cc4:	e00f      	b.n	8006ce6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d106      	bne.n	8006cda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006ccc:	4b15      	ldr	r3, [pc, #84]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd0:	4a14      	ldr	r2, [pc, #80]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006cd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006cd8:	e005      	b.n	8006ce6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006cda:	4b12      	ldr	r3, [pc, #72]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cde:	4a11      	ldr	r2, [pc, #68]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006ce0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a0e      	ldr	r2, [pc, #56]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006cec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006cf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cf2:	f7fb fec7 	bl	8002a84 <HAL_GetTick>
 8006cf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cf8:	e008      	b.n	8006d0c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cfa:	f7fb fec3 	bl	8002a84 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d901      	bls.n	8006d0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e006      	b.n	8006d1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d0c:	4b05      	ldr	r3, [pc, #20]	@ (8006d24 <RCCEx_PLL2_Config+0x15c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0f0      	beq.n	8006cfa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	58024400 	.word	0x58024400
 8006d28:	ffff0007 	.word	0xffff0007

08006d2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d3a:	4b53      	ldr	r3, [pc, #332]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3e:	f003 0303 	and.w	r3, r3, #3
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	d101      	bne.n	8006d4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e099      	b.n	8006e7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006d4a:	4b4f      	ldr	r3, [pc, #316]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a4e      	ldr	r2, [pc, #312]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006d50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d56:	f7fb fe95 	bl	8002a84 <HAL_GetTick>
 8006d5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d5c:	e008      	b.n	8006d70 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d5e:	f7fb fe91 	bl	8002a84 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d901      	bls.n	8006d70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e086      	b.n	8006e7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d70:	4b45      	ldr	r3, [pc, #276]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1f0      	bne.n	8006d5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d7c:	4b42      	ldr	r3, [pc, #264]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d80:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	051b      	lsls	r3, r3, #20
 8006d8a:	493f      	ldr	r1, [pc, #252]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	025b      	lsls	r3, r3, #9
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	431a      	orrs	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	041b      	lsls	r3, r3, #16
 8006dae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006db2:	431a      	orrs	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	3b01      	subs	r3, #1
 8006dba:	061b      	lsls	r3, r3, #24
 8006dbc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006dc0:	4931      	ldr	r1, [pc, #196]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006dc6:	4b30      	ldr	r3, [pc, #192]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	492d      	ldr	r1, [pc, #180]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ddc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	4928      	ldr	r1, [pc, #160]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006dea:	4b27      	ldr	r3, [pc, #156]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dee:	4a26      	ldr	r2, [pc, #152]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006df0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006df6:	4b24      	ldr	r3, [pc, #144]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006df8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dfa:	4b24      	ldr	r3, [pc, #144]	@ (8006e8c <RCCEx_PLL3_Config+0x160>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	69d2      	ldr	r2, [r2, #28]
 8006e02:	00d2      	lsls	r2, r2, #3
 8006e04:	4920      	ldr	r1, [pc, #128]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0e:	4a1e      	ldr	r2, [pc, #120]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d106      	bne.n	8006e2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e20:	4a19      	ldr	r2, [pc, #100]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006e26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e28:	e00f      	b.n	8006e4a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d106      	bne.n	8006e3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e30:	4b15      	ldr	r3, [pc, #84]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e34:	4a14      	ldr	r2, [pc, #80]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e3c:	e005      	b.n	8006e4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006e3e:	4b12      	ldr	r3, [pc, #72]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e42:	4a11      	ldr	r2, [pc, #68]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e56:	f7fb fe15 	bl	8002a84 <HAL_GetTick>
 8006e5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e5c:	e008      	b.n	8006e70 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e5e:	f7fb fe11 	bl	8002a84 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d901      	bls.n	8006e70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e006      	b.n	8006e7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e70:	4b05      	ldr	r3, [pc, #20]	@ (8006e88 <RCCEx_PLL3_Config+0x15c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0f0      	beq.n	8006e5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	58024400 	.word	0x58024400
 8006e8c:	ffff0007 	.word	0xffff0007

08006e90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e90:	b084      	sub	sp, #16
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	f107 001c 	add.w	r0, r7, #28
 8006e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ea2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d121      	bne.n	8006eee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	4b2c      	ldr	r3, [pc, #176]	@ (8006f6c <USB_CoreInit+0xdc>)
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ece:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d105      	bne.n	8006ee2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 fafa 	bl	80084dc <USB_CoreReset>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	73fb      	strb	r3, [r7, #15]
 8006eec:	e01b      	b.n	8006f26 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 faee 	bl	80084dc <USB_CoreReset>
 8006f00:	4603      	mov	r3, r0
 8006f02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d106      	bne.n	8006f1a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	639a      	str	r2, [r3, #56]	@ 0x38
 8006f18:	e005      	b.n	8006f26 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f26:	7fbb      	ldrb	r3, [r7, #30]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d116      	bne.n	8006f5a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f70 <USB_CoreInit+0xe0>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f043 0206 	orr.w	r2, r3, #6
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f043 0220 	orr.w	r2, r3, #32
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f66:	b004      	add	sp, #16
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	ffbdffbf 	.word	0xffbdffbf
 8006f70:	03ee0000 	.word	0x03ee0000

08006f74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f82:	79fb      	ldrb	r3, [r7, #7]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d165      	bne.n	8007054 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4a41      	ldr	r2, [pc, #260]	@ (8007090 <USB_SetTurnaroundTime+0x11c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d906      	bls.n	8006f9e <USB_SetTurnaroundTime+0x2a>
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	4a40      	ldr	r2, [pc, #256]	@ (8007094 <USB_SetTurnaroundTime+0x120>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d202      	bcs.n	8006f9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f98:	230f      	movs	r3, #15
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	e062      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	4a3c      	ldr	r2, [pc, #240]	@ (8007094 <USB_SetTurnaroundTime+0x120>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d306      	bcc.n	8006fb4 <USB_SetTurnaroundTime+0x40>
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	4a3b      	ldr	r2, [pc, #236]	@ (8007098 <USB_SetTurnaroundTime+0x124>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d202      	bcs.n	8006fb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006fae:	230e      	movs	r3, #14
 8006fb0:	617b      	str	r3, [r7, #20]
 8006fb2:	e057      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4a38      	ldr	r2, [pc, #224]	@ (8007098 <USB_SetTurnaroundTime+0x124>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d306      	bcc.n	8006fca <USB_SetTurnaroundTime+0x56>
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4a37      	ldr	r2, [pc, #220]	@ (800709c <USB_SetTurnaroundTime+0x128>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d202      	bcs.n	8006fca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006fc4:	230d      	movs	r3, #13
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	e04c      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	4a33      	ldr	r2, [pc, #204]	@ (800709c <USB_SetTurnaroundTime+0x128>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d306      	bcc.n	8006fe0 <USB_SetTurnaroundTime+0x6c>
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	4a32      	ldr	r2, [pc, #200]	@ (80070a0 <USB_SetTurnaroundTime+0x12c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d802      	bhi.n	8006fe0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006fda:	230c      	movs	r3, #12
 8006fdc:	617b      	str	r3, [r7, #20]
 8006fde:	e041      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80070a0 <USB_SetTurnaroundTime+0x12c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d906      	bls.n	8006ff6 <USB_SetTurnaroundTime+0x82>
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	4a2e      	ldr	r2, [pc, #184]	@ (80070a4 <USB_SetTurnaroundTime+0x130>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d802      	bhi.n	8006ff6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006ff0:	230b      	movs	r3, #11
 8006ff2:	617b      	str	r3, [r7, #20]
 8006ff4:	e036      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	4a2a      	ldr	r2, [pc, #168]	@ (80070a4 <USB_SetTurnaroundTime+0x130>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d906      	bls.n	800700c <USB_SetTurnaroundTime+0x98>
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	4a29      	ldr	r2, [pc, #164]	@ (80070a8 <USB_SetTurnaroundTime+0x134>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d802      	bhi.n	800700c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007006:	230a      	movs	r3, #10
 8007008:	617b      	str	r3, [r7, #20]
 800700a:	e02b      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	4a26      	ldr	r2, [pc, #152]	@ (80070a8 <USB_SetTurnaroundTime+0x134>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d906      	bls.n	8007022 <USB_SetTurnaroundTime+0xae>
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	4a25      	ldr	r2, [pc, #148]	@ (80070ac <USB_SetTurnaroundTime+0x138>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d202      	bcs.n	8007022 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800701c:	2309      	movs	r3, #9
 800701e:	617b      	str	r3, [r7, #20]
 8007020:	e020      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	4a21      	ldr	r2, [pc, #132]	@ (80070ac <USB_SetTurnaroundTime+0x138>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d306      	bcc.n	8007038 <USB_SetTurnaroundTime+0xc4>
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	4a20      	ldr	r2, [pc, #128]	@ (80070b0 <USB_SetTurnaroundTime+0x13c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d802      	bhi.n	8007038 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007032:	2308      	movs	r3, #8
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	e015      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4a1d      	ldr	r2, [pc, #116]	@ (80070b0 <USB_SetTurnaroundTime+0x13c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d906      	bls.n	800704e <USB_SetTurnaroundTime+0xda>
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	4a1c      	ldr	r2, [pc, #112]	@ (80070b4 <USB_SetTurnaroundTime+0x140>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d202      	bcs.n	800704e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007048:	2307      	movs	r3, #7
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	e00a      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800704e:	2306      	movs	r3, #6
 8007050:	617b      	str	r3, [r7, #20]
 8007052:	e007      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d102      	bne.n	8007060 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800705a:	2309      	movs	r3, #9
 800705c:	617b      	str	r3, [r7, #20]
 800705e:	e001      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007060:	2309      	movs	r3, #9
 8007062:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	029b      	lsls	r3, r3, #10
 8007078:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800707c:	431a      	orrs	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	371c      	adds	r7, #28
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	00d8acbf 	.word	0x00d8acbf
 8007094:	00e4e1c0 	.word	0x00e4e1c0
 8007098:	00f42400 	.word	0x00f42400
 800709c:	01067380 	.word	0x01067380
 80070a0:	011a499f 	.word	0x011a499f
 80070a4:	01312cff 	.word	0x01312cff
 80070a8:	014ca43f 	.word	0x014ca43f
 80070ac:	016e3600 	.word	0x016e3600
 80070b0:	01a6ab1f 	.word	0x01a6ab1f
 80070b4:	01e84800 	.word	0x01e84800

080070b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f043 0201 	orr.w	r2, r3, #1
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070da:	b480      	push	{r7}
 80070dc:	b083      	sub	sp, #12
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f023 0201 	bic.w	r2, r3, #1
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007108:	2300      	movs	r3, #0
 800710a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007118:	78fb      	ldrb	r3, [r7, #3]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d115      	bne.n	800714a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800712a:	200a      	movs	r0, #10
 800712c:	f7fb fcb6 	bl	8002a9c <HAL_Delay>
      ms += 10U;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	330a      	adds	r3, #10
 8007134:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 f93f 	bl	80083ba <USB_GetMode>
 800713c:	4603      	mov	r3, r0
 800713e:	2b01      	cmp	r3, #1
 8007140:	d01e      	beq.n	8007180 <USB_SetCurrentMode+0x84>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2bc7      	cmp	r3, #199	@ 0xc7
 8007146:	d9f0      	bls.n	800712a <USB_SetCurrentMode+0x2e>
 8007148:	e01a      	b.n	8007180 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d115      	bne.n	800717c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800715c:	200a      	movs	r0, #10
 800715e:	f7fb fc9d 	bl	8002a9c <HAL_Delay>
      ms += 10U;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	330a      	adds	r3, #10
 8007166:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f001 f926 	bl	80083ba <USB_GetMode>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <USB_SetCurrentMode+0x84>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2bc7      	cmp	r3, #199	@ 0xc7
 8007178:	d9f0      	bls.n	800715c <USB_SetCurrentMode+0x60>
 800717a:	e001      	b.n	8007180 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e005      	b.n	800718c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2bc8      	cmp	r3, #200	@ 0xc8
 8007184:	d101      	bne.n	800718a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e000      	b.n	800718c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007194:	b084      	sub	sp, #16
 8007196:	b580      	push	{r7, lr}
 8007198:	b086      	sub	sp, #24
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80071a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80071ae:	2300      	movs	r3, #0
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	e009      	b.n	80071c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	3340      	adds	r3, #64	@ 0x40
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	2200      	movs	r2, #0
 80071c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	3301      	adds	r3, #1
 80071c6:	613b      	str	r3, [r7, #16]
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	2b0e      	cmp	r3, #14
 80071cc:	d9f2      	bls.n	80071b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d11c      	bne.n	8007210 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071e4:	f043 0302 	orr.w	r3, r3, #2
 80071e8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ee:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	e005      	b.n	800721c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007214:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007222:	461a      	mov	r2, r3
 8007224:	2300      	movs	r3, #0
 8007226:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007228:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800722c:	2b01      	cmp	r3, #1
 800722e:	d10d      	bne.n	800724c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007230:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007234:	2b00      	cmp	r3, #0
 8007236:	d104      	bne.n	8007242 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007238:	2100      	movs	r1, #0
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f968 	bl	8007510 <USB_SetDevSpeed>
 8007240:	e008      	b.n	8007254 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007242:	2101      	movs	r1, #1
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f963 	bl	8007510 <USB_SetDevSpeed>
 800724a:	e003      	b.n	8007254 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800724c:	2103      	movs	r1, #3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f95e 	bl	8007510 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007254:	2110      	movs	r1, #16
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f8fa 	bl	8007450 <USB_FlushTxFifo>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f924 	bl	80074b4 <USB_FlushRxFifo>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800727c:	461a      	mov	r2, r3
 800727e:	2300      	movs	r3, #0
 8007280:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007288:	461a      	mov	r2, r3
 800728a:	2300      	movs	r3, #0
 800728c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007294:	461a      	mov	r2, r3
 8007296:	2300      	movs	r3, #0
 8007298:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800729a:	2300      	movs	r3, #0
 800729c:	613b      	str	r3, [r7, #16]
 800729e:	e043      	b.n	8007328 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072b6:	d118      	bne.n	80072ea <USB_DevInit+0x156>
    {
      if (i == 0U)
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10a      	bne.n	80072d4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ca:	461a      	mov	r2, r3
 80072cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	e013      	b.n	80072fc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072e0:	461a      	mov	r2, r3
 80072e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80072e6:	6013      	str	r3, [r2, #0]
 80072e8:	e008      	b.n	80072fc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072f6:	461a      	mov	r2, r3
 80072f8:	2300      	movs	r3, #0
 80072fa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007308:	461a      	mov	r2, r3
 800730a:	2300      	movs	r3, #0
 800730c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	4413      	add	r3, r2
 8007316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800731a:	461a      	mov	r2, r3
 800731c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007320:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	3301      	adds	r3, #1
 8007326:	613b      	str	r3, [r7, #16]
 8007328:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800732c:	461a      	mov	r2, r3
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	4293      	cmp	r3, r2
 8007332:	d3b5      	bcc.n	80072a0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007334:	2300      	movs	r3, #0
 8007336:	613b      	str	r3, [r7, #16]
 8007338:	e043      	b.n	80073c2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4413      	add	r3, r2
 8007342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800734c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007350:	d118      	bne.n	8007384 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10a      	bne.n	800736e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007364:	461a      	mov	r2, r3
 8007366:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	e013      	b.n	8007396 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800737a:	461a      	mov	r2, r3
 800737c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	e008      	b.n	8007396 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4413      	add	r3, r2
 800738c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007390:	461a      	mov	r2, r3
 8007392:	2300      	movs	r3, #0
 8007394:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a2:	461a      	mov	r2, r3
 80073a4:	2300      	movs	r3, #0
 80073a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b4:	461a      	mov	r2, r3
 80073b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80073ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	3301      	adds	r3, #1
 80073c0:	613b      	str	r3, [r7, #16]
 80073c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80073c6:	461a      	mov	r2, r3
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d3b5      	bcc.n	800733a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073e0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80073ee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d105      	bne.n	8007404 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	f043 0210 	orr.w	r2, r3, #16
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699a      	ldr	r2, [r3, #24]
 8007408:	4b0f      	ldr	r3, [pc, #60]	@ (8007448 <USB_DevInit+0x2b4>)
 800740a:	4313      	orrs	r3, r2
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007410:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007414:	2b00      	cmp	r3, #0
 8007416:	d005      	beq.n	8007424 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	f043 0208 	orr.w	r2, r3, #8
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007424:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007428:	2b01      	cmp	r3, #1
 800742a:	d105      	bne.n	8007438 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699a      	ldr	r2, [r3, #24]
 8007430:	4b06      	ldr	r3, [pc, #24]	@ (800744c <USB_DevInit+0x2b8>)
 8007432:	4313      	orrs	r3, r2
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007438:	7dfb      	ldrb	r3, [r7, #23]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3718      	adds	r7, #24
 800743e:	46bd      	mov	sp, r7
 8007440:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007444:	b004      	add	sp, #16
 8007446:	4770      	bx	lr
 8007448:	803c3800 	.word	0x803c3800
 800744c:	40000004 	.word	0x40000004

08007450 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	3301      	adds	r3, #1
 8007462:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800746a:	d901      	bls.n	8007470 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e01b      	b.n	80074a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	daf2      	bge.n	800745e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	019b      	lsls	r3, r3, #6
 8007480:	f043 0220 	orr.w	r2, r3, #32
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	3301      	adds	r3, #1
 800748c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007494:	d901      	bls.n	800749a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e006      	b.n	80074a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	2b20      	cmp	r3, #32
 80074a4:	d0f0      	beq.n	8007488 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	3301      	adds	r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074cc:	d901      	bls.n	80074d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e018      	b.n	8007504 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	daf2      	bge.n	80074c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2210      	movs	r2, #16
 80074e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	3301      	adds	r3, #1
 80074e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074f0:	d901      	bls.n	80074f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e006      	b.n	8007504 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f003 0310 	and.w	r3, r3, #16
 80074fe:	2b10      	cmp	r3, #16
 8007500:	d0f0      	beq.n	80074e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	68f9      	ldr	r1, [r7, #12]
 800752c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007530:	4313      	orrs	r3, r2
 8007532:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007542:	b480      	push	{r7}
 8007544:	b087      	sub	sp, #28
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f003 0306 	and.w	r3, r3, #6
 800755a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d102      	bne.n	8007568 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007562:	2300      	movs	r3, #0
 8007564:	75fb      	strb	r3, [r7, #23]
 8007566:	e00a      	b.n	800757e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b02      	cmp	r3, #2
 800756c:	d002      	beq.n	8007574 <USB_GetDevSpeed+0x32>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2b06      	cmp	r3, #6
 8007572:	d102      	bne.n	800757a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007574:	2302      	movs	r3, #2
 8007576:	75fb      	strb	r3, [r7, #23]
 8007578:	e001      	b.n	800757e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800757a:	230f      	movs	r3, #15
 800757c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800757e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007580:	4618      	mov	r0, r3
 8007582:	371c      	adds	r7, #28
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	785b      	ldrb	r3, [r3, #1]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d139      	bne.n	800761c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ae:	69da      	ldr	r2, [r3, #28]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	f003 030f 	and.w	r3, r3, #15
 80075b8:	2101      	movs	r1, #1
 80075ba:	fa01 f303 	lsl.w	r3, r1, r3
 80075be:	b29b      	uxth	r3, r3
 80075c0:	68f9      	ldr	r1, [r7, #12]
 80075c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075c6:	4313      	orrs	r3, r2
 80075c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d153      	bne.n	8007688 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	791b      	ldrb	r3, [r3, #4]
 80075fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	059b      	lsls	r3, r3, #22
 8007602:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007604:	431a      	orrs	r2, r3
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	0159      	lsls	r1, r3, #5
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	440b      	add	r3, r1
 800760e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007612:	4619      	mov	r1, r3
 8007614:	4b20      	ldr	r3, [pc, #128]	@ (8007698 <USB_ActivateEndpoint+0x10c>)
 8007616:	4313      	orrs	r3, r2
 8007618:	600b      	str	r3, [r1, #0]
 800761a:	e035      	b.n	8007688 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007622:	69da      	ldr	r2, [r3, #28]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	f003 030f 	and.w	r3, r3, #15
 800762c:	2101      	movs	r1, #1
 800762e:	fa01 f303 	lsl.w	r3, r1, r3
 8007632:	041b      	lsls	r3, r3, #16
 8007634:	68f9      	ldr	r1, [r7, #12]
 8007636:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800763a:	4313      	orrs	r3, r2
 800763c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d119      	bne.n	8007688 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	791b      	ldrb	r3, [r3, #4]
 800766e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007670:	430b      	orrs	r3, r1
 8007672:	431a      	orrs	r2, r3
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	0159      	lsls	r1, r3, #5
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	440b      	add	r3, r1
 800767c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007680:	4619      	mov	r1, r3
 8007682:	4b05      	ldr	r3, [pc, #20]	@ (8007698 <USB_ActivateEndpoint+0x10c>)
 8007684:	4313      	orrs	r3, r2
 8007686:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	10008000 	.word	0x10008000

0800769c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	785b      	ldrb	r3, [r3, #1]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d161      	bne.n	800777c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076ce:	d11f      	bne.n	8007710 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	0151      	lsls	r1, r2, #5
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	440a      	add	r2, r1
 80076e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80076ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	0151      	lsls	r1, r2, #5
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	440a      	add	r2, r1
 8007706:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800770a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800770e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007716:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	2101      	movs	r1, #1
 8007722:	fa01 f303 	lsl.w	r3, r1, r3
 8007726:	b29b      	uxth	r3, r3
 8007728:	43db      	mvns	r3, r3
 800772a:	68f9      	ldr	r1, [r7, #12]
 800772c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007730:	4013      	ands	r3, r2
 8007732:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800773a:	69da      	ldr	r2, [r3, #28]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	f003 030f 	and.w	r3, r3, #15
 8007744:	2101      	movs	r1, #1
 8007746:	fa01 f303 	lsl.w	r3, r1, r3
 800774a:	b29b      	uxth	r3, r3
 800774c:	43db      	mvns	r3, r3
 800774e:	68f9      	ldr	r1, [r7, #12]
 8007750:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007754:	4013      	ands	r3, r2
 8007756:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4413      	add	r3, r2
 8007760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	0159      	lsls	r1, r3, #5
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	440b      	add	r3, r1
 800776e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007772:	4619      	mov	r1, r3
 8007774:	4b35      	ldr	r3, [pc, #212]	@ (800784c <USB_DeactivateEndpoint+0x1b0>)
 8007776:	4013      	ands	r3, r2
 8007778:	600b      	str	r3, [r1, #0]
 800777a:	e060      	b.n	800783e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800778e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007792:	d11f      	bne.n	80077d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	0151      	lsls	r1, r2, #5
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	440a      	add	r2, r1
 80077aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80077b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	0151      	lsls	r1, r2, #5
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	440a      	add	r2, r1
 80077ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	f003 030f 	and.w	r3, r3, #15
 80077e4:	2101      	movs	r1, #1
 80077e6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ea:	041b      	lsls	r3, r3, #16
 80077ec:	43db      	mvns	r3, r3
 80077ee:	68f9      	ldr	r1, [r7, #12]
 80077f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077f4:	4013      	ands	r3, r2
 80077f6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077fe:	69da      	ldr	r2, [r3, #28]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	f003 030f 	and.w	r3, r3, #15
 8007808:	2101      	movs	r1, #1
 800780a:	fa01 f303 	lsl.w	r3, r1, r3
 800780e:	041b      	lsls	r3, r3, #16
 8007810:	43db      	mvns	r3, r3
 8007812:	68f9      	ldr	r1, [r7, #12]
 8007814:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007818:	4013      	ands	r3, r2
 800781a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	0159      	lsls	r1, r3, #5
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	440b      	add	r3, r1
 8007832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007836:	4619      	mov	r1, r3
 8007838:	4b05      	ldr	r3, [pc, #20]	@ (8007850 <USB_DeactivateEndpoint+0x1b4>)
 800783a:	4013      	ands	r3, r2
 800783c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	ec337800 	.word	0xec337800
 8007850:	eff37800 	.word	0xeff37800

08007854 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b08a      	sub	sp, #40	@ 0x28
 8007858:	af02      	add	r7, sp, #8
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	4613      	mov	r3, r2
 8007860:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	785b      	ldrb	r3, [r3, #1]
 8007870:	2b01      	cmp	r3, #1
 8007872:	f040 8185 	bne.w	8007b80 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d132      	bne.n	80078e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800788a:	691a      	ldr	r2, [r3, #16]
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	0159      	lsls	r1, r3, #5
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	440b      	add	r3, r1
 8007894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007898:	4619      	mov	r1, r3
 800789a:	4ba7      	ldr	r3, [pc, #668]	@ (8007b38 <USB_EPStartXfer+0x2e4>)
 800789c:	4013      	ands	r3, r2
 800789e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	0151      	lsls	r1, r2, #5
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	440a      	add	r2, r1
 80078b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078cc:	691a      	ldr	r2, [r3, #16]
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	0159      	lsls	r1, r3, #5
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	440b      	add	r3, r1
 80078d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078da:	4619      	mov	r1, r3
 80078dc:	4b97      	ldr	r3, [pc, #604]	@ (8007b3c <USB_EPStartXfer+0x2e8>)
 80078de:	4013      	ands	r3, r2
 80078e0:	610b      	str	r3, [r1, #16]
 80078e2:	e097      	b.n	8007a14 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078f0:	691a      	ldr	r2, [r3, #16]
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	0159      	lsls	r1, r3, #5
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	440b      	add	r3, r1
 80078fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078fe:	4619      	mov	r1, r3
 8007900:	4b8e      	ldr	r3, [pc, #568]	@ (8007b3c <USB_EPStartXfer+0x2e8>)
 8007902:	4013      	ands	r3, r2
 8007904:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007912:	691a      	ldr	r2, [r3, #16]
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	0159      	lsls	r1, r3, #5
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	440b      	add	r3, r1
 800791c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007920:	4619      	mov	r1, r3
 8007922:	4b85      	ldr	r3, [pc, #532]	@ (8007b38 <USB_EPStartXfer+0x2e4>)
 8007924:	4013      	ands	r3, r2
 8007926:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d11a      	bne.n	8007964 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	691a      	ldr	r2, [r3, #16]
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	429a      	cmp	r2, r3
 8007938:	d903      	bls.n	8007942 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	0151      	lsls	r1, r2, #5
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	440a      	add	r2, r1
 8007958:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800795c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007960:	6113      	str	r3, [r2, #16]
 8007962:	e044      	b.n	80079ee <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	691a      	ldr	r2, [r3, #16]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	4413      	add	r3, r2
 800796e:	1e5a      	subs	r2, r3, #1
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	fbb2 f3f3 	udiv	r3, r2, r3
 8007978:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007986:	691a      	ldr	r2, [r3, #16]
 8007988:	8afb      	ldrh	r3, [r7, #22]
 800798a:	04d9      	lsls	r1, r3, #19
 800798c:	4b6c      	ldr	r3, [pc, #432]	@ (8007b40 <USB_EPStartXfer+0x2ec>)
 800798e:	400b      	ands	r3, r1
 8007990:	69b9      	ldr	r1, [r7, #24]
 8007992:	0148      	lsls	r0, r1, #5
 8007994:	69f9      	ldr	r1, [r7, #28]
 8007996:	4401      	add	r1, r0
 8007998:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800799c:	4313      	orrs	r3, r2
 800799e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	791b      	ldrb	r3, [r3, #4]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d122      	bne.n	80079ee <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	69ba      	ldr	r2, [r7, #24]
 80079b8:	0151      	lsls	r1, r2, #5
 80079ba:	69fa      	ldr	r2, [r7, #28]
 80079bc:	440a      	add	r2, r1
 80079be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079c2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80079c6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079d4:	691a      	ldr	r2, [r3, #16]
 80079d6:	8afb      	ldrh	r3, [r7, #22]
 80079d8:	075b      	lsls	r3, r3, #29
 80079da:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80079de:	69b9      	ldr	r1, [r7, #24]
 80079e0:	0148      	lsls	r0, r1, #5
 80079e2:	69f9      	ldr	r1, [r7, #28]
 80079e4:	4401      	add	r1, r0
 80079e6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80079ea:	4313      	orrs	r3, r2
 80079ec:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079fa:	691a      	ldr	r2, [r3, #16]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a04:	69b9      	ldr	r1, [r7, #24]
 8007a06:	0148      	lsls	r0, r1, #5
 8007a08:	69f9      	ldr	r1, [r7, #28]
 8007a0a:	4401      	add	r1, r0
 8007a0c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007a10:	4313      	orrs	r3, r2
 8007a12:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007a14:	79fb      	ldrb	r3, [r7, #7]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d14b      	bne.n	8007ab2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d009      	beq.n	8007a36 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a2e:	461a      	mov	r2, r3
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	69db      	ldr	r3, [r3, #28]
 8007a34:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	791b      	ldrb	r3, [r3, #4]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d128      	bne.n	8007a90 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d110      	bne.n	8007a70 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	0151      	lsls	r1, r2, #5
 8007a60:	69fa      	ldr	r2, [r7, #28]
 8007a62:	440a      	add	r2, r1
 8007a64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	e00f      	b.n	8007a90 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	015a      	lsls	r2, r3, #5
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	0151      	lsls	r1, r2, #5
 8007a82:	69fa      	ldr	r2, [r7, #28]
 8007a84:	440a      	add	r2, r1
 8007a86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a8e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	0151      	lsls	r1, r2, #5
 8007aa2:	69fa      	ldr	r2, [r7, #28]
 8007aa4:	440a      	add	r2, r1
 8007aa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007aaa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007aae:	6013      	str	r3, [r2, #0]
 8007ab0:	e169      	b.n	8007d86 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	0151      	lsls	r1, r2, #5
 8007ac4:	69fa      	ldr	r2, [r7, #28]
 8007ac6:	440a      	add	r2, r1
 8007ac8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007acc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007ad0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	791b      	ldrb	r3, [r3, #4]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d015      	beq.n	8007b06 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 8151 	beq.w	8007d86 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	f003 030f 	and.w	r3, r3, #15
 8007af4:	2101      	movs	r1, #1
 8007af6:	fa01 f303 	lsl.w	r3, r1, r3
 8007afa:	69f9      	ldr	r1, [r7, #28]
 8007afc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b00:	4313      	orrs	r3, r2
 8007b02:	634b      	str	r3, [r1, #52]	@ 0x34
 8007b04:	e13f      	b.n	8007d86 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d116      	bne.n	8007b44 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	0151      	lsls	r1, r2, #5
 8007b28:	69fa      	ldr	r2, [r7, #28]
 8007b2a:	440a      	add	r2, r1
 8007b2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b34:	6013      	str	r3, [r2, #0]
 8007b36:	e015      	b.n	8007b64 <USB_EPStartXfer+0x310>
 8007b38:	e007ffff 	.word	0xe007ffff
 8007b3c:	fff80000 	.word	0xfff80000
 8007b40:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	0151      	lsls	r1, r2, #5
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	440a      	add	r2, r1
 8007b5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b62:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	68d9      	ldr	r1, [r3, #12]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	781a      	ldrb	r2, [r3, #0]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	b298      	uxth	r0, r3
 8007b72:	79fb      	ldrb	r3, [r7, #7]
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	4603      	mov	r3, r0
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 f9b9 	bl	8007ef0 <USB_WritePacket>
 8007b7e:	e102      	b.n	8007d86 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b8c:	691a      	ldr	r2, [r3, #16]
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	0159      	lsls	r1, r3, #5
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	440b      	add	r3, r1
 8007b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	4b7c      	ldr	r3, [pc, #496]	@ (8007d90 <USB_EPStartXfer+0x53c>)
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bae:	691a      	ldr	r2, [r3, #16]
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	0159      	lsls	r1, r3, #5
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	440b      	add	r3, r1
 8007bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4b75      	ldr	r3, [pc, #468]	@ (8007d94 <USB_EPStartXfer+0x540>)
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d12f      	bne.n	8007c2a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	689a      	ldr	r2, [r3, #8]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	689a      	ldr	r2, [r3, #8]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bee:	691a      	ldr	r2, [r3, #16]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	6a1b      	ldr	r3, [r3, #32]
 8007bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bf8:	69b9      	ldr	r1, [r7, #24]
 8007bfa:	0148      	lsls	r0, r1, #5
 8007bfc:	69f9      	ldr	r1, [r7, #28]
 8007bfe:	4401      	add	r1, r0
 8007c00:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c04:	4313      	orrs	r3, r2
 8007c06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c26:	6113      	str	r3, [r2, #16]
 8007c28:	e05f      	b.n	8007cea <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d123      	bne.n	8007c7a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c3e:	691a      	ldr	r2, [r3, #16]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c48:	69b9      	ldr	r1, [r7, #24]
 8007c4a:	0148      	lsls	r0, r1, #5
 8007c4c:	69f9      	ldr	r1, [r7, #28]
 8007c4e:	4401      	add	r1, r0
 8007c50:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c54:	4313      	orrs	r3, r2
 8007c56:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	69ba      	ldr	r2, [r7, #24]
 8007c68:	0151      	lsls	r1, r2, #5
 8007c6a:	69fa      	ldr	r2, [r7, #28]
 8007c6c:	440a      	add	r2, r1
 8007c6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c76:	6113      	str	r3, [r2, #16]
 8007c78:	e037      	b.n	8007cea <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	691a      	ldr	r2, [r3, #16]
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	4413      	add	r3, r2
 8007c84:	1e5a      	subs	r2, r3, #1
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c8e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	8afa      	ldrh	r2, [r7, #22]
 8007c96:	fb03 f202 	mul.w	r2, r3, r2
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007caa:	691a      	ldr	r2, [r3, #16]
 8007cac:	8afb      	ldrh	r3, [r7, #22]
 8007cae:	04d9      	lsls	r1, r3, #19
 8007cb0:	4b39      	ldr	r3, [pc, #228]	@ (8007d98 <USB_EPStartXfer+0x544>)
 8007cb2:	400b      	ands	r3, r1
 8007cb4:	69b9      	ldr	r1, [r7, #24]
 8007cb6:	0148      	lsls	r0, r1, #5
 8007cb8:	69f9      	ldr	r1, [r7, #28]
 8007cba:	4401      	add	r1, r0
 8007cbc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd0:	691a      	ldr	r2, [r3, #16]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cda:	69b9      	ldr	r1, [r7, #24]
 8007cdc:	0148      	lsls	r0, r1, #5
 8007cde:	69f9      	ldr	r1, [r7, #28]
 8007ce0:	4401      	add	r1, r0
 8007ce2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d10d      	bne.n	8007d0c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d009      	beq.n	8007d0c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	68d9      	ldr	r1, [r3, #12]
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d08:	460a      	mov	r2, r1
 8007d0a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	791b      	ldrb	r3, [r3, #4]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d128      	bne.n	8007d66 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d110      	bne.n	8007d46 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	0151      	lsls	r1, r2, #5
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	440a      	add	r2, r1
 8007d3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d3e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d42:	6013      	str	r3, [r2, #0]
 8007d44:	e00f      	b.n	8007d66 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	015a      	lsls	r2, r3, #5
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	69ba      	ldr	r2, [r7, #24]
 8007d56:	0151      	lsls	r1, r2, #5
 8007d58:	69fa      	ldr	r2, [r7, #28]
 8007d5a:	440a      	add	r2, r1
 8007d5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d64:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	015a      	lsls	r2, r3, #5
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	0151      	lsls	r1, r2, #5
 8007d78:	69fa      	ldr	r2, [r7, #28]
 8007d7a:	440a      	add	r2, r1
 8007d7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d80:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007d84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3720      	adds	r7, #32
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	fff80000 	.word	0xfff80000
 8007d94:	e007ffff 	.word	0xe007ffff
 8007d98:	1ff80000 	.word	0x1ff80000

08007d9c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	785b      	ldrb	r3, [r3, #1]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d14a      	bne.n	8007e50 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dd2:	f040 8086 	bne.w	8007ee2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	7812      	ldrb	r2, [r2, #0]
 8007dea:	0151      	lsls	r1, r2, #5
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	440a      	add	r2, r1
 8007df0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007df4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007df8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	015a      	lsls	r2, r3, #5
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	4413      	add	r3, r2
 8007e04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	7812      	ldrb	r2, [r2, #0]
 8007e0e:	0151      	lsls	r1, r2, #5
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	440a      	add	r2, r1
 8007e14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	3301      	adds	r3, #1
 8007e22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d902      	bls.n	8007e34 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	75fb      	strb	r3, [r7, #23]
          break;
 8007e32:	e056      	b.n	8007ee2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e4c:	d0e7      	beq.n	8007e1e <USB_EPStopXfer+0x82>
 8007e4e:	e048      	b.n	8007ee2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e68:	d13b      	bne.n	8007ee2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	7812      	ldrb	r2, [r2, #0]
 8007e7e:	0151      	lsls	r1, r2, #5
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	440a      	add	r2, r1
 8007e84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007e8c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	7812      	ldrb	r2, [r2, #0]
 8007ea2:	0151      	lsls	r1, r2, #5
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	440a      	add	r2, r1
 8007ea8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007eac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007eb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d902      	bls.n	8007ec8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ec6:	e00c      	b.n	8007ee2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007edc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ee0:	d0e7      	beq.n	8007eb2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	371c      	adds	r7, #28
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b089      	sub	sp, #36	@ 0x24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	4611      	mov	r1, r2
 8007efc:	461a      	mov	r2, r3
 8007efe:	460b      	mov	r3, r1
 8007f00:	71fb      	strb	r3, [r7, #7]
 8007f02:	4613      	mov	r3, r2
 8007f04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007f0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d123      	bne.n	8007f5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007f16:	88bb      	ldrh	r3, [r7, #4]
 8007f18:	3303      	adds	r3, #3
 8007f1a:	089b      	lsrs	r3, r3, #2
 8007f1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007f1e:	2300      	movs	r3, #0
 8007f20:	61bb      	str	r3, [r7, #24]
 8007f22:	e018      	b.n	8007f56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007f24:	79fb      	ldrb	r3, [r7, #7]
 8007f26:	031a      	lsls	r2, r3, #12
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f30:	461a      	mov	r2, r3
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	3301      	adds	r3, #1
 8007f42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	3301      	adds	r3, #1
 8007f48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	3301      	adds	r3, #1
 8007f54:	61bb      	str	r3, [r7, #24]
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d3e2      	bcc.n	8007f24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3724      	adds	r7, #36	@ 0x24
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b08b      	sub	sp, #44	@ 0x2c
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	4613      	mov	r3, r2
 8007f78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f82:	88fb      	ldrh	r3, [r7, #6]
 8007f84:	089b      	lsrs	r3, r3, #2
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f8a:	88fb      	ldrh	r3, [r7, #6]
 8007f8c:	f003 0303 	and.w	r3, r3, #3
 8007f90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007f92:	2300      	movs	r3, #0
 8007f94:	623b      	str	r3, [r7, #32]
 8007f96:	e014      	b.n	8007fc2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa2:	601a      	str	r2, [r3, #0]
    pDest++;
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fac:	3301      	adds	r3, #1
 8007fae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb8:	3301      	adds	r3, #1
 8007fba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	623b      	str	r3, [r7, #32]
 8007fc2:	6a3a      	ldr	r2, [r7, #32]
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d3e6      	bcc.n	8007f98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007fca:	8bfb      	ldrh	r3, [r7, #30]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d01e      	beq.n	800800e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f107 0310 	add.w	r3, r7, #16
 8007fe0:	6812      	ldr	r2, [r2, #0]
 8007fe2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	00db      	lsls	r3, r3, #3
 8007fec:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff4:	701a      	strb	r2, [r3, #0]
      i++;
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffe:	3301      	adds	r3, #1
 8008000:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008002:	8bfb      	ldrh	r3, [r7, #30]
 8008004:	3b01      	subs	r3, #1
 8008006:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008008:	8bfb      	ldrh	r3, [r7, #30]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1ea      	bne.n	8007fe4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008010:	4618      	mov	r0, r3
 8008012:	372c      	adds	r7, #44	@ 0x2c
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	785b      	ldrb	r3, [r3, #1]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d12c      	bne.n	8008092 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	db12      	blt.n	8008070 <USB_EPSetStall+0x54>
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00f      	beq.n	8008070 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	0151      	lsls	r1, r2, #5
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	440a      	add	r2, r1
 8008066:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800806a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800806e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	0151      	lsls	r1, r2, #5
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	440a      	add	r2, r1
 8008086:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800808a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800808e:	6013      	str	r3, [r2, #0]
 8008090:	e02b      	b.n	80080ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	db12      	blt.n	80080ca <USB_EPSetStall+0xae>
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00f      	beq.n	80080ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	015a      	lsls	r2, r3, #5
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	4413      	add	r3, r2
 80080b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	0151      	lsls	r1, r2, #5
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	440a      	add	r2, r1
 80080c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80080c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	0151      	lsls	r1, r2, #5
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	440a      	add	r2, r1
 80080e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80080e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	785b      	ldrb	r3, [r3, #1]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d128      	bne.n	8008166 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	0151      	lsls	r1, r2, #5
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	440a      	add	r2, r1
 800812a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800812e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008132:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	791b      	ldrb	r3, [r3, #4]
 8008138:	2b03      	cmp	r3, #3
 800813a:	d003      	beq.n	8008144 <USB_EPClearStall+0x4c>
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	791b      	ldrb	r3, [r3, #4]
 8008140:	2b02      	cmp	r3, #2
 8008142:	d138      	bne.n	80081b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	015a      	lsls	r2, r3, #5
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4413      	add	r3, r2
 800814c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	0151      	lsls	r1, r2, #5
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	440a      	add	r2, r1
 800815a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800815e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008162:	6013      	str	r3, [r2, #0]
 8008164:	e027      	b.n	80081b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4413      	add	r3, r2
 800816e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	0151      	lsls	r1, r2, #5
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	440a      	add	r2, r1
 800817c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008180:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008184:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	791b      	ldrb	r3, [r3, #4]
 800818a:	2b03      	cmp	r3, #3
 800818c:	d003      	beq.n	8008196 <USB_EPClearStall+0x9e>
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	791b      	ldrb	r3, [r3, #4]
 8008192:	2b02      	cmp	r3, #2
 8008194:	d10f      	bne.n	80081b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	4413      	add	r3, r2
 800819e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	0151      	lsls	r1, r2, #5
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	440a      	add	r2, r1
 80081ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3714      	adds	r7, #20
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081e2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80081e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	78fb      	ldrb	r3, [r7, #3]
 80081f2:	011b      	lsls	r3, r3, #4
 80081f4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80081f8:	68f9      	ldr	r1, [r7, #12]
 80081fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081fe:	4313      	orrs	r3, r2
 8008200:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800822a:	f023 0303 	bic.w	r3, r3, #3
 800822e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800823e:	f023 0302 	bic.w	r3, r3, #2
 8008242:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008252:	b480      	push	{r7}
 8008254:	b085      	sub	sp, #20
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800826c:	f023 0303 	bic.w	r3, r3, #3
 8008270:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008280:	f043 0302 	orr.w	r3, r3, #2
 8008284:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	4013      	ands	r3, r2
 80082aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80082ac:	68fb      	ldr	r3, [r7, #12]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3714      	adds	r7, #20
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b085      	sub	sp, #20
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	4013      	ands	r3, r2
 80082dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	0c1b      	lsrs	r3, r3, #16
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3714      	adds	r7, #20
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b085      	sub	sp, #20
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	4013      	ands	r3, r2
 8008310:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	b29b      	uxth	r3, r3
}
 8008316:	4618      	mov	r0, r3
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008322:	b480      	push	{r7}
 8008324:	b085      	sub	sp, #20
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	460b      	mov	r3, r1
 800832c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008332:	78fb      	ldrb	r3, [r7, #3]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	4413      	add	r3, r2
 800833a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	4013      	ands	r3, r2
 800834e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008350:	68bb      	ldr	r3, [r7, #8]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800835e:	b480      	push	{r7}
 8008360:	b087      	sub	sp, #28
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	460b      	mov	r3, r1
 8008368:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800837e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008380:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008382:	78fb      	ldrb	r3, [r7, #3]
 8008384:	f003 030f 	and.w	r3, r3, #15
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	fa22 f303 	lsr.w	r3, r2, r3
 800838e:	01db      	lsls	r3, r3, #7
 8008390:	b2db      	uxtb	r3, r3
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	4313      	orrs	r3, r2
 8008396:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008398:	78fb      	ldrb	r3, [r7, #3]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	4013      	ands	r3, r2
 80083aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80083ac:	68bb      	ldr	r3, [r7, #8]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	371c      	adds	r7, #28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	f003 0301 	and.w	r3, r3, #1
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
	...

080083d8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083f2:	4619      	mov	r1, r3
 80083f4:	4b09      	ldr	r3, [pc, #36]	@ (800841c <USB_ActivateSetup+0x44>)
 80083f6:	4013      	ands	r3, r2
 80083f8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800840c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	fffff800 	.word	0xfffff800

08008420 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	460b      	mov	r3, r1
 800842a:	607a      	str	r2, [r7, #4]
 800842c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	333c      	adds	r3, #60	@ 0x3c
 8008436:	3304      	adds	r3, #4
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	4a26      	ldr	r2, [pc, #152]	@ (80084d8 <USB_EP0_OutStart+0xb8>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d90a      	bls.n	800845a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008450:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008454:	d101      	bne.n	800845a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	e037      	b.n	80084ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008460:	461a      	mov	r2, r3
 8008462:	2300      	movs	r3, #0
 8008464:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008474:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008478:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	697a      	ldr	r2, [r7, #20]
 8008484:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008488:	f043 0318 	orr.w	r3, r3, #24
 800848c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800849c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80084a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80084a2:	7afb      	ldrb	r3, [r7, #11]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d10f      	bne.n	80084c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ae:	461a      	mov	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084c2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80084c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	371c      	adds	r7, #28
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	4f54300a 	.word	0x4f54300a

080084dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084e4:	2300      	movs	r3, #0
 80084e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	3301      	adds	r3, #1
 80084ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084f4:	d901      	bls.n	80084fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e01b      	b.n	8008532 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	daf2      	bge.n	80084e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008502:	2300      	movs	r3, #0
 8008504:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	f043 0201 	orr.w	r2, r3, #1
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	3301      	adds	r3, #1
 8008516:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800851e:	d901      	bls.n	8008524 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e006      	b.n	8008532 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b01      	cmp	r3, #1
 800852e:	d0f0      	beq.n	8008512 <USB_CoreReset+0x36>

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
	...

08008540 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	460b      	mov	r3, r1
 800854a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800854c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008550:	f002 fcd8 	bl	800af04 <USBD_static_malloc>
 8008554:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d109      	bne.n	8008570 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	32b0      	adds	r2, #176	@ 0xb0
 8008566:	2100      	movs	r1, #0
 8008568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800856c:	2302      	movs	r3, #2
 800856e:	e0d4      	b.n	800871a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008570:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008574:	2100      	movs	r1, #0
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f002 febc 	bl	800b2f4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	32b0      	adds	r2, #176	@ 0xb0
 8008586:	68f9      	ldr	r1, [r7, #12]
 8008588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	32b0      	adds	r2, #176	@ 0xb0
 8008596:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	7c1b      	ldrb	r3, [r3, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d138      	bne.n	800861a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80085a8:	4b5e      	ldr	r3, [pc, #376]	@ (8008724 <USBD_CDC_Init+0x1e4>)
 80085aa:	7819      	ldrb	r1, [r3, #0]
 80085ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80085b0:	2202      	movs	r2, #2
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f002 fb83 	bl	800acbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80085b8:	4b5a      	ldr	r3, [pc, #360]	@ (8008724 <USBD_CDC_Init+0x1e4>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	f003 020f 	and.w	r2, r3, #15
 80085c0:	6879      	ldr	r1, [r7, #4]
 80085c2:	4613      	mov	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	440b      	add	r3, r1
 80085cc:	3324      	adds	r3, #36	@ 0x24
 80085ce:	2201      	movs	r2, #1
 80085d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80085d2:	4b55      	ldr	r3, [pc, #340]	@ (8008728 <USBD_CDC_Init+0x1e8>)
 80085d4:	7819      	ldrb	r1, [r3, #0]
 80085d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80085da:	2202      	movs	r2, #2
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f002 fb6e 	bl	800acbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80085e2:	4b51      	ldr	r3, [pc, #324]	@ (8008728 <USBD_CDC_Init+0x1e8>)
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	f003 020f 	and.w	r2, r3, #15
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	4613      	mov	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	440b      	add	r3, r1
 80085f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80085fa:	2201      	movs	r2, #1
 80085fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80085fe:	4b4b      	ldr	r3, [pc, #300]	@ (800872c <USBD_CDC_Init+0x1ec>)
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	f003 020f 	and.w	r2, r3, #15
 8008606:	6879      	ldr	r1, [r7, #4]
 8008608:	4613      	mov	r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	4413      	add	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	440b      	add	r3, r1
 8008612:	3326      	adds	r3, #38	@ 0x26
 8008614:	2210      	movs	r2, #16
 8008616:	801a      	strh	r2, [r3, #0]
 8008618:	e035      	b.n	8008686 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800861a:	4b42      	ldr	r3, [pc, #264]	@ (8008724 <USBD_CDC_Init+0x1e4>)
 800861c:	7819      	ldrb	r1, [r3, #0]
 800861e:	2340      	movs	r3, #64	@ 0x40
 8008620:	2202      	movs	r2, #2
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f002 fb4b 	bl	800acbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008628:	4b3e      	ldr	r3, [pc, #248]	@ (8008724 <USBD_CDC_Init+0x1e4>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	f003 020f 	and.w	r2, r3, #15
 8008630:	6879      	ldr	r1, [r7, #4]
 8008632:	4613      	mov	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	440b      	add	r3, r1
 800863c:	3324      	adds	r3, #36	@ 0x24
 800863e:	2201      	movs	r2, #1
 8008640:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008642:	4b39      	ldr	r3, [pc, #228]	@ (8008728 <USBD_CDC_Init+0x1e8>)
 8008644:	7819      	ldrb	r1, [r3, #0]
 8008646:	2340      	movs	r3, #64	@ 0x40
 8008648:	2202      	movs	r2, #2
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f002 fb37 	bl	800acbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008650:	4b35      	ldr	r3, [pc, #212]	@ (8008728 <USBD_CDC_Init+0x1e8>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	f003 020f 	and.w	r2, r3, #15
 8008658:	6879      	ldr	r1, [r7, #4]
 800865a:	4613      	mov	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	440b      	add	r3, r1
 8008664:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008668:	2201      	movs	r2, #1
 800866a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800866c:	4b2f      	ldr	r3, [pc, #188]	@ (800872c <USBD_CDC_Init+0x1ec>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	f003 020f 	and.w	r2, r3, #15
 8008674:	6879      	ldr	r1, [r7, #4]
 8008676:	4613      	mov	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	440b      	add	r3, r1
 8008680:	3326      	adds	r3, #38	@ 0x26
 8008682:	2210      	movs	r2, #16
 8008684:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008686:	4b29      	ldr	r3, [pc, #164]	@ (800872c <USBD_CDC_Init+0x1ec>)
 8008688:	7819      	ldrb	r1, [r3, #0]
 800868a:	2308      	movs	r3, #8
 800868c:	2203      	movs	r2, #3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f002 fb15 	bl	800acbe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008694:	4b25      	ldr	r3, [pc, #148]	@ (800872c <USBD_CDC_Init+0x1ec>)
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	f003 020f 	and.w	r2, r3, #15
 800869c:	6879      	ldr	r1, [r7, #4]
 800869e:	4613      	mov	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4413      	add	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	440b      	add	r3, r1
 80086a8:	3324      	adds	r3, #36	@ 0x24
 80086aa:	2201      	movs	r2, #1
 80086ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	33b0      	adds	r3, #176	@ 0xb0
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	4413      	add	r3, r2
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80086e4:	2302      	movs	r3, #2
 80086e6:	e018      	b.n	800871a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	7c1b      	ldrb	r3, [r3, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10a      	bne.n	8008706 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80086f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008728 <USBD_CDC_Init+0x1e8>)
 80086f2:	7819      	ldrb	r1, [r3, #0]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80086fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f002 fbcc 	bl	800ae9c <USBD_LL_PrepareReceive>
 8008704:	e008      	b.n	8008718 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008706:	4b08      	ldr	r3, [pc, #32]	@ (8008728 <USBD_CDC_Init+0x1e8>)
 8008708:	7819      	ldrb	r1, [r3, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008710:	2340      	movs	r3, #64	@ 0x40
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f002 fbc2 	bl	800ae9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	2400209f 	.word	0x2400209f
 8008728:	240020a0 	.word	0x240020a0
 800872c:	240020a1 	.word	0x240020a1

08008730 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	460b      	mov	r3, r1
 800873a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800873c:	4b3a      	ldr	r3, [pc, #232]	@ (8008828 <USBD_CDC_DeInit+0xf8>)
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f002 fae1 	bl	800ad0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008748:	4b37      	ldr	r3, [pc, #220]	@ (8008828 <USBD_CDC_DeInit+0xf8>)
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	f003 020f 	and.w	r2, r3, #15
 8008750:	6879      	ldr	r1, [r7, #4]
 8008752:	4613      	mov	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	440b      	add	r3, r1
 800875c:	3324      	adds	r3, #36	@ 0x24
 800875e:	2200      	movs	r2, #0
 8008760:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008762:	4b32      	ldr	r3, [pc, #200]	@ (800882c <USBD_CDC_DeInit+0xfc>)
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	4619      	mov	r1, r3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f002 face 	bl	800ad0a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800876e:	4b2f      	ldr	r3, [pc, #188]	@ (800882c <USBD_CDC_DeInit+0xfc>)
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	f003 020f 	and.w	r2, r3, #15
 8008776:	6879      	ldr	r1, [r7, #4]
 8008778:	4613      	mov	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4413      	add	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	440b      	add	r3, r1
 8008782:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008786:	2200      	movs	r2, #0
 8008788:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800878a:	4b29      	ldr	r3, [pc, #164]	@ (8008830 <USBD_CDC_DeInit+0x100>)
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f002 faba 	bl	800ad0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008796:	4b26      	ldr	r3, [pc, #152]	@ (8008830 <USBD_CDC_DeInit+0x100>)
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	f003 020f 	and.w	r2, r3, #15
 800879e:	6879      	ldr	r1, [r7, #4]
 80087a0:	4613      	mov	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	440b      	add	r3, r1
 80087aa:	3324      	adds	r3, #36	@ 0x24
 80087ac:	2200      	movs	r2, #0
 80087ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80087b0:	4b1f      	ldr	r3, [pc, #124]	@ (8008830 <USBD_CDC_DeInit+0x100>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	f003 020f 	and.w	r2, r3, #15
 80087b8:	6879      	ldr	r1, [r7, #4]
 80087ba:	4613      	mov	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	440b      	add	r3, r1
 80087c4:	3326      	adds	r3, #38	@ 0x26
 80087c6:	2200      	movs	r2, #0
 80087c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	32b0      	adds	r2, #176	@ 0xb0
 80087d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d01f      	beq.n	800881c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	33b0      	adds	r3, #176	@ 0xb0
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4413      	add	r3, r2
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	32b0      	adds	r2, #176	@ 0xb0
 80087fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087fe:	4618      	mov	r0, r3
 8008800:	f002 fb8e 	bl	800af20 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	32b0      	adds	r2, #176	@ 0xb0
 800880e:	2100      	movs	r1, #0
 8008810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	2400209f 	.word	0x2400209f
 800882c:	240020a0 	.word	0x240020a0
 8008830:	240020a1 	.word	0x240020a1

08008834 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	32b0      	adds	r2, #176	@ 0xb0
 8008848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800884e:	2300      	movs	r3, #0
 8008850:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008852:	2300      	movs	r3, #0
 8008854:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008856:	2300      	movs	r3, #0
 8008858:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d101      	bne.n	8008864 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008860:	2303      	movs	r3, #3
 8008862:	e0bf      	b.n	80089e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800886c:	2b00      	cmp	r3, #0
 800886e:	d050      	beq.n	8008912 <USBD_CDC_Setup+0xde>
 8008870:	2b20      	cmp	r3, #32
 8008872:	f040 80af 	bne.w	80089d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	88db      	ldrh	r3, [r3, #6]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d03a      	beq.n	80088f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	b25b      	sxtb	r3, r3
 8008884:	2b00      	cmp	r3, #0
 8008886:	da1b      	bge.n	80088c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	33b0      	adds	r3, #176	@ 0xb0
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800889e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	88d2      	ldrh	r2, [r2, #6]
 80088a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	88db      	ldrh	r3, [r3, #6]
 80088aa:	2b07      	cmp	r3, #7
 80088ac:	bf28      	it	cs
 80088ae:	2307      	movcs	r3, #7
 80088b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	89fa      	ldrh	r2, [r7, #14]
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f001 fdbd 	bl	800a438 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80088be:	e090      	b.n	80089e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	785a      	ldrb	r2, [r3, #1]
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	88db      	ldrh	r3, [r3, #6]
 80088ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80088d0:	d803      	bhi.n	80088da <USBD_CDC_Setup+0xa6>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	88db      	ldrh	r3, [r3, #6]
 80088d6:	b2da      	uxtb	r2, r3
 80088d8:	e000      	b.n	80088dc <USBD_CDC_Setup+0xa8>
 80088da:	2240      	movs	r2, #64	@ 0x40
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80088e2:	6939      	ldr	r1, [r7, #16]
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80088ea:	461a      	mov	r2, r3
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f001 fdcf 	bl	800a490 <USBD_CtlPrepareRx>
      break;
 80088f2:	e076      	b.n	80089e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	33b0      	adds	r3, #176	@ 0xb0
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	7850      	ldrb	r0, [r2, #1]
 800890a:	2200      	movs	r2, #0
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	4798      	blx	r3
      break;
 8008910:	e067      	b.n	80089e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	785b      	ldrb	r3, [r3, #1]
 8008916:	2b0b      	cmp	r3, #11
 8008918:	d851      	bhi.n	80089be <USBD_CDC_Setup+0x18a>
 800891a:	a201      	add	r2, pc, #4	@ (adr r2, 8008920 <USBD_CDC_Setup+0xec>)
 800891c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008920:	08008951 	.word	0x08008951
 8008924:	080089cd 	.word	0x080089cd
 8008928:	080089bf 	.word	0x080089bf
 800892c:	080089bf 	.word	0x080089bf
 8008930:	080089bf 	.word	0x080089bf
 8008934:	080089bf 	.word	0x080089bf
 8008938:	080089bf 	.word	0x080089bf
 800893c:	080089bf 	.word	0x080089bf
 8008940:	080089bf 	.word	0x080089bf
 8008944:	080089bf 	.word	0x080089bf
 8008948:	0800897b 	.word	0x0800897b
 800894c:	080089a5 	.word	0x080089a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008956:	b2db      	uxtb	r3, r3
 8008958:	2b03      	cmp	r3, #3
 800895a:	d107      	bne.n	800896c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800895c:	f107 030a 	add.w	r3, r7, #10
 8008960:	2202      	movs	r2, #2
 8008962:	4619      	mov	r1, r3
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f001 fd67 	bl	800a438 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800896a:	e032      	b.n	80089d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 fce5 	bl	800a33e <USBD_CtlError>
            ret = USBD_FAIL;
 8008974:	2303      	movs	r3, #3
 8008976:	75fb      	strb	r3, [r7, #23]
          break;
 8008978:	e02b      	b.n	80089d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b03      	cmp	r3, #3
 8008984:	d107      	bne.n	8008996 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008986:	f107 030d 	add.w	r3, r7, #13
 800898a:	2201      	movs	r2, #1
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f001 fd52 	bl	800a438 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008994:	e01d      	b.n	80089d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f001 fcd0 	bl	800a33e <USBD_CtlError>
            ret = USBD_FAIL;
 800899e:	2303      	movs	r3, #3
 80089a0:	75fb      	strb	r3, [r7, #23]
          break;
 80089a2:	e016      	b.n	80089d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b03      	cmp	r3, #3
 80089ae:	d00f      	beq.n	80089d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f001 fcc3 	bl	800a33e <USBD_CtlError>
            ret = USBD_FAIL;
 80089b8:	2303      	movs	r3, #3
 80089ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80089bc:	e008      	b.n	80089d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f001 fcbc 	bl	800a33e <USBD_CtlError>
          ret = USBD_FAIL;
 80089c6:	2303      	movs	r3, #3
 80089c8:	75fb      	strb	r3, [r7, #23]
          break;
 80089ca:	e002      	b.n	80089d2 <USBD_CDC_Setup+0x19e>
          break;
 80089cc:	bf00      	nop
 80089ce:	e008      	b.n	80089e2 <USBD_CDC_Setup+0x1ae>
          break;
 80089d0:	bf00      	nop
      }
      break;
 80089d2:	e006      	b.n	80089e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f001 fcb1 	bl	800a33e <USBD_CtlError>
      ret = USBD_FAIL;
 80089dc:	2303      	movs	r3, #3
 80089de:	75fb      	strb	r3, [r7, #23]
      break;
 80089e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80089e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3718      	adds	r7, #24
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	460b      	mov	r3, r1
 80089f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80089fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	32b0      	adds	r2, #176	@ 0xb0
 8008a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d101      	bne.n	8008a16 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e065      	b.n	8008ae2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	32b0      	adds	r2, #176	@ 0xb0
 8008a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008a26:	78fb      	ldrb	r3, [r7, #3]
 8008a28:	f003 020f 	and.w	r2, r3, #15
 8008a2c:	6879      	ldr	r1, [r7, #4]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	440b      	add	r3, r1
 8008a38:	3318      	adds	r3, #24
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d02f      	beq.n	8008aa0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	f003 020f 	and.w	r2, r3, #15
 8008a46:	6879      	ldr	r1, [r7, #4]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	440b      	add	r3, r1
 8008a52:	3318      	adds	r3, #24
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	78fb      	ldrb	r3, [r7, #3]
 8008a58:	f003 010f 	and.w	r1, r3, #15
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	460b      	mov	r3, r1
 8008a60:	00db      	lsls	r3, r3, #3
 8008a62:	440b      	add	r3, r1
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4403      	add	r3, r0
 8008a68:	331c      	adds	r3, #28
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008a70:	fb01 f303 	mul.w	r3, r1, r3
 8008a74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d112      	bne.n	8008aa0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008a7a:	78fb      	ldrb	r3, [r7, #3]
 8008a7c:	f003 020f 	and.w	r2, r3, #15
 8008a80:	6879      	ldr	r1, [r7, #4]
 8008a82:	4613      	mov	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	440b      	add	r3, r1
 8008a8c:	3318      	adds	r3, #24
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a92:	78f9      	ldrb	r1, [r7, #3]
 8008a94:	2300      	movs	r3, #0
 8008a96:	2200      	movs	r2, #0
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f002 f9de 	bl	800ae5a <USBD_LL_Transmit>
 8008a9e:	e01f      	b.n	8008ae0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	33b0      	adds	r3, #176	@ 0xb0
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4413      	add	r3, r2
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d010      	beq.n	8008ae0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	33b0      	adds	r3, #176	@ 0xb0
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008adc:	78fa      	ldrb	r2, [r7, #3]
 8008ade:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b084      	sub	sp, #16
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	460b      	mov	r3, r1
 8008af4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	32b0      	adds	r2, #176	@ 0xb0
 8008b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	32b0      	adds	r2, #176	@ 0xb0
 8008b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d101      	bne.n	8008b1c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e01a      	b.n	8008b52 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b1c:	78fb      	ldrb	r3, [r7, #3]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f002 f9dc 	bl	800aede <USBD_LL_GetRxDataSize>
 8008b26:	4602      	mov	r2, r0
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	33b0      	adds	r3, #176	@ 0xb0
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b084      	sub	sp, #16
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	32b0      	adds	r2, #176	@ 0xb0
 8008b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e024      	b.n	8008bc6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	33b0      	adds	r3, #176	@ 0xb0
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d019      	beq.n	8008bc4 <USBD_CDC_EP0_RxReady+0x6a>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008b96:	2bff      	cmp	r3, #255	@ 0xff
 8008b98:	d014      	beq.n	8008bc4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	33b0      	adds	r3, #176	@ 0xb0
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008bb2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008bba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	22ff      	movs	r2, #255	@ 0xff
 8008bc0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
	...

08008bd0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008bd8:	2182      	movs	r1, #130	@ 0x82
 8008bda:	4818      	ldr	r0, [pc, #96]	@ (8008c3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008bdc:	f000 fd4f 	bl	800967e <USBD_GetEpDesc>
 8008be0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008be2:	2101      	movs	r1, #1
 8008be4:	4815      	ldr	r0, [pc, #84]	@ (8008c3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008be6:	f000 fd4a 	bl	800967e <USBD_GetEpDesc>
 8008bea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008bec:	2181      	movs	r1, #129	@ 0x81
 8008bee:	4813      	ldr	r0, [pc, #76]	@ (8008c3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008bf0:	f000 fd45 	bl	800967e <USBD_GetEpDesc>
 8008bf4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d002      	beq.n	8008c02 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	2210      	movs	r2, #16
 8008c00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d006      	beq.n	8008c16 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c10:	711a      	strb	r2, [r3, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d006      	beq.n	8008c2a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c24:	711a      	strb	r2, [r3, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2243      	movs	r2, #67	@ 0x43
 8008c2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c30:	4b02      	ldr	r3, [pc, #8]	@ (8008c3c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	2400205c 	.word	0x2400205c

08008c40 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c48:	2182      	movs	r1, #130	@ 0x82
 8008c4a:	4818      	ldr	r0, [pc, #96]	@ (8008cac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c4c:	f000 fd17 	bl	800967e <USBD_GetEpDesc>
 8008c50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c52:	2101      	movs	r1, #1
 8008c54:	4815      	ldr	r0, [pc, #84]	@ (8008cac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c56:	f000 fd12 	bl	800967e <USBD_GetEpDesc>
 8008c5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c5c:	2181      	movs	r1, #129	@ 0x81
 8008c5e:	4813      	ldr	r0, [pc, #76]	@ (8008cac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c60:	f000 fd0d 	bl	800967e <USBD_GetEpDesc>
 8008c64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	2210      	movs	r2, #16
 8008c70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d006      	beq.n	8008c86 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	711a      	strb	r2, [r3, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f042 0202 	orr.w	r2, r2, #2
 8008c84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d006      	beq.n	8008c9a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	711a      	strb	r2, [r3, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f042 0202 	orr.w	r2, r2, #2
 8008c98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2243      	movs	r2, #67	@ 0x43
 8008c9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ca0:	4b02      	ldr	r3, [pc, #8]	@ (8008cac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3718      	adds	r7, #24
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	2400205c 	.word	0x2400205c

08008cb0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008cb8:	2182      	movs	r1, #130	@ 0x82
 8008cba:	4818      	ldr	r0, [pc, #96]	@ (8008d1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008cbc:	f000 fcdf 	bl	800967e <USBD_GetEpDesc>
 8008cc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	4815      	ldr	r0, [pc, #84]	@ (8008d1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008cc6:	f000 fcda 	bl	800967e <USBD_GetEpDesc>
 8008cca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ccc:	2181      	movs	r1, #129	@ 0x81
 8008cce:	4813      	ldr	r0, [pc, #76]	@ (8008d1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008cd0:	f000 fcd5 	bl	800967e <USBD_GetEpDesc>
 8008cd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	2210      	movs	r2, #16
 8008ce0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d006      	beq.n	8008cf6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cf0:	711a      	strb	r2, [r3, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d006      	beq.n	8008d0a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d04:	711a      	strb	r2, [r3, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2243      	movs	r2, #67	@ 0x43
 8008d0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d10:	4b02      	ldr	r3, [pc, #8]	@ (8008d1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	2400205c 	.word	0x2400205c

08008d20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	220a      	movs	r2, #10
 8008d2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008d2e:	4b03      	ldr	r3, [pc, #12]	@ (8008d3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	24002018 	.word	0x24002018

08008d40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e009      	b.n	8008d68 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	33b0      	adds	r3, #176	@ 0xb0
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	32b0      	adds	r2, #176	@ 0xb0
 8008d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d8e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d101      	bne.n	8008d9a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e008      	b.n	8008dac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	68ba      	ldr	r2, [r7, #8]
 8008d9e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	371c      	adds	r7, #28
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	32b0      	adds	r2, #176	@ 0xb0
 8008dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d101      	bne.n	8008ddc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e004      	b.n	8008de6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3714      	adds	r7, #20
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
	...

08008df4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	32b0      	adds	r2, #176	@ 0xb0
 8008e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e0a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e025      	b.n	8008e66 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d11f      	bne.n	8008e64 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008e2c:	4b10      	ldr	r3, [pc, #64]	@ (8008e70 <USBD_CDC_TransmitPacket+0x7c>)
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	f003 020f 	and.w	r2, r3, #15
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4413      	add	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4403      	add	r3, r0
 8008e46:	3318      	adds	r3, #24
 8008e48:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008e4a:	4b09      	ldr	r3, [pc, #36]	@ (8008e70 <USBD_CDC_TransmitPacket+0x7c>)
 8008e4c:	7819      	ldrb	r1, [r3, #0]
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 fffd 	bl	800ae5a <USBD_LL_Transmit>

    ret = USBD_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	2400209f 	.word	0x2400209f

08008e74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	32b0      	adds	r2, #176	@ 0xb0
 8008e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e8a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	32b0      	adds	r2, #176	@ 0xb0
 8008e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e018      	b.n	8008ed4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	7c1b      	ldrb	r3, [r3, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10a      	bne.n	8008ec0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8008edc <USBD_CDC_ReceivePacket+0x68>)
 8008eac:	7819      	ldrb	r1, [r3, #0]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008eb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f001 ffef 	bl	800ae9c <USBD_LL_PrepareReceive>
 8008ebe:	e008      	b.n	8008ed2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ec0:	4b06      	ldr	r3, [pc, #24]	@ (8008edc <USBD_CDC_ReceivePacket+0x68>)
 8008ec2:	7819      	ldrb	r1, [r3, #0]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008eca:	2340      	movs	r3, #64	@ 0x40
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f001 ffe5 	bl	800ae9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	240020a0 	.word	0x240020a0

08008ee0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	4613      	mov	r3, r2
 8008eec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	e01f      	b.n	8008f38 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	79fa      	ldrb	r2, [r7, #7]
 8008f2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f001 fe5b 	bl	800abe8 <USBD_LL_Init>
 8008f32:	4603      	mov	r3, r0
 8008f34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3718      	adds	r7, #24
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e025      	b.n	8008fa4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	32ae      	adds	r2, #174	@ 0xae
 8008f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00f      	beq.n	8008f94 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	32ae      	adds	r2, #174	@ 0xae
 8008f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f84:	f107 020e 	add.w	r2, r7, #14
 8008f88:	4610      	mov	r0, r2
 8008f8a:	4798      	blx	r3
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008f9a:	1c5a      	adds	r2, r3, #1
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f001 fe67 	bl	800ac88 <USBD_LL_Start>
 8008fba:	4603      	mov	r3, r0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008fcc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b084      	sub	sp, #16
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d009      	beq.n	8009008 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	78fa      	ldrb	r2, [r7, #3]
 8008ffe:	4611      	mov	r1, r2
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	4798      	blx	r3
 8009004:	4603      	mov	r3, r0
 8009006:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009008:	7bfb      	ldrb	r3, [r7, #15]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b084      	sub	sp, #16
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	460b      	mov	r3, r1
 800901c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	78fa      	ldrb	r2, [r7, #3]
 800902c:	4611      	mov	r1, r2
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	4798      	blx	r3
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009038:	2303      	movs	r3, #3
 800903a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800903c:	7bfb      	ldrb	r3, [r7, #15]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b084      	sub	sp, #16
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	4618      	mov	r0, r3
 800905a:	f001 f936 	bl	800a2ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2201      	movs	r2, #1
 8009062:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800906c:	461a      	mov	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800907a:	f003 031f 	and.w	r3, r3, #31
 800907e:	2b02      	cmp	r3, #2
 8009080:	d01a      	beq.n	80090b8 <USBD_LL_SetupStage+0x72>
 8009082:	2b02      	cmp	r3, #2
 8009084:	d822      	bhi.n	80090cc <USBD_LL_SetupStage+0x86>
 8009086:	2b00      	cmp	r3, #0
 8009088:	d002      	beq.n	8009090 <USBD_LL_SetupStage+0x4a>
 800908a:	2b01      	cmp	r3, #1
 800908c:	d00a      	beq.n	80090a4 <USBD_LL_SetupStage+0x5e>
 800908e:	e01d      	b.n	80090cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009096:	4619      	mov	r1, r3
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fb63 	bl	8009764 <USBD_StdDevReq>
 800909e:	4603      	mov	r3, r0
 80090a0:	73fb      	strb	r3, [r7, #15]
      break;
 80090a2:	e020      	b.n	80090e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090aa:	4619      	mov	r1, r3
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fbcb 	bl	8009848 <USBD_StdItfReq>
 80090b2:	4603      	mov	r3, r0
 80090b4:	73fb      	strb	r3, [r7, #15]
      break;
 80090b6:	e016      	b.n	80090e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fc2d 	bl	8009920 <USBD_StdEPReq>
 80090c6:	4603      	mov	r3, r0
 80090c8:	73fb      	strb	r3, [r7, #15]
      break;
 80090ca:	e00c      	b.n	80090e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80090d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	4619      	mov	r1, r3
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f001 fe34 	bl	800ad48 <USBD_LL_StallEP>
 80090e0:	4603      	mov	r3, r0
 80090e2:	73fb      	strb	r3, [r7, #15]
      break;
 80090e4:	bf00      	nop
  }

  return ret;
 80090e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3710      	adds	r7, #16
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	460b      	mov	r3, r1
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009102:	7afb      	ldrb	r3, [r7, #11]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d16e      	bne.n	80091e6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800910e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009116:	2b03      	cmp	r3, #3
 8009118:	f040 8098 	bne.w	800924c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	689a      	ldr	r2, [r3, #8]
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	429a      	cmp	r2, r3
 8009126:	d913      	bls.n	8009150 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	689a      	ldr	r2, [r3, #8]
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	1ad2      	subs	r2, r2, r3
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	68da      	ldr	r2, [r3, #12]
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	4293      	cmp	r3, r2
 8009140:	bf28      	it	cs
 8009142:	4613      	movcs	r3, r2
 8009144:	461a      	mov	r2, r3
 8009146:	6879      	ldr	r1, [r7, #4]
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f001 f9be 	bl	800a4ca <USBD_CtlContinueRx>
 800914e:	e07d      	b.n	800924c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009156:	f003 031f 	and.w	r3, r3, #31
 800915a:	2b02      	cmp	r3, #2
 800915c:	d014      	beq.n	8009188 <USBD_LL_DataOutStage+0x98>
 800915e:	2b02      	cmp	r3, #2
 8009160:	d81d      	bhi.n	800919e <USBD_LL_DataOutStage+0xae>
 8009162:	2b00      	cmp	r3, #0
 8009164:	d002      	beq.n	800916c <USBD_LL_DataOutStage+0x7c>
 8009166:	2b01      	cmp	r3, #1
 8009168:	d003      	beq.n	8009172 <USBD_LL_DataOutStage+0x82>
 800916a:	e018      	b.n	800919e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800916c:	2300      	movs	r3, #0
 800916e:	75bb      	strb	r3, [r7, #22]
            break;
 8009170:	e018      	b.n	80091a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009178:	b2db      	uxtb	r3, r3
 800917a:	4619      	mov	r1, r3
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f000 fa64 	bl	800964a <USBD_CoreFindIF>
 8009182:	4603      	mov	r3, r0
 8009184:	75bb      	strb	r3, [r7, #22]
            break;
 8009186:	e00d      	b.n	80091a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800918e:	b2db      	uxtb	r3, r3
 8009190:	4619      	mov	r1, r3
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f000 fa66 	bl	8009664 <USBD_CoreFindEP>
 8009198:	4603      	mov	r3, r0
 800919a:	75bb      	strb	r3, [r7, #22]
            break;
 800919c:	e002      	b.n	80091a4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	75bb      	strb	r3, [r7, #22]
            break;
 80091a2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80091a4:	7dbb      	ldrb	r3, [r7, #22]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d119      	bne.n	80091de <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	d113      	bne.n	80091de <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80091b6:	7dba      	ldrb	r2, [r7, #22]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	32ae      	adds	r2, #174	@ 0xae
 80091bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00b      	beq.n	80091de <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80091c6:	7dba      	ldrb	r2, [r7, #22]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80091ce:	7dba      	ldrb	r2, [r7, #22]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	32ae      	adds	r2, #174	@ 0xae
 80091d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f001 f984 	bl	800a4ec <USBD_CtlSendStatus>
 80091e4:	e032      	b.n	800924c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80091e6:	7afb      	ldrb	r3, [r7, #11]
 80091e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	4619      	mov	r1, r3
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f000 fa37 	bl	8009664 <USBD_CoreFindEP>
 80091f6:	4603      	mov	r3, r0
 80091f8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091fa:	7dbb      	ldrb	r3, [r7, #22]
 80091fc:	2bff      	cmp	r3, #255	@ 0xff
 80091fe:	d025      	beq.n	800924c <USBD_LL_DataOutStage+0x15c>
 8009200:	7dbb      	ldrb	r3, [r7, #22]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d122      	bne.n	800924c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b03      	cmp	r3, #3
 8009210:	d117      	bne.n	8009242 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009212:	7dba      	ldrb	r2, [r7, #22]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	32ae      	adds	r2, #174	@ 0xae
 8009218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00f      	beq.n	8009242 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009222:	7dba      	ldrb	r2, [r7, #22]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800922a:	7dba      	ldrb	r2, [r7, #22]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	32ae      	adds	r2, #174	@ 0xae
 8009230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009234:	699b      	ldr	r3, [r3, #24]
 8009236:	7afa      	ldrb	r2, [r7, #11]
 8009238:	4611      	mov	r1, r2
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	4798      	blx	r3
 800923e:	4603      	mov	r3, r0
 8009240:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009242:	7dfb      	ldrb	r3, [r7, #23]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d001      	beq.n	800924c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009248:	7dfb      	ldrb	r3, [r7, #23]
 800924a:	e000      	b.n	800924e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3718      	adds	r7, #24
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b086      	sub	sp, #24
 800925a:	af00      	add	r7, sp, #0
 800925c:	60f8      	str	r0, [r7, #12]
 800925e:	460b      	mov	r3, r1
 8009260:	607a      	str	r2, [r7, #4]
 8009262:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009264:	7afb      	ldrb	r3, [r7, #11]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d16f      	bne.n	800934a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	3314      	adds	r3, #20
 800926e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009276:	2b02      	cmp	r3, #2
 8009278:	d15a      	bne.n	8009330 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	689a      	ldr	r2, [r3, #8]
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	429a      	cmp	r2, r3
 8009284:	d914      	bls.n	80092b0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	689a      	ldr	r2, [r3, #8]
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	1ad2      	subs	r2, r2, r3
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	461a      	mov	r2, r3
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f001 f8e6 	bl	800a46e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092a2:	2300      	movs	r3, #0
 80092a4:	2200      	movs	r2, #0
 80092a6:	2100      	movs	r1, #0
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f001 fdf7 	bl	800ae9c <USBD_LL_PrepareReceive>
 80092ae:	e03f      	b.n	8009330 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	68da      	ldr	r2, [r3, #12]
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d11c      	bne.n	80092f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d316      	bcc.n	80092f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d20f      	bcs.n	80092f6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80092d6:	2200      	movs	r2, #0
 80092d8:	2100      	movs	r1, #0
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f001 f8c7 	bl	800a46e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092e8:	2300      	movs	r3, #0
 80092ea:	2200      	movs	r2, #0
 80092ec:	2100      	movs	r1, #0
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f001 fdd4 	bl	800ae9c <USBD_LL_PrepareReceive>
 80092f4:	e01c      	b.n	8009330 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b03      	cmp	r3, #3
 8009300:	d10f      	bne.n	8009322 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d009      	beq.n	8009322 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009322:	2180      	movs	r1, #128	@ 0x80
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f001 fd0f 	bl	800ad48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f001 f8f1 	bl	800a512 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d03a      	beq.n	80093b0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f7ff fe42 	bl	8008fc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009348:	e032      	b.n	80093b0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800934a:	7afb      	ldrb	r3, [r7, #11]
 800934c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009350:	b2db      	uxtb	r3, r3
 8009352:	4619      	mov	r1, r3
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f000 f985 	bl	8009664 <USBD_CoreFindEP>
 800935a:	4603      	mov	r3, r0
 800935c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800935e:	7dfb      	ldrb	r3, [r7, #23]
 8009360:	2bff      	cmp	r3, #255	@ 0xff
 8009362:	d025      	beq.n	80093b0 <USBD_LL_DataInStage+0x15a>
 8009364:	7dfb      	ldrb	r3, [r7, #23]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d122      	bne.n	80093b0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b03      	cmp	r3, #3
 8009374:	d11c      	bne.n	80093b0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009376:	7dfa      	ldrb	r2, [r7, #23]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	32ae      	adds	r2, #174	@ 0xae
 800937c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009380:	695b      	ldr	r3, [r3, #20]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d014      	beq.n	80093b0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009386:	7dfa      	ldrb	r2, [r7, #23]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800938e:	7dfa      	ldrb	r2, [r7, #23]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	32ae      	adds	r2, #174	@ 0xae
 8009394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	7afa      	ldrb	r2, [r7, #11]
 800939c:	4611      	mov	r1, r2
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	4798      	blx	r3
 80093a2:	4603      	mov	r3, r0
 80093a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80093a6:	7dbb      	ldrb	r3, [r7, #22]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80093ac:	7dbb      	ldrb	r3, [r7, #22]
 80093ae:	e000      	b.n	80093b2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b084      	sub	sp, #16
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2201      	movs	r2, #1
 80093ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d014      	beq.n	8009420 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00e      	beq.n	8009420 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	6852      	ldr	r2, [r2, #4]
 800940e:	b2d2      	uxtb	r2, r2
 8009410:	4611      	mov	r1, r2
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	4798      	blx	r3
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800941c:	2303      	movs	r3, #3
 800941e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009420:	2340      	movs	r3, #64	@ 0x40
 8009422:	2200      	movs	r2, #0
 8009424:	2100      	movs	r1, #0
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f001 fc49 	bl	800acbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2240      	movs	r2, #64	@ 0x40
 8009438:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800943c:	2340      	movs	r3, #64	@ 0x40
 800943e:	2200      	movs	r2, #0
 8009440:	2180      	movs	r1, #128	@ 0x80
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f001 fc3b 	bl	800acbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2240      	movs	r2, #64	@ 0x40
 8009452:	621a      	str	r2, [r3, #32]

  return ret;
 8009454:	7bfb      	ldrb	r3, [r7, #15]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800945e:	b480      	push	{r7}
 8009460:	b083      	sub	sp, #12
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	460b      	mov	r3, r1
 8009468:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	78fa      	ldrb	r2, [r7, #3]
 800946e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	370c      	adds	r7, #12
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr

0800947e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800947e:	b480      	push	{r7}
 8009480:	b083      	sub	sp, #12
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b04      	cmp	r3, #4
 8009490:	d006      	beq.n	80094a0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009498:	b2da      	uxtb	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2204      	movs	r2, #4
 80094a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	370c      	adds	r7, #12
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b083      	sub	sp, #12
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b04      	cmp	r3, #4
 80094c8:	d106      	bne.n	80094d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80094d0:	b2da      	uxtb	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b082      	sub	sp, #8
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b03      	cmp	r3, #3
 80094f8:	d110      	bne.n	800951c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00b      	beq.n	800951c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800950a:	69db      	ldr	r3, [r3, #28]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d005      	beq.n	800951c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009516:	69db      	ldr	r3, [r3, #28]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b082      	sub	sp, #8
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	32ae      	adds	r2, #174	@ 0xae
 800953c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009544:	2303      	movs	r3, #3
 8009546:	e01c      	b.n	8009582 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800954e:	b2db      	uxtb	r3, r3
 8009550:	2b03      	cmp	r3, #3
 8009552:	d115      	bne.n	8009580 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	32ae      	adds	r2, #174	@ 0xae
 800955e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009562:	6a1b      	ldr	r3, [r3, #32]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00b      	beq.n	8009580 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	32ae      	adds	r2, #174	@ 0xae
 8009572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009576:	6a1b      	ldr	r3, [r3, #32]
 8009578:	78fa      	ldrb	r2, [r7, #3]
 800957a:	4611      	mov	r1, r2
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b082      	sub	sp, #8
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	460b      	mov	r3, r1
 8009594:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	32ae      	adds	r2, #174	@ 0xae
 80095a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d101      	bne.n	80095ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80095a8:	2303      	movs	r3, #3
 80095aa:	e01c      	b.n	80095e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	2b03      	cmp	r3, #3
 80095b6:	d115      	bne.n	80095e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	32ae      	adds	r2, #174	@ 0xae
 80095c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d00b      	beq.n	80095e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	32ae      	adds	r2, #174	@ 0xae
 80095d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095dc:	78fa      	ldrb	r2, [r7, #3]
 80095de:	4611      	mov	r1, r2
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b083      	sub	sp, #12
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00e      	beq.n	8009640 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	6852      	ldr	r2, [r2, #4]
 800962e:	b2d2      	uxtb	r2, r2
 8009630:	4611      	mov	r1, r2
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	4798      	blx	r3
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800963c:	2303      	movs	r3, #3
 800963e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009640:	7bfb      	ldrb	r3, [r7, #15]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800964a:	b480      	push	{r7}
 800964c:	b083      	sub	sp, #12
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009656:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009658:	4618      	mov	r0, r3
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	460b      	mov	r3, r1
 800966e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009670:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009672:	4618      	mov	r0, r3
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b086      	sub	sp, #24
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	460b      	mov	r3, r1
 8009688:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009692:	2300      	movs	r3, #0
 8009694:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	885b      	ldrh	r3, [r3, #2]
 800969a:	b29b      	uxth	r3, r3
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	7812      	ldrb	r2, [r2, #0]
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d91f      	bls.n	80096e4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80096aa:	e013      	b.n	80096d4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80096ac:	f107 030a 	add.w	r3, r7, #10
 80096b0:	4619      	mov	r1, r3
 80096b2:	6978      	ldr	r0, [r7, #20]
 80096b4:	f000 f81b 	bl	80096ee <USBD_GetNextDesc>
 80096b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	785b      	ldrb	r3, [r3, #1]
 80096be:	2b05      	cmp	r3, #5
 80096c0:	d108      	bne.n	80096d4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	789b      	ldrb	r3, [r3, #2]
 80096ca:	78fa      	ldrb	r2, [r7, #3]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d008      	beq.n	80096e2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80096d0:	2300      	movs	r3, #0
 80096d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	885b      	ldrh	r3, [r3, #2]
 80096d8:	b29a      	uxth	r2, r3
 80096da:	897b      	ldrh	r3, [r7, #10]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d8e5      	bhi.n	80096ac <USBD_GetEpDesc+0x2e>
 80096e0:	e000      	b.n	80096e4 <USBD_GetEpDesc+0x66>
          break;
 80096e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80096e4:	693b      	ldr	r3, [r7, #16]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b085      	sub	sp, #20
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	881b      	ldrh	r3, [r3, #0]
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	7812      	ldrb	r2, [r2, #0]
 8009704:	4413      	add	r3, r2
 8009706:	b29a      	uxth	r2, r3
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	461a      	mov	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4413      	add	r3, r2
 8009716:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009718:	68fb      	ldr	r3, [r7, #12]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3714      	adds	r7, #20
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr

08009726 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009726:	b480      	push	{r7}
 8009728:	b087      	sub	sp, #28
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	3301      	adds	r3, #1
 800973c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009744:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009748:	021b      	lsls	r3, r3, #8
 800974a:	b21a      	sxth	r2, r3
 800974c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009750:	4313      	orrs	r3, r2
 8009752:	b21b      	sxth	r3, r3
 8009754:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009756:	89fb      	ldrh	r3, [r7, #14]
}
 8009758:	4618      	mov	r0, r3
 800975a:	371c      	adds	r7, #28
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800977a:	2b40      	cmp	r3, #64	@ 0x40
 800977c:	d005      	beq.n	800978a <USBD_StdDevReq+0x26>
 800977e:	2b40      	cmp	r3, #64	@ 0x40
 8009780:	d857      	bhi.n	8009832 <USBD_StdDevReq+0xce>
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00f      	beq.n	80097a6 <USBD_StdDevReq+0x42>
 8009786:	2b20      	cmp	r3, #32
 8009788:	d153      	bne.n	8009832 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	32ae      	adds	r2, #174	@ 0xae
 8009794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	4798      	blx	r3
 80097a0:	4603      	mov	r3, r0
 80097a2:	73fb      	strb	r3, [r7, #15]
      break;
 80097a4:	e04a      	b.n	800983c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	785b      	ldrb	r3, [r3, #1]
 80097aa:	2b09      	cmp	r3, #9
 80097ac:	d83b      	bhi.n	8009826 <USBD_StdDevReq+0xc2>
 80097ae:	a201      	add	r2, pc, #4	@ (adr r2, 80097b4 <USBD_StdDevReq+0x50>)
 80097b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b4:	08009809 	.word	0x08009809
 80097b8:	0800981d 	.word	0x0800981d
 80097bc:	08009827 	.word	0x08009827
 80097c0:	08009813 	.word	0x08009813
 80097c4:	08009827 	.word	0x08009827
 80097c8:	080097e7 	.word	0x080097e7
 80097cc:	080097dd 	.word	0x080097dd
 80097d0:	08009827 	.word	0x08009827
 80097d4:	080097ff 	.word	0x080097ff
 80097d8:	080097f1 	.word	0x080097f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fa3c 	bl	8009c5c <USBD_GetDescriptor>
          break;
 80097e4:	e024      	b.n	8009830 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fbcb 	bl	8009f84 <USBD_SetAddress>
          break;
 80097ee:	e01f      	b.n	8009830 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80097f0:	6839      	ldr	r1, [r7, #0]
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 fc0a 	bl	800a00c <USBD_SetConfig>
 80097f8:	4603      	mov	r3, r0
 80097fa:	73fb      	strb	r3, [r7, #15]
          break;
 80097fc:	e018      	b.n	8009830 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 fcad 	bl	800a160 <USBD_GetConfig>
          break;
 8009806:	e013      	b.n	8009830 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fcde 	bl	800a1cc <USBD_GetStatus>
          break;
 8009810:	e00e      	b.n	8009830 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 fd0d 	bl	800a234 <USBD_SetFeature>
          break;
 800981a:	e009      	b.n	8009830 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fd31 	bl	800a286 <USBD_ClrFeature>
          break;
 8009824:	e004      	b.n	8009830 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009826:	6839      	ldr	r1, [r7, #0]
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fd88 	bl	800a33e <USBD_CtlError>
          break;
 800982e:	bf00      	nop
      }
      break;
 8009830:	e004      	b.n	800983c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fd82 	bl	800a33e <USBD_CtlError>
      break;
 800983a:	bf00      	nop
  }

  return ret;
 800983c:	7bfb      	ldrb	r3, [r7, #15]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop

08009848 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009852:	2300      	movs	r3, #0
 8009854:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800985e:	2b40      	cmp	r3, #64	@ 0x40
 8009860:	d005      	beq.n	800986e <USBD_StdItfReq+0x26>
 8009862:	2b40      	cmp	r3, #64	@ 0x40
 8009864:	d852      	bhi.n	800990c <USBD_StdItfReq+0xc4>
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <USBD_StdItfReq+0x26>
 800986a:	2b20      	cmp	r3, #32
 800986c:	d14e      	bne.n	800990c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009874:	b2db      	uxtb	r3, r3
 8009876:	3b01      	subs	r3, #1
 8009878:	2b02      	cmp	r3, #2
 800987a:	d840      	bhi.n	80098fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	889b      	ldrh	r3, [r3, #4]
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b01      	cmp	r3, #1
 8009884:	d836      	bhi.n	80098f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	889b      	ldrh	r3, [r3, #4]
 800988a:	b2db      	uxtb	r3, r3
 800988c:	4619      	mov	r1, r3
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f7ff fedb 	bl	800964a <USBD_CoreFindIF>
 8009894:	4603      	mov	r3, r0
 8009896:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	2bff      	cmp	r3, #255	@ 0xff
 800989c:	d01d      	beq.n	80098da <USBD_StdItfReq+0x92>
 800989e:	7bbb      	ldrb	r3, [r7, #14]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d11a      	bne.n	80098da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80098a4:	7bba      	ldrb	r2, [r7, #14]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	32ae      	adds	r2, #174	@ 0xae
 80098aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00f      	beq.n	80098d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80098b4:	7bba      	ldrb	r2, [r7, #14]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80098bc:	7bba      	ldrb	r2, [r7, #14]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	32ae      	adds	r2, #174	@ 0xae
 80098c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	4798      	blx	r3
 80098ce:	4603      	mov	r3, r0
 80098d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80098d2:	e004      	b.n	80098de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80098d4:	2303      	movs	r3, #3
 80098d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80098d8:	e001      	b.n	80098de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80098da:	2303      	movs	r3, #3
 80098dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	88db      	ldrh	r3, [r3, #6]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d110      	bne.n	8009908 <USBD_StdItfReq+0xc0>
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10d      	bne.n	8009908 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 fdfd 	bl	800a4ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80098f2:	e009      	b.n	8009908 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fd21 	bl	800a33e <USBD_CtlError>
          break;
 80098fc:	e004      	b.n	8009908 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80098fe:	6839      	ldr	r1, [r7, #0]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fd1c 	bl	800a33e <USBD_CtlError>
          break;
 8009906:	e000      	b.n	800990a <USBD_StdItfReq+0xc2>
          break;
 8009908:	bf00      	nop
      }
      break;
 800990a:	e004      	b.n	8009916 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800990c:	6839      	ldr	r1, [r7, #0]
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fd15 	bl	800a33e <USBD_CtlError>
      break;
 8009914:	bf00      	nop
  }

  return ret;
 8009916:	7bfb      	ldrb	r3, [r7, #15]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	889b      	ldrh	r3, [r3, #4]
 8009932:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800993c:	2b40      	cmp	r3, #64	@ 0x40
 800993e:	d007      	beq.n	8009950 <USBD_StdEPReq+0x30>
 8009940:	2b40      	cmp	r3, #64	@ 0x40
 8009942:	f200 817f 	bhi.w	8009c44 <USBD_StdEPReq+0x324>
 8009946:	2b00      	cmp	r3, #0
 8009948:	d02a      	beq.n	80099a0 <USBD_StdEPReq+0x80>
 800994a:	2b20      	cmp	r3, #32
 800994c:	f040 817a 	bne.w	8009c44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009950:	7bbb      	ldrb	r3, [r7, #14]
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f7ff fe85 	bl	8009664 <USBD_CoreFindEP>
 800995a:	4603      	mov	r3, r0
 800995c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800995e:	7b7b      	ldrb	r3, [r7, #13]
 8009960:	2bff      	cmp	r3, #255	@ 0xff
 8009962:	f000 8174 	beq.w	8009c4e <USBD_StdEPReq+0x32e>
 8009966:	7b7b      	ldrb	r3, [r7, #13]
 8009968:	2b00      	cmp	r3, #0
 800996a:	f040 8170 	bne.w	8009c4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800996e:	7b7a      	ldrb	r2, [r7, #13]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009976:	7b7a      	ldrb	r2, [r7, #13]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	32ae      	adds	r2, #174	@ 0xae
 800997c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	2b00      	cmp	r3, #0
 8009984:	f000 8163 	beq.w	8009c4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009988:	7b7a      	ldrb	r2, [r7, #13]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	32ae      	adds	r2, #174	@ 0xae
 800998e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	4798      	blx	r3
 800999a:	4603      	mov	r3, r0
 800999c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800999e:	e156      	b.n	8009c4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	785b      	ldrb	r3, [r3, #1]
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d008      	beq.n	80099ba <USBD_StdEPReq+0x9a>
 80099a8:	2b03      	cmp	r3, #3
 80099aa:	f300 8145 	bgt.w	8009c38 <USBD_StdEPReq+0x318>
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f000 809b 	beq.w	8009aea <USBD_StdEPReq+0x1ca>
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d03c      	beq.n	8009a32 <USBD_StdEPReq+0x112>
 80099b8:	e13e      	b.n	8009c38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d002      	beq.n	80099cc <USBD_StdEPReq+0xac>
 80099c6:	2b03      	cmp	r3, #3
 80099c8:	d016      	beq.n	80099f8 <USBD_StdEPReq+0xd8>
 80099ca:	e02c      	b.n	8009a26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099cc:	7bbb      	ldrb	r3, [r7, #14]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00d      	beq.n	80099ee <USBD_StdEPReq+0xce>
 80099d2:	7bbb      	ldrb	r3, [r7, #14]
 80099d4:	2b80      	cmp	r3, #128	@ 0x80
 80099d6:	d00a      	beq.n	80099ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80099d8:	7bbb      	ldrb	r3, [r7, #14]
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f001 f9b3 	bl	800ad48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80099e2:	2180      	movs	r1, #128	@ 0x80
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f001 f9af 	bl	800ad48 <USBD_LL_StallEP>
 80099ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099ec:	e020      	b.n	8009a30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80099ee:	6839      	ldr	r1, [r7, #0]
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fca4 	bl	800a33e <USBD_CtlError>
              break;
 80099f6:	e01b      	b.n	8009a30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	885b      	ldrh	r3, [r3, #2]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10e      	bne.n	8009a1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00b      	beq.n	8009a1e <USBD_StdEPReq+0xfe>
 8009a06:	7bbb      	ldrb	r3, [r7, #14]
 8009a08:	2b80      	cmp	r3, #128	@ 0x80
 8009a0a:	d008      	beq.n	8009a1e <USBD_StdEPReq+0xfe>
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	88db      	ldrh	r3, [r3, #6]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d104      	bne.n	8009a1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a14:	7bbb      	ldrb	r3, [r7, #14]
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 f995 	bl	800ad48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fd64 	bl	800a4ec <USBD_CtlSendStatus>

              break;
 8009a24:	e004      	b.n	8009a30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fc88 	bl	800a33e <USBD_CtlError>
              break;
 8009a2e:	bf00      	nop
          }
          break;
 8009a30:	e107      	b.n	8009c42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d002      	beq.n	8009a44 <USBD_StdEPReq+0x124>
 8009a3e:	2b03      	cmp	r3, #3
 8009a40:	d016      	beq.n	8009a70 <USBD_StdEPReq+0x150>
 8009a42:	e04b      	b.n	8009adc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00d      	beq.n	8009a66 <USBD_StdEPReq+0x146>
 8009a4a:	7bbb      	ldrb	r3, [r7, #14]
 8009a4c:	2b80      	cmp	r3, #128	@ 0x80
 8009a4e:	d00a      	beq.n	8009a66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a50:	7bbb      	ldrb	r3, [r7, #14]
 8009a52:	4619      	mov	r1, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f001 f977 	bl	800ad48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a5a:	2180      	movs	r1, #128	@ 0x80
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f001 f973 	bl	800ad48 <USBD_LL_StallEP>
 8009a62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a64:	e040      	b.n	8009ae8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fc68 	bl	800a33e <USBD_CtlError>
              break;
 8009a6e:	e03b      	b.n	8009ae8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	885b      	ldrh	r3, [r3, #2]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d136      	bne.n	8009ae6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009a78:	7bbb      	ldrb	r3, [r7, #14]
 8009a7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d004      	beq.n	8009a8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009a82:	7bbb      	ldrb	r3, [r7, #14]
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f001 f97d 	bl	800ad86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fd2d 	bl	800a4ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009a92:	7bbb      	ldrb	r3, [r7, #14]
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7ff fde4 	bl	8009664 <USBD_CoreFindEP>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009aa0:	7b7b      	ldrb	r3, [r7, #13]
 8009aa2:	2bff      	cmp	r3, #255	@ 0xff
 8009aa4:	d01f      	beq.n	8009ae6 <USBD_StdEPReq+0x1c6>
 8009aa6:	7b7b      	ldrb	r3, [r7, #13]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d11c      	bne.n	8009ae6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009aac:	7b7a      	ldrb	r2, [r7, #13]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009ab4:	7b7a      	ldrb	r2, [r7, #13]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	32ae      	adds	r2, #174	@ 0xae
 8009aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d010      	beq.n	8009ae6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009ac4:	7b7a      	ldrb	r2, [r7, #13]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	32ae      	adds	r2, #174	@ 0xae
 8009aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	6839      	ldr	r1, [r7, #0]
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	4798      	blx	r3
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009ada:	e004      	b.n	8009ae6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fc2d 	bl	800a33e <USBD_CtlError>
              break;
 8009ae4:	e000      	b.n	8009ae8 <USBD_StdEPReq+0x1c8>
              break;
 8009ae6:	bf00      	nop
          }
          break;
 8009ae8:	e0ab      	b.n	8009c42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d002      	beq.n	8009afc <USBD_StdEPReq+0x1dc>
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	d032      	beq.n	8009b60 <USBD_StdEPReq+0x240>
 8009afa:	e097      	b.n	8009c2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009afc:	7bbb      	ldrb	r3, [r7, #14]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d007      	beq.n	8009b12 <USBD_StdEPReq+0x1f2>
 8009b02:	7bbb      	ldrb	r3, [r7, #14]
 8009b04:	2b80      	cmp	r3, #128	@ 0x80
 8009b06:	d004      	beq.n	8009b12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fc17 	bl	800a33e <USBD_CtlError>
                break;
 8009b10:	e091      	b.n	8009c36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	da0b      	bge.n	8009b32 <USBD_StdEPReq+0x212>
 8009b1a:	7bbb      	ldrb	r3, [r7, #14]
 8009b1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b20:	4613      	mov	r3, r2
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	3310      	adds	r3, #16
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	3304      	adds	r3, #4
 8009b30:	e00b      	b.n	8009b4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b32:	7bbb      	ldrb	r3, [r7, #14]
 8009b34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b38:	4613      	mov	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4413      	add	r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	4413      	add	r3, r2
 8009b48:	3304      	adds	r3, #4
 8009b4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	2202      	movs	r2, #2
 8009b56:	4619      	mov	r1, r3
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fc6d 	bl	800a438 <USBD_CtlSendData>
              break;
 8009b5e:	e06a      	b.n	8009c36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	da11      	bge.n	8009b8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b68:	7bbb      	ldrb	r3, [r7, #14]
 8009b6a:	f003 020f 	and.w	r2, r3, #15
 8009b6e:	6879      	ldr	r1, [r7, #4]
 8009b70:	4613      	mov	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4413      	add	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	440b      	add	r3, r1
 8009b7a:	3324      	adds	r3, #36	@ 0x24
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d117      	bne.n	8009bb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fbda 	bl	800a33e <USBD_CtlError>
                  break;
 8009b8a:	e054      	b.n	8009c36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009b8c:	7bbb      	ldrb	r3, [r7, #14]
 8009b8e:	f003 020f 	and.w	r2, r3, #15
 8009b92:	6879      	ldr	r1, [r7, #4]
 8009b94:	4613      	mov	r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4413      	add	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	440b      	add	r3, r1
 8009b9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009ba2:	881b      	ldrh	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d104      	bne.n	8009bb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ba8:	6839      	ldr	r1, [r7, #0]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fbc7 	bl	800a33e <USBD_CtlError>
                  break;
 8009bb0:	e041      	b.n	8009c36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	da0b      	bge.n	8009bd2 <USBD_StdEPReq+0x2b2>
 8009bba:	7bbb      	ldrb	r3, [r7, #14]
 8009bbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	3310      	adds	r3, #16
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	4413      	add	r3, r2
 8009bce:	3304      	adds	r3, #4
 8009bd0:	e00b      	b.n	8009bea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009bd2:	7bbb      	ldrb	r3, [r7, #14]
 8009bd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bd8:	4613      	mov	r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	4413      	add	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	4413      	add	r3, r2
 8009be8:	3304      	adds	r3, #4
 8009bea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d002      	beq.n	8009bf8 <USBD_StdEPReq+0x2d8>
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
 8009bf4:	2b80      	cmp	r3, #128	@ 0x80
 8009bf6:	d103      	bne.n	8009c00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	601a      	str	r2, [r3, #0]
 8009bfe:	e00e      	b.n	8009c1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c00:	7bbb      	ldrb	r3, [r7, #14]
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f001 f8dd 	bl	800adc4 <USBD_LL_IsStallEP>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d003      	beq.n	8009c18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	2201      	movs	r2, #1
 8009c14:	601a      	str	r2, [r3, #0]
 8009c16:	e002      	b.n	8009c1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	2202      	movs	r2, #2
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fc07 	bl	800a438 <USBD_CtlSendData>
              break;
 8009c2a:	e004      	b.n	8009c36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fb85 	bl	800a33e <USBD_CtlError>
              break;
 8009c34:	bf00      	nop
          }
          break;
 8009c36:	e004      	b.n	8009c42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fb7f 	bl	800a33e <USBD_CtlError>
          break;
 8009c40:	bf00      	nop
      }
      break;
 8009c42:	e005      	b.n	8009c50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fb79 	bl	800a33e <USBD_CtlError>
      break;
 8009c4c:	e000      	b.n	8009c50 <USBD_StdEPReq+0x330>
      break;
 8009c4e:	bf00      	nop
  }

  return ret;
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
	...

08009c5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c66:	2300      	movs	r3, #0
 8009c68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	885b      	ldrh	r3, [r3, #2]
 8009c76:	0a1b      	lsrs	r3, r3, #8
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	2b0e      	cmp	r3, #14
 8009c7e:	f200 8152 	bhi.w	8009f26 <USBD_GetDescriptor+0x2ca>
 8009c82:	a201      	add	r2, pc, #4	@ (adr r2, 8009c88 <USBD_GetDescriptor+0x2c>)
 8009c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c88:	08009cf9 	.word	0x08009cf9
 8009c8c:	08009d11 	.word	0x08009d11
 8009c90:	08009d51 	.word	0x08009d51
 8009c94:	08009f27 	.word	0x08009f27
 8009c98:	08009f27 	.word	0x08009f27
 8009c9c:	08009ec7 	.word	0x08009ec7
 8009ca0:	08009ef3 	.word	0x08009ef3
 8009ca4:	08009f27 	.word	0x08009f27
 8009ca8:	08009f27 	.word	0x08009f27
 8009cac:	08009f27 	.word	0x08009f27
 8009cb0:	08009f27 	.word	0x08009f27
 8009cb4:	08009f27 	.word	0x08009f27
 8009cb8:	08009f27 	.word	0x08009f27
 8009cbc:	08009f27 	.word	0x08009f27
 8009cc0:	08009cc5 	.word	0x08009cc5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cca:	69db      	ldr	r3, [r3, #28]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00b      	beq.n	8009ce8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cd6:	69db      	ldr	r3, [r3, #28]
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	7c12      	ldrb	r2, [r2, #16]
 8009cdc:	f107 0108 	add.w	r1, r7, #8
 8009ce0:	4610      	mov	r0, r2
 8009ce2:	4798      	blx	r3
 8009ce4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ce6:	e126      	b.n	8009f36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fb27 	bl	800a33e <USBD_CtlError>
        err++;
 8009cf0:	7afb      	ldrb	r3, [r7, #11]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	72fb      	strb	r3, [r7, #11]
      break;
 8009cf6:	e11e      	b.n	8009f36 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	7c12      	ldrb	r2, [r2, #16]
 8009d04:	f107 0108 	add.w	r1, r7, #8
 8009d08:	4610      	mov	r0, r2
 8009d0a:	4798      	blx	r3
 8009d0c:	60f8      	str	r0, [r7, #12]
      break;
 8009d0e:	e112      	b.n	8009f36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	7c1b      	ldrb	r3, [r3, #16]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10d      	bne.n	8009d34 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d20:	f107 0208 	add.w	r2, r7, #8
 8009d24:	4610      	mov	r0, r2
 8009d26:	4798      	blx	r3
 8009d28:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	2202      	movs	r2, #2
 8009d30:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d32:	e100      	b.n	8009f36 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d3c:	f107 0208 	add.w	r2, r7, #8
 8009d40:	4610      	mov	r0, r2
 8009d42:	4798      	blx	r3
 8009d44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	701a      	strb	r2, [r3, #0]
      break;
 8009d4e:	e0f2      	b.n	8009f36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	885b      	ldrh	r3, [r3, #2]
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b05      	cmp	r3, #5
 8009d58:	f200 80ac 	bhi.w	8009eb4 <USBD_GetDescriptor+0x258>
 8009d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d64 <USBD_GetDescriptor+0x108>)
 8009d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d62:	bf00      	nop
 8009d64:	08009d7d 	.word	0x08009d7d
 8009d68:	08009db1 	.word	0x08009db1
 8009d6c:	08009de5 	.word	0x08009de5
 8009d70:	08009e19 	.word	0x08009e19
 8009d74:	08009e4d 	.word	0x08009e4d
 8009d78:	08009e81 	.word	0x08009e81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d00b      	beq.n	8009da0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	7c12      	ldrb	r2, [r2, #16]
 8009d94:	f107 0108 	add.w	r1, r7, #8
 8009d98:	4610      	mov	r0, r2
 8009d9a:	4798      	blx	r3
 8009d9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d9e:	e091      	b.n	8009ec4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009da0:	6839      	ldr	r1, [r7, #0]
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 facb 	bl	800a33e <USBD_CtlError>
            err++;
 8009da8:	7afb      	ldrb	r3, [r7, #11]
 8009daa:	3301      	adds	r3, #1
 8009dac:	72fb      	strb	r3, [r7, #11]
          break;
 8009dae:	e089      	b.n	8009ec4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00b      	beq.n	8009dd4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	7c12      	ldrb	r2, [r2, #16]
 8009dc8:	f107 0108 	add.w	r1, r7, #8
 8009dcc:	4610      	mov	r0, r2
 8009dce:	4798      	blx	r3
 8009dd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dd2:	e077      	b.n	8009ec4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009dd4:	6839      	ldr	r1, [r7, #0]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fab1 	bl	800a33e <USBD_CtlError>
            err++;
 8009ddc:	7afb      	ldrb	r3, [r7, #11]
 8009dde:	3301      	adds	r3, #1
 8009de0:	72fb      	strb	r3, [r7, #11]
          break;
 8009de2:	e06f      	b.n	8009ec4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00b      	beq.n	8009e08 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	7c12      	ldrb	r2, [r2, #16]
 8009dfc:	f107 0108 	add.w	r1, r7, #8
 8009e00:	4610      	mov	r0, r2
 8009e02:	4798      	blx	r3
 8009e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e06:	e05d      	b.n	8009ec4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e08:	6839      	ldr	r1, [r7, #0]
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fa97 	bl	800a33e <USBD_CtlError>
            err++;
 8009e10:	7afb      	ldrb	r3, [r7, #11]
 8009e12:	3301      	adds	r3, #1
 8009e14:	72fb      	strb	r3, [r7, #11]
          break;
 8009e16:	e055      	b.n	8009ec4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00b      	beq.n	8009e3c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	7c12      	ldrb	r2, [r2, #16]
 8009e30:	f107 0108 	add.w	r1, r7, #8
 8009e34:	4610      	mov	r0, r2
 8009e36:	4798      	blx	r3
 8009e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e3a:	e043      	b.n	8009ec4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fa7d 	bl	800a33e <USBD_CtlError>
            err++;
 8009e44:	7afb      	ldrb	r3, [r7, #11]
 8009e46:	3301      	adds	r3, #1
 8009e48:	72fb      	strb	r3, [r7, #11]
          break;
 8009e4a:	e03b      	b.n	8009ec4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e52:	695b      	ldr	r3, [r3, #20]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00b      	beq.n	8009e70 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e5e:	695b      	ldr	r3, [r3, #20]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	7c12      	ldrb	r2, [r2, #16]
 8009e64:	f107 0108 	add.w	r1, r7, #8
 8009e68:	4610      	mov	r0, r2
 8009e6a:	4798      	blx	r3
 8009e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e6e:	e029      	b.n	8009ec4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 fa63 	bl	800a33e <USBD_CtlError>
            err++;
 8009e78:	7afb      	ldrb	r3, [r7, #11]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e7e:	e021      	b.n	8009ec4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00b      	beq.n	8009ea4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e92:	699b      	ldr	r3, [r3, #24]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	7c12      	ldrb	r2, [r2, #16]
 8009e98:	f107 0108 	add.w	r1, r7, #8
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	4798      	blx	r3
 8009ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ea2:	e00f      	b.n	8009ec4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fa49 	bl	800a33e <USBD_CtlError>
            err++;
 8009eac:	7afb      	ldrb	r3, [r7, #11]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8009eb2:	e007      	b.n	8009ec4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009eb4:	6839      	ldr	r1, [r7, #0]
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fa41 	bl	800a33e <USBD_CtlError>
          err++;
 8009ebc:	7afb      	ldrb	r3, [r7, #11]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009ec2:	bf00      	nop
      }
      break;
 8009ec4:	e037      	b.n	8009f36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	7c1b      	ldrb	r3, [r3, #16]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d109      	bne.n	8009ee2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ed6:	f107 0208 	add.w	r2, r7, #8
 8009eda:	4610      	mov	r0, r2
 8009edc:	4798      	blx	r3
 8009ede:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ee0:	e029      	b.n	8009f36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fa2a 	bl	800a33e <USBD_CtlError>
        err++;
 8009eea:	7afb      	ldrb	r3, [r7, #11]
 8009eec:	3301      	adds	r3, #1
 8009eee:	72fb      	strb	r3, [r7, #11]
      break;
 8009ef0:	e021      	b.n	8009f36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	7c1b      	ldrb	r3, [r3, #16]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10d      	bne.n	8009f16 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f02:	f107 0208 	add.w	r2, r7, #8
 8009f06:	4610      	mov	r0, r2
 8009f08:	4798      	blx	r3
 8009f0a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	2207      	movs	r2, #7
 8009f12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f14:	e00f      	b.n	8009f36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fa10 	bl	800a33e <USBD_CtlError>
        err++;
 8009f1e:	7afb      	ldrb	r3, [r7, #11]
 8009f20:	3301      	adds	r3, #1
 8009f22:	72fb      	strb	r3, [r7, #11]
      break;
 8009f24:	e007      	b.n	8009f36 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 fa08 	bl	800a33e <USBD_CtlError>
      err++;
 8009f2e:	7afb      	ldrb	r3, [r7, #11]
 8009f30:	3301      	adds	r3, #1
 8009f32:	72fb      	strb	r3, [r7, #11]
      break;
 8009f34:	bf00      	nop
  }

  if (err != 0U)
 8009f36:	7afb      	ldrb	r3, [r7, #11]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d11e      	bne.n	8009f7a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	88db      	ldrh	r3, [r3, #6]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d016      	beq.n	8009f72 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009f44:	893b      	ldrh	r3, [r7, #8]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00e      	beq.n	8009f68 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	88da      	ldrh	r2, [r3, #6]
 8009f4e:	893b      	ldrh	r3, [r7, #8]
 8009f50:	4293      	cmp	r3, r2
 8009f52:	bf28      	it	cs
 8009f54:	4613      	movcs	r3, r2
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f5a:	893b      	ldrh	r3, [r7, #8]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	68f9      	ldr	r1, [r7, #12]
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 fa69 	bl	800a438 <USBD_CtlSendData>
 8009f66:	e009      	b.n	8009f7c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009f68:	6839      	ldr	r1, [r7, #0]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f9e7 	bl	800a33e <USBD_CtlError>
 8009f70:	e004      	b.n	8009f7c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 faba 	bl	800a4ec <USBD_CtlSendStatus>
 8009f78:	e000      	b.n	8009f7c <USBD_GetDescriptor+0x320>
    return;
 8009f7a:	bf00      	nop
  }
}
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop

08009f84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	889b      	ldrh	r3, [r3, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d131      	bne.n	8009ffa <USBD_SetAddress+0x76>
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	88db      	ldrh	r3, [r3, #6]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d12d      	bne.n	8009ffa <USBD_SetAddress+0x76>
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	885b      	ldrh	r3, [r3, #2]
 8009fa2:	2b7f      	cmp	r3, #127	@ 0x7f
 8009fa4:	d829      	bhi.n	8009ffa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	885b      	ldrh	r3, [r3, #2]
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b03      	cmp	r3, #3
 8009fbc:	d104      	bne.n	8009fc8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009fbe:	6839      	ldr	r1, [r7, #0]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f9bc 	bl	800a33e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fc6:	e01d      	b.n	800a004 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	7bfa      	ldrb	r2, [r7, #15]
 8009fcc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009fd0:	7bfb      	ldrb	r3, [r7, #15]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 ff21 	bl	800ae1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 fa86 	bl	800a4ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d004      	beq.n	8009ff0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2202      	movs	r2, #2
 8009fea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fee:	e009      	b.n	800a004 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ff8:	e004      	b.n	800a004 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ffa:	6839      	ldr	r1, [r7, #0]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f99e 	bl	800a33e <USBD_CtlError>
  }
}
 800a002:	bf00      	nop
 800a004:	bf00      	nop
 800a006:	3710      	adds	r7, #16
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	885b      	ldrh	r3, [r3, #2]
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	4b4e      	ldr	r3, [pc, #312]	@ (800a15c <USBD_SetConfig+0x150>)
 800a022:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a024:	4b4d      	ldr	r3, [pc, #308]	@ (800a15c <USBD_SetConfig+0x150>)
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d905      	bls.n	800a038 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a02c:	6839      	ldr	r1, [r7, #0]
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f985 	bl	800a33e <USBD_CtlError>
    return USBD_FAIL;
 800a034:	2303      	movs	r3, #3
 800a036:	e08c      	b.n	800a152 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	2b02      	cmp	r3, #2
 800a042:	d002      	beq.n	800a04a <USBD_SetConfig+0x3e>
 800a044:	2b03      	cmp	r3, #3
 800a046:	d029      	beq.n	800a09c <USBD_SetConfig+0x90>
 800a048:	e075      	b.n	800a136 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a04a:	4b44      	ldr	r3, [pc, #272]	@ (800a15c <USBD_SetConfig+0x150>)
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d020      	beq.n	800a094 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a052:	4b42      	ldr	r3, [pc, #264]	@ (800a15c <USBD_SetConfig+0x150>)
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	461a      	mov	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a05c:	4b3f      	ldr	r3, [pc, #252]	@ (800a15c <USBD_SetConfig+0x150>)
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	4619      	mov	r1, r3
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7fe ffb9 	bl	8008fda <USBD_SetClassConfig>
 800a068:	4603      	mov	r3, r0
 800a06a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d008      	beq.n	800a084 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a072:	6839      	ldr	r1, [r7, #0]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 f962 	bl	800a33e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2202      	movs	r2, #2
 800a07e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a082:	e065      	b.n	800a150 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fa31 	bl	800a4ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2203      	movs	r2, #3
 800a08e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a092:	e05d      	b.n	800a150 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fa29 	bl	800a4ec <USBD_CtlSendStatus>
      break;
 800a09a:	e059      	b.n	800a150 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a09c:	4b2f      	ldr	r3, [pc, #188]	@ (800a15c <USBD_SetConfig+0x150>)
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d112      	bne.n	800a0ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2202      	movs	r2, #2
 800a0a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a0ac:	4b2b      	ldr	r3, [pc, #172]	@ (800a15c <USBD_SetConfig+0x150>)
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0b6:	4b29      	ldr	r3, [pc, #164]	@ (800a15c <USBD_SetConfig+0x150>)
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f7fe ffa8 	bl	8009012 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fa12 	bl	800a4ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0c8:	e042      	b.n	800a150 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a0ca:	4b24      	ldr	r3, [pc, #144]	@ (800a15c <USBD_SetConfig+0x150>)
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d02a      	beq.n	800a12e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	4619      	mov	r1, r3
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f7fe ff96 	bl	8009012 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a0e6:	4b1d      	ldr	r3, [pc, #116]	@ (800a15c <USBD_SetConfig+0x150>)
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0f0:	4b1a      	ldr	r3, [pc, #104]	@ (800a15c <USBD_SetConfig+0x150>)
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7fe ff6f 	bl	8008fda <USBD_SetClassConfig>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00f      	beq.n	800a126 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f918 	bl	800a33e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	b2db      	uxtb	r3, r3
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7fe ff7b 	bl	8009012 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2202      	movs	r2, #2
 800a120:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a124:	e014      	b.n	800a150 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f9e0 	bl	800a4ec <USBD_CtlSendStatus>
      break;
 800a12c:	e010      	b.n	800a150 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f9dc 	bl	800a4ec <USBD_CtlSendStatus>
      break;
 800a134:	e00c      	b.n	800a150 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f900 	bl	800a33e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a13e:	4b07      	ldr	r3, [pc, #28]	@ (800a15c <USBD_SetConfig+0x150>)
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	4619      	mov	r1, r3
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7fe ff64 	bl	8009012 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a14a:	2303      	movs	r3, #3
 800a14c:	73fb      	strb	r3, [r7, #15]
      break;
 800a14e:	bf00      	nop
  }

  return ret;
 800a150:	7bfb      	ldrb	r3, [r7, #15]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	24003184 	.word	0x24003184

0800a160 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	88db      	ldrh	r3, [r3, #6]
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d004      	beq.n	800a17c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a172:	6839      	ldr	r1, [r7, #0]
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 f8e2 	bl	800a33e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a17a:	e023      	b.n	800a1c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a182:	b2db      	uxtb	r3, r3
 800a184:	2b02      	cmp	r3, #2
 800a186:	dc02      	bgt.n	800a18e <USBD_GetConfig+0x2e>
 800a188:	2b00      	cmp	r3, #0
 800a18a:	dc03      	bgt.n	800a194 <USBD_GetConfig+0x34>
 800a18c:	e015      	b.n	800a1ba <USBD_GetConfig+0x5a>
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d00b      	beq.n	800a1aa <USBD_GetConfig+0x4a>
 800a192:	e012      	b.n	800a1ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	3308      	adds	r3, #8
 800a19e:	2201      	movs	r2, #1
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f948 	bl	800a438 <USBD_CtlSendData>
        break;
 800a1a8:	e00c      	b.n	800a1c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 f940 	bl	800a438 <USBD_CtlSendData>
        break;
 800a1b8:	e004      	b.n	800a1c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a1ba:	6839      	ldr	r1, [r7, #0]
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f8be 	bl	800a33e <USBD_CtlError>
        break;
 800a1c2:	bf00      	nop
}
 800a1c4:	bf00      	nop
 800a1c6:	3708      	adds	r7, #8
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d81e      	bhi.n	800a222 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	88db      	ldrh	r3, [r3, #6]
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d004      	beq.n	800a1f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f8a5 	bl	800a33e <USBD_CtlError>
        break;
 800a1f4:	e01a      	b.n	800a22c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a202:	2b00      	cmp	r3, #0
 800a204:	d005      	beq.n	800a212 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	f043 0202 	orr.w	r2, r3, #2
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	330c      	adds	r3, #12
 800a216:	2202      	movs	r2, #2
 800a218:	4619      	mov	r1, r3
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f90c 	bl	800a438 <USBD_CtlSendData>
      break;
 800a220:	e004      	b.n	800a22c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a222:	6839      	ldr	r1, [r7, #0]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f88a 	bl	800a33e <USBD_CtlError>
      break;
 800a22a:	bf00      	nop
  }
}
 800a22c:	bf00      	nop
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	885b      	ldrh	r3, [r3, #2]
 800a242:	2b01      	cmp	r3, #1
 800a244:	d107      	bne.n	800a256 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f94c 	bl	800a4ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a254:	e013      	b.n	800a27e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	885b      	ldrh	r3, [r3, #2]
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	d10b      	bne.n	800a276 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	889b      	ldrh	r3, [r3, #4]
 800a262:	0a1b      	lsrs	r3, r3, #8
 800a264:	b29b      	uxth	r3, r3
 800a266:	b2da      	uxtb	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f93c 	bl	800a4ec <USBD_CtlSendStatus>
}
 800a274:	e003      	b.n	800a27e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a276:	6839      	ldr	r1, [r7, #0]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f860 	bl	800a33e <USBD_CtlError>
}
 800a27e:	bf00      	nop
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b082      	sub	sp, #8
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a296:	b2db      	uxtb	r3, r3
 800a298:	3b01      	subs	r3, #1
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d80b      	bhi.n	800a2b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	885b      	ldrh	r3, [r3, #2]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d10c      	bne.n	800a2c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f91c 	bl	800a4ec <USBD_CtlSendStatus>
      }
      break;
 800a2b4:	e004      	b.n	800a2c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 f840 	bl	800a33e <USBD_CtlError>
      break;
 800a2be:	e000      	b.n	800a2c2 <USBD_ClrFeature+0x3c>
      break;
 800a2c0:	bf00      	nop
  }
}
 800a2c2:	bf00      	nop
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	781a      	ldrb	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	781a      	ldrb	r2, [r3, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f7ff fa16 	bl	8009726 <SWAPBYTE>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	3301      	adds	r3, #1
 800a306:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	3301      	adds	r3, #1
 800a30c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f7ff fa09 	bl	8009726 <SWAPBYTE>
 800a314:	4603      	mov	r3, r0
 800a316:	461a      	mov	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	3301      	adds	r3, #1
 800a320:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3301      	adds	r3, #1
 800a326:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f7ff f9fc 	bl	8009726 <SWAPBYTE>
 800a32e:	4603      	mov	r3, r0
 800a330:	461a      	mov	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	80da      	strh	r2, [r3, #6]
}
 800a336:	bf00      	nop
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b082      	sub	sp, #8
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
 800a346:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a348:	2180      	movs	r1, #128	@ 0x80
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 fcfc 	bl	800ad48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a350:	2100      	movs	r1, #0
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 fcf8 	bl	800ad48 <USBD_LL_StallEP>
}
 800a358:	bf00      	nop
 800a35a:	3708      	adds	r7, #8
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a36c:	2300      	movs	r3, #0
 800a36e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d042      	beq.n	800a3fc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a37a:	6938      	ldr	r0, [r7, #16]
 800a37c:	f000 f842 	bl	800a404 <USBD_GetLen>
 800a380:	4603      	mov	r3, r0
 800a382:	3301      	adds	r3, #1
 800a384:	005b      	lsls	r3, r3, #1
 800a386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a38a:	d808      	bhi.n	800a39e <USBD_GetString+0x3e>
 800a38c:	6938      	ldr	r0, [r7, #16]
 800a38e:	f000 f839 	bl	800a404 <USBD_GetLen>
 800a392:	4603      	mov	r3, r0
 800a394:	3301      	adds	r3, #1
 800a396:	b29b      	uxth	r3, r3
 800a398:	005b      	lsls	r3, r3, #1
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	e001      	b.n	800a3a2 <USBD_GetString+0x42>
 800a39e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a3a6:	7dfb      	ldrb	r3, [r7, #23]
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	7812      	ldrb	r2, [r2, #0]
 800a3b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3b2:	7dfb      	ldrb	r3, [r7, #23]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a3b8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	4413      	add	r3, r2
 800a3be:	2203      	movs	r2, #3
 800a3c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3c2:	7dfb      	ldrb	r3, [r7, #23]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a3c8:	e013      	b.n	800a3f2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a3ca:	7dfb      	ldrb	r3, [r7, #23]
 800a3cc:	68ba      	ldr	r2, [r7, #8]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	7812      	ldrb	r2, [r2, #0]
 800a3d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	613b      	str	r3, [r7, #16]
    idx++;
 800a3dc:	7dfb      	ldrb	r3, [r7, #23]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a3e2:	7dfb      	ldrb	r3, [r7, #23]
 800a3e4:	68ba      	ldr	r2, [r7, #8]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	701a      	strb	r2, [r3, #0]
    idx++;
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1e7      	bne.n	800a3ca <USBD_GetString+0x6a>
 800a3fa:	e000      	b.n	800a3fe <USBD_GetString+0x9e>
    return;
 800a3fc:	bf00      	nop
  }
}
 800a3fe:	3718      	adds	r7, #24
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a40c:	2300      	movs	r3, #0
 800a40e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a414:	e005      	b.n	800a422 <USBD_GetLen+0x1e>
  {
    len++;
 800a416:	7bfb      	ldrb	r3, [r7, #15]
 800a418:	3301      	adds	r3, #1
 800a41a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	3301      	adds	r3, #1
 800a420:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1f5      	bne.n	800a416 <USBD_GetLen+0x12>
  }

  return len;
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3714      	adds	r7, #20
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2202      	movs	r2, #2
 800a448:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	2100      	movs	r1, #0
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	f000 fcfb 	bl	800ae5a <USBD_LL_Transmit>

  return USBD_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b084      	sub	sp, #16
 800a472:	af00      	add	r7, sp, #0
 800a474:	60f8      	str	r0, [r7, #12]
 800a476:	60b9      	str	r1, [r7, #8]
 800a478:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	2100      	movs	r1, #0
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f000 fcea 	bl	800ae5a <USBD_LL_Transmit>

  return USBD_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2203      	movs	r2, #3
 800a4a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	68ba      	ldr	r2, [r7, #8]
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f000 fcee 	bl	800ae9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	60f8      	str	r0, [r7, #12]
 800a4d2:	60b9      	str	r1, [r7, #8]
 800a4d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	2100      	movs	r1, #0
 800a4dc:	68f8      	ldr	r0, [r7, #12]
 800a4de:	f000 fcdd 	bl	800ae9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2204      	movs	r2, #4
 800a4f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	2200      	movs	r2, #0
 800a500:	2100      	movs	r1, #0
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fca9 	bl	800ae5a <USBD_LL_Transmit>

  return USBD_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b082      	sub	sp, #8
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2205      	movs	r2, #5
 800a51e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a522:	2300      	movs	r3, #0
 800a524:	2200      	movs	r2, #0
 800a526:	2100      	movs	r1, #0
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 fcb7 	bl	800ae9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a53c:	2200      	movs	r2, #0
 800a53e:	4913      	ldr	r1, [pc, #76]	@ (800a58c <MX_USB_DEVICE_Init+0x54>)
 800a540:	4813      	ldr	r0, [pc, #76]	@ (800a590 <MX_USB_DEVICE_Init+0x58>)
 800a542:	f7fe fccd 	bl	8008ee0 <USBD_Init>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d001      	beq.n	800a550 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a54c:	f7f8 f98a 	bl	8002864 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a550:	4910      	ldr	r1, [pc, #64]	@ (800a594 <MX_USB_DEVICE_Init+0x5c>)
 800a552:	480f      	ldr	r0, [pc, #60]	@ (800a590 <MX_USB_DEVICE_Init+0x58>)
 800a554:	f7fe fcf4 	bl	8008f40 <USBD_RegisterClass>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d001      	beq.n	800a562 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a55e:	f7f8 f981 	bl	8002864 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a562:	490d      	ldr	r1, [pc, #52]	@ (800a598 <MX_USB_DEVICE_Init+0x60>)
 800a564:	480a      	ldr	r0, [pc, #40]	@ (800a590 <MX_USB_DEVICE_Init+0x58>)
 800a566:	f7fe fbeb 	bl	8008d40 <USBD_CDC_RegisterInterface>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d001      	beq.n	800a574 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a570:	f7f8 f978 	bl	8002864 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a574:	4806      	ldr	r0, [pc, #24]	@ (800a590 <MX_USB_DEVICE_Init+0x58>)
 800a576:	f7fe fd19 	bl	8008fac <USBD_Start>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d001      	beq.n	800a584 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a580:	f7f8 f970 	bl	8002864 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800a584:	f7fa f8a2 	bl	80046cc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a588:	bf00      	nop
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	240020b8 	.word	0x240020b8
 800a590:	24003188 	.word	0x24003188
 800a594:	24002024 	.word	0x24002024
 800a598:	240020a4 	.word	0x240020a4

0800a59c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	4905      	ldr	r1, [pc, #20]	@ (800a5b8 <CDC_Init_FS+0x1c>)
 800a5a4:	4805      	ldr	r0, [pc, #20]	@ (800a5bc <CDC_Init_FS+0x20>)
 800a5a6:	f7fe fbe5 	bl	8008d74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a5aa:	4905      	ldr	r1, [pc, #20]	@ (800a5c0 <CDC_Init_FS+0x24>)
 800a5ac:	4803      	ldr	r0, [pc, #12]	@ (800a5bc <CDC_Init_FS+0x20>)
 800a5ae:	f7fe fc03 	bl	8008db8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a5b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	24003c64 	.word	0x24003c64
 800a5bc:	24003188 	.word	0x24003188
 800a5c0:	24003464 	.word	0x24003464

0800a5c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a5c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	4603      	mov	r3, r0
 800a5dc:	6039      	str	r1, [r7, #0]
 800a5de:	71fb      	strb	r3, [r7, #7]
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a5e4:	79fb      	ldrb	r3, [r7, #7]
 800a5e6:	2b23      	cmp	r3, #35	@ 0x23
 800a5e8:	d84a      	bhi.n	800a680 <CDC_Control_FS+0xac>
 800a5ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a5f0 <CDC_Control_FS+0x1c>)
 800a5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f0:	0800a681 	.word	0x0800a681
 800a5f4:	0800a681 	.word	0x0800a681
 800a5f8:	0800a681 	.word	0x0800a681
 800a5fc:	0800a681 	.word	0x0800a681
 800a600:	0800a681 	.word	0x0800a681
 800a604:	0800a681 	.word	0x0800a681
 800a608:	0800a681 	.word	0x0800a681
 800a60c:	0800a681 	.word	0x0800a681
 800a610:	0800a681 	.word	0x0800a681
 800a614:	0800a681 	.word	0x0800a681
 800a618:	0800a681 	.word	0x0800a681
 800a61c:	0800a681 	.word	0x0800a681
 800a620:	0800a681 	.word	0x0800a681
 800a624:	0800a681 	.word	0x0800a681
 800a628:	0800a681 	.word	0x0800a681
 800a62c:	0800a681 	.word	0x0800a681
 800a630:	0800a681 	.word	0x0800a681
 800a634:	0800a681 	.word	0x0800a681
 800a638:	0800a681 	.word	0x0800a681
 800a63c:	0800a681 	.word	0x0800a681
 800a640:	0800a681 	.word	0x0800a681
 800a644:	0800a681 	.word	0x0800a681
 800a648:	0800a681 	.word	0x0800a681
 800a64c:	0800a681 	.word	0x0800a681
 800a650:	0800a681 	.word	0x0800a681
 800a654:	0800a681 	.word	0x0800a681
 800a658:	0800a681 	.word	0x0800a681
 800a65c:	0800a681 	.word	0x0800a681
 800a660:	0800a681 	.word	0x0800a681
 800a664:	0800a681 	.word	0x0800a681
 800a668:	0800a681 	.word	0x0800a681
 800a66c:	0800a681 	.word	0x0800a681
 800a670:	0800a681 	.word	0x0800a681
 800a674:	0800a681 	.word	0x0800a681
 800a678:	0800a681 	.word	0x0800a681
 800a67c:	0800a681 	.word	0x0800a681
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a680:	bf00      	nop
  }

  return (USBD_OK);
 800a682:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a684:	4618      	mov	r0, r3
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a69a:	6879      	ldr	r1, [r7, #4]
 800a69c:	4805      	ldr	r0, [pc, #20]	@ (800a6b4 <CDC_Receive_FS+0x24>)
 800a69e:	f7fe fb8b 	bl	8008db8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6a2:	4804      	ldr	r0, [pc, #16]	@ (800a6b4 <CDC_Receive_FS+0x24>)
 800a6a4:	f7fe fbe6 	bl	8008e74 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a6a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3708      	adds	r7, #8
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	24003188 	.word	0x24003188

0800a6b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a6ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	371c      	adds	r7, #28
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
	...

0800a6dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	6039      	str	r1, [r7, #0]
 800a6e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	2212      	movs	r2, #18
 800a6ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a6ee:	4b03      	ldr	r3, [pc, #12]	@ (800a6fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr
 800a6fc:	240020d8 	.word	0x240020d8

0800a700 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	4603      	mov	r3, r0
 800a708:	6039      	str	r1, [r7, #0]
 800a70a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	2204      	movs	r2, #4
 800a710:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a712:	4b03      	ldr	r3, [pc, #12]	@ (800a720 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a714:	4618      	mov	r0, r3
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	240020ec 	.word	0x240020ec

0800a724 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	4603      	mov	r3, r0
 800a72c:	6039      	str	r1, [r7, #0]
 800a72e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a730:	79fb      	ldrb	r3, [r7, #7]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d105      	bne.n	800a742 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a736:	683a      	ldr	r2, [r7, #0]
 800a738:	4907      	ldr	r1, [pc, #28]	@ (800a758 <USBD_FS_ProductStrDescriptor+0x34>)
 800a73a:	4808      	ldr	r0, [pc, #32]	@ (800a75c <USBD_FS_ProductStrDescriptor+0x38>)
 800a73c:	f7ff fe10 	bl	800a360 <USBD_GetString>
 800a740:	e004      	b.n	800a74c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a742:	683a      	ldr	r2, [r7, #0]
 800a744:	4904      	ldr	r1, [pc, #16]	@ (800a758 <USBD_FS_ProductStrDescriptor+0x34>)
 800a746:	4805      	ldr	r0, [pc, #20]	@ (800a75c <USBD_FS_ProductStrDescriptor+0x38>)
 800a748:	f7ff fe0a 	bl	800a360 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a74c:	4b02      	ldr	r3, [pc, #8]	@ (800a758 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	24004464 	.word	0x24004464
 800a75c:	0800b3f0 	.word	0x0800b3f0

0800a760 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	4603      	mov	r3, r0
 800a768:	6039      	str	r1, [r7, #0]
 800a76a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a76c:	683a      	ldr	r2, [r7, #0]
 800a76e:	4904      	ldr	r1, [pc, #16]	@ (800a780 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a770:	4804      	ldr	r0, [pc, #16]	@ (800a784 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a772:	f7ff fdf5 	bl	800a360 <USBD_GetString>
  return USBD_StrDesc;
 800a776:	4b02      	ldr	r3, [pc, #8]	@ (800a780 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	24004464 	.word	0x24004464
 800a784:	0800b408 	.word	0x0800b408

0800a788 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	4603      	mov	r3, r0
 800a790:	6039      	str	r1, [r7, #0]
 800a792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	221a      	movs	r2, #26
 800a798:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a79a:	f000 f843 	bl	800a824 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a79e:	4b02      	ldr	r3, [pc, #8]	@ (800a7a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3708      	adds	r7, #8
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	240020f0 	.word	0x240020f0

0800a7ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	6039      	str	r1, [r7, #0]
 800a7b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a7b8:	79fb      	ldrb	r3, [r7, #7]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d105      	bne.n	800a7ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7be:	683a      	ldr	r2, [r7, #0]
 800a7c0:	4907      	ldr	r1, [pc, #28]	@ (800a7e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7c2:	4808      	ldr	r0, [pc, #32]	@ (800a7e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7c4:	f7ff fdcc 	bl	800a360 <USBD_GetString>
 800a7c8:	e004      	b.n	800a7d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	4904      	ldr	r1, [pc, #16]	@ (800a7e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7ce:	4805      	ldr	r0, [pc, #20]	@ (800a7e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7d0:	f7ff fdc6 	bl	800a360 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7d4:	4b02      	ldr	r3, [pc, #8]	@ (800a7e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	24004464 	.word	0x24004464
 800a7e4:	0800b41c 	.word	0x0800b41c

0800a7e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	6039      	str	r1, [r7, #0]
 800a7f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7f4:	79fb      	ldrb	r3, [r7, #7]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d105      	bne.n	800a806 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a7fa:	683a      	ldr	r2, [r7, #0]
 800a7fc:	4907      	ldr	r1, [pc, #28]	@ (800a81c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a7fe:	4808      	ldr	r0, [pc, #32]	@ (800a820 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a800:	f7ff fdae 	bl	800a360 <USBD_GetString>
 800a804:	e004      	b.n	800a810 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a806:	683a      	ldr	r2, [r7, #0]
 800a808:	4904      	ldr	r1, [pc, #16]	@ (800a81c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a80a:	4805      	ldr	r0, [pc, #20]	@ (800a820 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a80c:	f7ff fda8 	bl	800a360 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a810:	4b02      	ldr	r3, [pc, #8]	@ (800a81c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a812:	4618      	mov	r0, r3
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	24004464 	.word	0x24004464
 800a820:	0800b428 	.word	0x0800b428

0800a824 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a82a:	4b0f      	ldr	r3, [pc, #60]	@ (800a868 <Get_SerialNum+0x44>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a830:	4b0e      	ldr	r3, [pc, #56]	@ (800a86c <Get_SerialNum+0x48>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a836:	4b0e      	ldr	r3, [pc, #56]	@ (800a870 <Get_SerialNum+0x4c>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4413      	add	r3, r2
 800a842:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d009      	beq.n	800a85e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a84a:	2208      	movs	r2, #8
 800a84c:	4909      	ldr	r1, [pc, #36]	@ (800a874 <Get_SerialNum+0x50>)
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f000 f814 	bl	800a87c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a854:	2204      	movs	r2, #4
 800a856:	4908      	ldr	r1, [pc, #32]	@ (800a878 <Get_SerialNum+0x54>)
 800a858:	68b8      	ldr	r0, [r7, #8]
 800a85a:	f000 f80f 	bl	800a87c <IntToUnicode>
  }
}
 800a85e:	bf00      	nop
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	1ff1e800 	.word	0x1ff1e800
 800a86c:	1ff1e804 	.word	0x1ff1e804
 800a870:	1ff1e808 	.word	0x1ff1e808
 800a874:	240020f2 	.word	0x240020f2
 800a878:	24002102 	.word	0x24002102

0800a87c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b087      	sub	sp, #28
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	4613      	mov	r3, r2
 800a888:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a88e:	2300      	movs	r3, #0
 800a890:	75fb      	strb	r3, [r7, #23]
 800a892:	e027      	b.n	800a8e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	0f1b      	lsrs	r3, r3, #28
 800a898:	2b09      	cmp	r3, #9
 800a89a:	d80b      	bhi.n	800a8b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	0f1b      	lsrs	r3, r3, #28
 800a8a0:	b2da      	uxtb	r2, r3
 800a8a2:	7dfb      	ldrb	r3, [r7, #23]
 800a8a4:	005b      	lsls	r3, r3, #1
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	440b      	add	r3, r1
 800a8ac:	3230      	adds	r2, #48	@ 0x30
 800a8ae:	b2d2      	uxtb	r2, r2
 800a8b0:	701a      	strb	r2, [r3, #0]
 800a8b2:	e00a      	b.n	800a8ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	0f1b      	lsrs	r3, r3, #28
 800a8b8:	b2da      	uxtb	r2, r3
 800a8ba:	7dfb      	ldrb	r3, [r7, #23]
 800a8bc:	005b      	lsls	r3, r3, #1
 800a8be:	4619      	mov	r1, r3
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	440b      	add	r3, r1
 800a8c4:	3237      	adds	r2, #55	@ 0x37
 800a8c6:	b2d2      	uxtb	r2, r2
 800a8c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	011b      	lsls	r3, r3, #4
 800a8ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a8d0:	7dfb      	ldrb	r3, [r7, #23]
 800a8d2:	005b      	lsls	r3, r3, #1
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	4413      	add	r3, r2
 800a8da:	2200      	movs	r2, #0
 800a8dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a8de:	7dfb      	ldrb	r3, [r7, #23]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	75fb      	strb	r3, [r7, #23]
 800a8e4:	7dfa      	ldrb	r2, [r7, #23]
 800a8e6:	79fb      	ldrb	r3, [r7, #7]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d3d3      	bcc.n	800a894 <IntToUnicode+0x18>
  }
}
 800a8ec:	bf00      	nop
 800a8ee:	bf00      	nop
 800a8f0:	371c      	adds	r7, #28
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr
	...

0800a8fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b0bc      	sub	sp, #240	@ 0xf0
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a904:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a908:	2200      	movs	r2, #0
 800a90a:	601a      	str	r2, [r3, #0]
 800a90c:	605a      	str	r2, [r3, #4]
 800a90e:	609a      	str	r2, [r3, #8]
 800a910:	60da      	str	r2, [r3, #12]
 800a912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a914:	f107 0310 	add.w	r3, r7, #16
 800a918:	22c8      	movs	r2, #200	@ 0xc8
 800a91a:	2100      	movs	r1, #0
 800a91c:	4618      	mov	r0, r3
 800a91e:	f000 fce9 	bl	800b2f4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a34      	ldr	r2, [pc, #208]	@ (800a9f8 <HAL_PCD_MspInit+0xfc>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d161      	bne.n	800a9f0 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a92c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a930:	f04f 0300 	mov.w	r3, #0
 800a934:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a938:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800a93c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a940:	f107 0310 	add.w	r3, r7, #16
 800a944:	4618      	mov	r0, r3
 800a946:	f7fa fef5 	bl	8005734 <HAL_RCCEx_PeriphCLKConfig>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d001      	beq.n	800a954 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800a950:	f7f7 ff88 	bl	8002864 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800a954:	f7f9 feba 	bl	80046cc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a958:	4b28      	ldr	r3, [pc, #160]	@ (800a9fc <HAL_PCD_MspInit+0x100>)
 800a95a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a95e:	4a27      	ldr	r2, [pc, #156]	@ (800a9fc <HAL_PCD_MspInit+0x100>)
 800a960:	f043 0301 	orr.w	r3, r3, #1
 800a964:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a968:	4b24      	ldr	r3, [pc, #144]	@ (800a9fc <HAL_PCD_MspInit+0x100>)
 800a96a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	60fb      	str	r3, [r7, #12]
 800a974:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_FS2_VBUS_Pin;
 800a976:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a97a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a97e:	2300      	movs	r3, #0
 800a980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a984:	2300      	movs	r3, #0
 800a986:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(USB_FS2_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a98a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a98e:	4619      	mov	r1, r3
 800a990:	481b      	ldr	r0, [pc, #108]	@ (800aa00 <HAL_PCD_MspInit+0x104>)
 800a992:	f7f8 f9c3 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_FS2_DP_Pin|USB_FS2_DM_Pin;
 800a996:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a99a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a99e:	2302      	movs	r3, #2
 800a9a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800a9b0:	230a      	movs	r3, #10
 800a9b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9b6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	4810      	ldr	r0, [pc, #64]	@ (800aa00 <HAL_PCD_MspInit+0x104>)
 800a9be:	f7f8 f9ad 	bl	8002d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a9c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a9fc <HAL_PCD_MspInit+0x100>)
 800a9c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a9c8:	4a0c      	ldr	r2, [pc, #48]	@ (800a9fc <HAL_PCD_MspInit+0x100>)
 800a9ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a9ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a9d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a9fc <HAL_PCD_MspInit+0x100>)
 800a9d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a9d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9dc:	60bb      	str	r3, [r7, #8]
 800a9de:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	2065      	movs	r0, #101	@ 0x65
 800a9e6:	f7f8 f964 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a9ea:	2065      	movs	r0, #101	@ 0x65
 800a9ec:	f7f8 f97b 	bl	8002ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a9f0:	bf00      	nop
 800a9f2:	37f0      	adds	r7, #240	@ 0xf0
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	40080000 	.word	0x40080000
 800a9fc:	58024400 	.word	0x58024400
 800aa00:	58020000 	.word	0x58020000

0800aa04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aa18:	4619      	mov	r1, r3
 800aa1a:	4610      	mov	r0, r2
 800aa1c:	f7fe fb13 	bl	8009046 <USBD_LL_SetupStage>
}
 800aa20:	bf00      	nop
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	460b      	mov	r3, r1
 800aa32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aa3a:	78fa      	ldrb	r2, [r7, #3]
 800aa3c:	6879      	ldr	r1, [r7, #4]
 800aa3e:	4613      	mov	r3, r2
 800aa40:	00db      	lsls	r3, r3, #3
 800aa42:	4413      	add	r3, r2
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	440b      	add	r3, r1
 800aa48:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	78fb      	ldrb	r3, [r7, #3]
 800aa50:	4619      	mov	r1, r3
 800aa52:	f7fe fb4d 	bl	80090f0 <USBD_LL_DataOutStage>
}
 800aa56:	bf00      	nop
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b082      	sub	sp, #8
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
 800aa66:	460b      	mov	r3, r1
 800aa68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aa70:	78fa      	ldrb	r2, [r7, #3]
 800aa72:	6879      	ldr	r1, [r7, #4]
 800aa74:	4613      	mov	r3, r2
 800aa76:	00db      	lsls	r3, r3, #3
 800aa78:	4413      	add	r3, r2
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	440b      	add	r3, r1
 800aa7e:	3320      	adds	r3, #32
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	78fb      	ldrb	r3, [r7, #3]
 800aa84:	4619      	mov	r1, r3
 800aa86:	f7fe fbe6 	bl	8009256 <USBD_LL_DataInStage>
}
 800aa8a:	bf00      	nop
 800aa8c:	3708      	adds	r7, #8
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b082      	sub	sp, #8
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7fe fd20 	bl	80094e6 <USBD_LL_SOF>
}
 800aaa6:	bf00      	nop
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b084      	sub	sp, #16
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aab6:	2301      	movs	r3, #1
 800aab8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	79db      	ldrb	r3, [r3, #7]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d102      	bne.n	800aac8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aac2:	2300      	movs	r3, #0
 800aac4:	73fb      	strb	r3, [r7, #15]
 800aac6:	e008      	b.n	800aada <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	79db      	ldrb	r3, [r3, #7]
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d102      	bne.n	800aad6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aad0:	2301      	movs	r3, #1
 800aad2:	73fb      	strb	r3, [r7, #15]
 800aad4:	e001      	b.n	800aada <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aad6:	f7f7 fec5 	bl	8002864 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aae0:	7bfa      	ldrb	r2, [r7, #15]
 800aae2:	4611      	mov	r1, r2
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7fe fcba 	bl	800945e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7fe fc62 	bl	80093ba <USBD_LL_Reset>
}
 800aaf6:	bf00      	nop
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
	...

0800ab00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7fe fcb5 	bl	800947e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	6812      	ldr	r2, [r2, #0]
 800ab22:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab26:	f043 0301 	orr.w	r3, r3, #1
 800ab2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	7adb      	ldrb	r3, [r3, #11]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d005      	beq.n	800ab40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab34:	4b04      	ldr	r3, [pc, #16]	@ (800ab48 <HAL_PCD_SuspendCallback+0x48>)
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	4a03      	ldr	r2, [pc, #12]	@ (800ab48 <HAL_PCD_SuspendCallback+0x48>)
 800ab3a:	f043 0306 	orr.w	r3, r3, #6
 800ab3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab40:	bf00      	nop
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	e000ed00 	.word	0xe000ed00

0800ab4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fe fcab 	bl	80094b6 <USBD_LL_Resume>
}
 800ab60:	bf00      	nop
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	460b      	mov	r3, r1
 800ab72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab7a:	78fa      	ldrb	r2, [r7, #3]
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fe fd03 	bl	800958a <USBD_LL_IsoOUTIncomplete>
}
 800ab84:	bf00      	nop
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	460b      	mov	r3, r1
 800ab96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab9e:	78fa      	ldrb	r2, [r7, #3]
 800aba0:	4611      	mov	r1, r2
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fe fcbf 	bl	8009526 <USBD_LL_IsoINIncomplete>
}
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe fd15 	bl	80095ee <USBD_LL_DevConnected>
}
 800abc4:	bf00      	nop
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fe fd12 	bl	8009604 <USBD_LL_DevDisconnected>
}
 800abe0:	bf00      	nop
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d13e      	bne.n	800ac76 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800abf8:	4a21      	ldr	r2, [pc, #132]	@ (800ac80 <USBD_LL_Init+0x98>)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	4a1f      	ldr	r2, [pc, #124]	@ (800ac80 <USBD_LL_Init+0x98>)
 800ac04:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac08:	4b1d      	ldr	r3, [pc, #116]	@ (800ac80 <USBD_LL_Init+0x98>)
 800ac0a:	4a1e      	ldr	r2, [pc, #120]	@ (800ac84 <USBD_LL_Init+0x9c>)
 800ac0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800ac0e:	4b1c      	ldr	r3, [pc, #112]	@ (800ac80 <USBD_LL_Init+0x98>)
 800ac10:	2209      	movs	r2, #9
 800ac12:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ac14:	4b1a      	ldr	r3, [pc, #104]	@ (800ac80 <USBD_LL_Init+0x98>)
 800ac16:	2202      	movs	r2, #2
 800ac18:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac1a:	4b19      	ldr	r3, [pc, #100]	@ (800ac80 <USBD_LL_Init+0x98>)
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac20:	4b17      	ldr	r3, [pc, #92]	@ (800ac80 <USBD_LL_Init+0x98>)
 800ac22:	2202      	movs	r2, #2
 800ac24:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac26:	4b16      	ldr	r3, [pc, #88]	@ (800ac80 <USBD_LL_Init+0x98>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ac2c:	4b14      	ldr	r3, [pc, #80]	@ (800ac80 <USBD_LL_Init+0x98>)
 800ac2e:	2200      	movs	r2, #0
 800ac30:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ac32:	4b13      	ldr	r3, [pc, #76]	@ (800ac80 <USBD_LL_Init+0x98>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800ac38:	4b11      	ldr	r3, [pc, #68]	@ (800ac80 <USBD_LL_Init+0x98>)
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ac3e:	4b10      	ldr	r3, [pc, #64]	@ (800ac80 <USBD_LL_Init+0x98>)
 800ac40:	2201      	movs	r2, #1
 800ac42:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ac44:	4b0e      	ldr	r3, [pc, #56]	@ (800ac80 <USBD_LL_Init+0x98>)
 800ac46:	2200      	movs	r2, #0
 800ac48:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ac4a:	480d      	ldr	r0, [pc, #52]	@ (800ac80 <USBD_LL_Init+0x98>)
 800ac4c:	f7f8 fa44 	bl	80030d8 <HAL_PCD_Init>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d001      	beq.n	800ac5a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ac56:	f7f7 fe05 	bl	8002864 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ac5a:	2180      	movs	r1, #128	@ 0x80
 800ac5c:	4808      	ldr	r0, [pc, #32]	@ (800ac80 <USBD_LL_Init+0x98>)
 800ac5e:	f7f9 fc9a 	bl	8004596 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ac62:	2240      	movs	r2, #64	@ 0x40
 800ac64:	2100      	movs	r1, #0
 800ac66:	4806      	ldr	r0, [pc, #24]	@ (800ac80 <USBD_LL_Init+0x98>)
 800ac68:	f7f9 fc4e 	bl	8004508 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ac6c:	2280      	movs	r2, #128	@ 0x80
 800ac6e:	2101      	movs	r1, #1
 800ac70:	4803      	ldr	r0, [pc, #12]	@ (800ac80 <USBD_LL_Init+0x98>)
 800ac72:	f7f9 fc49 	bl	8004508 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3708      	adds	r7, #8
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	24004664 	.word	0x24004664
 800ac84:	40080000 	.word	0x40080000

0800ac88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac90:	2300      	movs	r3, #0
 800ac92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7f8 fb26 	bl	80032f0 <HAL_PCD_Start>
 800aca4:	4603      	mov	r3, r0
 800aca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aca8:	7bfb      	ldrb	r3, [r7, #15]
 800acaa:	4618      	mov	r0, r3
 800acac:	f000 f942 	bl	800af34 <USBD_Get_USB_Status>
 800acb0:	4603      	mov	r3, r0
 800acb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b084      	sub	sp, #16
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
 800acc6:	4608      	mov	r0, r1
 800acc8:	4611      	mov	r1, r2
 800acca:	461a      	mov	r2, r3
 800accc:	4603      	mov	r3, r0
 800acce:	70fb      	strb	r3, [r7, #3]
 800acd0:	460b      	mov	r3, r1
 800acd2:	70bb      	strb	r3, [r7, #2]
 800acd4:	4613      	mov	r3, r2
 800acd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acd8:	2300      	movs	r3, #0
 800acda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acdc:	2300      	movs	r3, #0
 800acde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ace6:	78bb      	ldrb	r3, [r7, #2]
 800ace8:	883a      	ldrh	r2, [r7, #0]
 800acea:	78f9      	ldrb	r1, [r7, #3]
 800acec:	f7f9 f827 	bl	8003d3e <HAL_PCD_EP_Open>
 800acf0:	4603      	mov	r3, r0
 800acf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 f91c 	bl	800af34 <USBD_Get_USB_Status>
 800acfc:	4603      	mov	r3, r0
 800acfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	460b      	mov	r3, r1
 800ad14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad16:	2300      	movs	r3, #0
 800ad18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad24:	78fa      	ldrb	r2, [r7, #3]
 800ad26:	4611      	mov	r1, r2
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7f9 f872 	bl	8003e12 <HAL_PCD_EP_Close>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad32:	7bfb      	ldrb	r3, [r7, #15]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f000 f8fd 	bl	800af34 <USBD_Get_USB_Status>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad54:	2300      	movs	r3, #0
 800ad56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad62:	78fa      	ldrb	r2, [r7, #3]
 800ad64:	4611      	mov	r1, r2
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7f9 f92a 	bl	8003fc0 <HAL_PCD_EP_SetStall>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad70:	7bfb      	ldrb	r3, [r7, #15]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f000 f8de 	bl	800af34 <USBD_Get_USB_Status>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
 800ad8e:	460b      	mov	r3, r1
 800ad90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad92:	2300      	movs	r3, #0
 800ad94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad96:	2300      	movs	r3, #0
 800ad98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ada0:	78fa      	ldrb	r2, [r7, #3]
 800ada2:	4611      	mov	r1, r2
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7f9 f96e 	bl	8004086 <HAL_PCD_EP_ClrStall>
 800adaa:	4603      	mov	r3, r0
 800adac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adae:	7bfb      	ldrb	r3, [r7, #15]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 f8bf 	bl	800af34 <USBD_Get_USB_Status>
 800adb6:	4603      	mov	r3, r0
 800adb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adba:	7bbb      	ldrb	r3, [r7, #14]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	460b      	mov	r3, r1
 800adce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800add6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800add8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800addc:	2b00      	cmp	r3, #0
 800adde:	da0b      	bge.n	800adf8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ade0:	78fb      	ldrb	r3, [r7, #3]
 800ade2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ade6:	68f9      	ldr	r1, [r7, #12]
 800ade8:	4613      	mov	r3, r2
 800adea:	00db      	lsls	r3, r3, #3
 800adec:	4413      	add	r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	440b      	add	r3, r1
 800adf2:	3316      	adds	r3, #22
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	e00b      	b.n	800ae10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800adf8:	78fb      	ldrb	r3, [r7, #3]
 800adfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800adfe:	68f9      	ldr	r1, [r7, #12]
 800ae00:	4613      	mov	r3, r2
 800ae02:	00db      	lsls	r3, r3, #3
 800ae04:	4413      	add	r3, r2
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	440b      	add	r3, r1
 800ae0a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ae0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3714      	adds	r7, #20
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae36:	78fa      	ldrb	r2, [r7, #3]
 800ae38:	4611      	mov	r1, r2
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7f8 ff5b 	bl	8003cf6 <HAL_PCD_SetAddress>
 800ae40:	4603      	mov	r3, r0
 800ae42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae44:	7bfb      	ldrb	r3, [r7, #15]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f000 f874 	bl	800af34 <USBD_Get_USB_Status>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae50:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b086      	sub	sp, #24
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	60f8      	str	r0, [r7, #12]
 800ae62:	607a      	str	r2, [r7, #4]
 800ae64:	603b      	str	r3, [r7, #0]
 800ae66:	460b      	mov	r3, r1
 800ae68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae78:	7af9      	ldrb	r1, [r7, #11]
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	f7f9 f865 	bl	8003f4c <HAL_PCD_EP_Transmit>
 800ae82:	4603      	mov	r3, r0
 800ae84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae86:	7dfb      	ldrb	r3, [r7, #23]
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f000 f853 	bl	800af34 <USBD_Get_USB_Status>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae92:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3718      	adds	r7, #24
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	607a      	str	r2, [r7, #4]
 800aea6:	603b      	str	r3, [r7, #0]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aeba:	7af9      	ldrb	r1, [r7, #11]
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	f7f8 fff1 	bl	8003ea6 <HAL_PCD_EP_Receive>
 800aec4:	4603      	mov	r3, r0
 800aec6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aec8:	7dfb      	ldrb	r3, [r7, #23]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f000 f832 	bl	800af34 <USBD_Get_USB_Status>
 800aed0:	4603      	mov	r3, r0
 800aed2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aed4:	7dbb      	ldrb	r3, [r7, #22]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3718      	adds	r7, #24
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b082      	sub	sp, #8
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	460b      	mov	r3, r1
 800aee8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aef0:	78fa      	ldrb	r2, [r7, #3]
 800aef2:	4611      	mov	r1, r2
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7f9 f811 	bl	8003f1c <HAL_PCD_EP_GetRxCount>
 800aefa:	4603      	mov	r3, r0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800af0c:	4b03      	ldr	r3, [pc, #12]	@ (800af1c <USBD_static_malloc+0x18>)
}
 800af0e:	4618      	mov	r0, r3
 800af10:	370c      	adds	r7, #12
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	24004b48 	.word	0x24004b48

0800af20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800af28:	bf00      	nop
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
 800af3a:	4603      	mov	r3, r0
 800af3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af3e:	2300      	movs	r3, #0
 800af40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af42:	79fb      	ldrb	r3, [r7, #7]
 800af44:	2b03      	cmp	r3, #3
 800af46:	d817      	bhi.n	800af78 <USBD_Get_USB_Status+0x44>
 800af48:	a201      	add	r2, pc, #4	@ (adr r2, 800af50 <USBD_Get_USB_Status+0x1c>)
 800af4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4e:	bf00      	nop
 800af50:	0800af61 	.word	0x0800af61
 800af54:	0800af67 	.word	0x0800af67
 800af58:	0800af6d 	.word	0x0800af6d
 800af5c:	0800af73 	.word	0x0800af73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af60:	2300      	movs	r3, #0
 800af62:	73fb      	strb	r3, [r7, #15]
    break;
 800af64:	e00b      	b.n	800af7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af66:	2303      	movs	r3, #3
 800af68:	73fb      	strb	r3, [r7, #15]
    break;
 800af6a:	e008      	b.n	800af7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af6c:	2301      	movs	r3, #1
 800af6e:	73fb      	strb	r3, [r7, #15]
    break;
 800af70:	e005      	b.n	800af7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af72:	2303      	movs	r3, #3
 800af74:	73fb      	strb	r3, [r7, #15]
    break;
 800af76:	e002      	b.n	800af7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af78:	2303      	movs	r3, #3
 800af7a:	73fb      	strb	r3, [r7, #15]
    break;
 800af7c:	bf00      	nop
  }
  return usb_status;
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <arm_max_f32>:
 800af8c:	f101 3cff 	add.w	ip, r1, #4294967295
 800af90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af92:	4607      	mov	r7, r0
 800af94:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800af98:	ecf7 7a01 	vldmia	r7!, {s15}
 800af9c:	d05c      	beq.n	800b058 <arm_max_f32+0xcc>
 800af9e:	2400      	movs	r4, #0
 800afa0:	3014      	adds	r0, #20
 800afa2:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800afa6:	4625      	mov	r5, r4
 800afa8:	ed10 7a04 	vldr	s14, [r0, #-16]
 800afac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afb4:	d502      	bpl.n	800afbc <arm_max_f32+0x30>
 800afb6:	eef0 7a47 	vmov.f32	s15, s14
 800afba:	1c65      	adds	r5, r4, #1
 800afbc:	ed10 7a03 	vldr	s14, [r0, #-12]
 800afc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afc8:	d502      	bpl.n	800afd0 <arm_max_f32+0x44>
 800afca:	eef0 7a47 	vmov.f32	s15, s14
 800afce:	1ca5      	adds	r5, r4, #2
 800afd0:	ed10 7a02 	vldr	s14, [r0, #-8]
 800afd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afdc:	d502      	bpl.n	800afe4 <arm_max_f32+0x58>
 800afde:	eef0 7a47 	vmov.f32	s15, s14
 800afe2:	1ce5      	adds	r5, r4, #3
 800afe4:	ed10 7a01 	vldr	s14, [r0, #-4]
 800afe8:	3404      	adds	r4, #4
 800afea:	3010      	adds	r0, #16
 800afec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aff4:	d502      	bpl.n	800affc <arm_max_f32+0x70>
 800aff6:	eef0 7a47 	vmov.f32	s15, s14
 800affa:	4625      	mov	r5, r4
 800affc:	42a6      	cmp	r6, r4
 800affe:	d1d3      	bne.n	800afa8 <arm_max_f32+0x1c>
 800b000:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800b004:	f01c 0003 	ands.w	r0, ip, #3
 800b008:	d01e      	beq.n	800b048 <arm_max_f32+0xbc>
 800b00a:	ed97 7a00 	vldr	s14, [r7]
 800b00e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b016:	dc1b      	bgt.n	800b050 <arm_max_f32+0xc4>
 800b018:	3801      	subs	r0, #1
 800b01a:	d015      	beq.n	800b048 <arm_max_f32+0xbc>
 800b01c:	ed97 7a01 	vldr	s14, [r7, #4]
 800b020:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b028:	d502      	bpl.n	800b030 <arm_max_f32+0xa4>
 800b02a:	eef0 7a47 	vmov.f32	s15, s14
 800b02e:	1a0d      	subs	r5, r1, r0
 800b030:	2801      	cmp	r0, #1
 800b032:	d009      	beq.n	800b048 <arm_max_f32+0xbc>
 800b034:	ed97 7a02 	vldr	s14, [r7, #8]
 800b038:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b040:	dd02      	ble.n	800b048 <arm_max_f32+0xbc>
 800b042:	eef0 7a47 	vmov.f32	s15, s14
 800b046:	4665      	mov	r5, ip
 800b048:	edc2 7a00 	vstr	s15, [r2]
 800b04c:	601d      	str	r5, [r3, #0]
 800b04e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b050:	eef0 7a47 	vmov.f32	s15, s14
 800b054:	1a0d      	subs	r5, r1, r0
 800b056:	e7df      	b.n	800b018 <arm_max_f32+0x8c>
 800b058:	4675      	mov	r5, lr
 800b05a:	e7d3      	b.n	800b004 <arm_max_f32+0x78>

0800b05c <arm_bitreversal_32>:
 800b05c:	b321      	cbz	r1, 800b0a8 <arm_bitreversal_32+0x4c>
 800b05e:	f102 0c02 	add.w	ip, r2, #2
 800b062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b066:	4690      	mov	r8, r2
 800b068:	2500      	movs	r5, #0
 800b06a:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 800b06e:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 800b072:	3502      	adds	r5, #2
 800b074:	08a4      	lsrs	r4, r4, #2
 800b076:	089b      	lsrs	r3, r3, #2
 800b078:	428d      	cmp	r5, r1
 800b07a:	ea4f 0784 	mov.w	r7, r4, lsl #2
 800b07e:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 800b082:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800b086:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800b08a:	f107 0704 	add.w	r7, r7, #4
 800b08e:	f106 0604 	add.w	r6, r6, #4
 800b092:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800b096:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 800b09a:	59c4      	ldr	r4, [r0, r7]
 800b09c:	5983      	ldr	r3, [r0, r6]
 800b09e:	51c3      	str	r3, [r0, r7]
 800b0a0:	5184      	str	r4, [r0, r6]
 800b0a2:	d3e2      	bcc.n	800b06a <arm_bitreversal_32+0xe>
 800b0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop

0800b0ac <arm_cmplx_mag_f32>:
 800b0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b0:	0897      	lsrs	r7, r2, #2
 800b0b2:	ed2d 8b02 	vpush	{d8}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	d077      	beq.n	800b1aa <arm_cmplx_mag_f32+0xfe>
 800b0ba:	f100 0420 	add.w	r4, r0, #32
 800b0be:	f101 0510 	add.w	r5, r1, #16
 800b0c2:	463e      	mov	r6, r7
 800b0c4:	f04f 0800 	mov.w	r8, #0
 800b0c8:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 800b0cc:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 800b0d0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b0d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b0d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b0dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e4:	f2c0 80c1 	blt.w	800b26a <arm_cmplx_mag_f32+0x1be>
 800b0e8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b0ec:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f4:	f100 80d4 	bmi.w	800b2a0 <arm_cmplx_mag_f32+0x1f4>
 800b0f8:	ed05 8a04 	vstr	s16, [r5, #-16]
 800b0fc:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 800b100:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800b104:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b108:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b10c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b110:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b118:	f2c0 80a4 	blt.w	800b264 <arm_cmplx_mag_f32+0x1b8>
 800b11c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b120:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b128:	f100 80a8 	bmi.w	800b27c <arm_cmplx_mag_f32+0x1d0>
 800b12c:	ed05 8a03 	vstr	s16, [r5, #-12]
 800b130:	ed14 0a04 	vldr	s0, [r4, #-16]
 800b134:	ed54 7a03 	vldr	s15, [r4, #-12]
 800b138:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b13c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b140:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b144:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b14c:	f2c0 8087 	blt.w	800b25e <arm_cmplx_mag_f32+0x1b2>
 800b150:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b154:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b15c:	f100 8097 	bmi.w	800b28e <arm_cmplx_mag_f32+0x1e2>
 800b160:	ed05 8a02 	vstr	s16, [r5, #-8]
 800b164:	ed14 0a02 	vldr	s0, [r4, #-8]
 800b168:	ed54 7a01 	vldr	s15, [r4, #-4]
 800b16c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b170:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b174:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b178:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b180:	db6a      	blt.n	800b258 <arm_cmplx_mag_f32+0x1ac>
 800b182:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b186:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b18e:	f100 8090 	bmi.w	800b2b2 <arm_cmplx_mag_f32+0x206>
 800b192:	ed05 8a01 	vstr	s16, [r5, #-4]
 800b196:	3e01      	subs	r6, #1
 800b198:	f104 0420 	add.w	r4, r4, #32
 800b19c:	f105 0510 	add.w	r5, r5, #16
 800b1a0:	d192      	bne.n	800b0c8 <arm_cmplx_mag_f32+0x1c>
 800b1a2:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800b1a6:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800b1aa:	f012 0203 	ands.w	r2, r2, #3
 800b1ae:	d04e      	beq.n	800b24e <arm_cmplx_mag_f32+0x1a2>
 800b1b0:	ed90 0a00 	vldr	s0, [r0]
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	edd0 7a01 	vldr	s15, [r0, #4]
 800b1ba:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b1be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b1c2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b1c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ce:	db4f      	blt.n	800b270 <arm_cmplx_mag_f32+0x1c4>
 800b1d0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b1d4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1dc:	d472      	bmi.n	800b2c4 <arm_cmplx_mag_f32+0x218>
 800b1de:	ed81 8a00 	vstr	s16, [r1]
 800b1e2:	3a01      	subs	r2, #1
 800b1e4:	d033      	beq.n	800b24e <arm_cmplx_mag_f32+0x1a2>
 800b1e6:	ed90 0a02 	vldr	s0, [r0, #8]
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	edd0 7a03 	vldr	s15, [r0, #12]
 800b1f0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b1f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b1f8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b1fc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b204:	db36      	blt.n	800b274 <arm_cmplx_mag_f32+0x1c8>
 800b206:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b20a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b212:	d460      	bmi.n	800b2d6 <arm_cmplx_mag_f32+0x22a>
 800b214:	ed81 8a01 	vstr	s16, [r1, #4]
 800b218:	2a01      	cmp	r2, #1
 800b21a:	d018      	beq.n	800b24e <arm_cmplx_mag_f32+0x1a2>
 800b21c:	ed90 0a04 	vldr	s0, [r0, #16]
 800b220:	2300      	movs	r3, #0
 800b222:	edd0 7a05 	vldr	s15, [r0, #20]
 800b226:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b22a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b22e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b232:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b23a:	db1d      	blt.n	800b278 <arm_cmplx_mag_f32+0x1cc>
 800b23c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b240:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b248:	d44e      	bmi.n	800b2e8 <arm_cmplx_mag_f32+0x23c>
 800b24a:	ed81 8a02 	vstr	s16, [r1, #8]
 800b24e:	b004      	add	sp, #16
 800b250:	ecbd 8b02 	vpop	{d8}
 800b254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b258:	f845 8c04 	str.w	r8, [r5, #-4]
 800b25c:	e79b      	b.n	800b196 <arm_cmplx_mag_f32+0xea>
 800b25e:	f845 8c08 	str.w	r8, [r5, #-8]
 800b262:	e77f      	b.n	800b164 <arm_cmplx_mag_f32+0xb8>
 800b264:	f845 8c0c 	str.w	r8, [r5, #-12]
 800b268:	e762      	b.n	800b130 <arm_cmplx_mag_f32+0x84>
 800b26a:	f845 8c10 	str.w	r8, [r5, #-16]
 800b26e:	e745      	b.n	800b0fc <arm_cmplx_mag_f32+0x50>
 800b270:	600b      	str	r3, [r1, #0]
 800b272:	e7b6      	b.n	800b1e2 <arm_cmplx_mag_f32+0x136>
 800b274:	604b      	str	r3, [r1, #4]
 800b276:	e7cf      	b.n	800b218 <arm_cmplx_mag_f32+0x16c>
 800b278:	608b      	str	r3, [r1, #8]
 800b27a:	e7e8      	b.n	800b24e <arm_cmplx_mag_f32+0x1a2>
 800b27c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b280:	9001      	str	r0, [sp, #4]
 800b282:	f000 f869 	bl	800b358 <sqrtf>
 800b286:	9801      	ldr	r0, [sp, #4]
 800b288:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b28c:	e74e      	b.n	800b12c <arm_cmplx_mag_f32+0x80>
 800b28e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b292:	9001      	str	r0, [sp, #4]
 800b294:	f000 f860 	bl	800b358 <sqrtf>
 800b298:	9801      	ldr	r0, [sp, #4]
 800b29a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b29e:	e75f      	b.n	800b160 <arm_cmplx_mag_f32+0xb4>
 800b2a0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b2a4:	9001      	str	r0, [sp, #4]
 800b2a6:	f000 f857 	bl	800b358 <sqrtf>
 800b2aa:	9801      	ldr	r0, [sp, #4]
 800b2ac:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b2b0:	e722      	b.n	800b0f8 <arm_cmplx_mag_f32+0x4c>
 800b2b2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b2b6:	9001      	str	r0, [sp, #4]
 800b2b8:	f000 f84e 	bl	800b358 <sqrtf>
 800b2bc:	9801      	ldr	r0, [sp, #4]
 800b2be:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b2c2:	e766      	b.n	800b192 <arm_cmplx_mag_f32+0xe6>
 800b2c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2c8:	9201      	str	r2, [sp, #4]
 800b2ca:	f000 f845 	bl	800b358 <sqrtf>
 800b2ce:	9903      	ldr	r1, [sp, #12]
 800b2d0:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800b2d4:	e783      	b.n	800b1de <arm_cmplx_mag_f32+0x132>
 800b2d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2da:	9201      	str	r2, [sp, #4]
 800b2dc:	f000 f83c 	bl	800b358 <sqrtf>
 800b2e0:	9903      	ldr	r1, [sp, #12]
 800b2e2:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800b2e6:	e795      	b.n	800b214 <arm_cmplx_mag_f32+0x168>
 800b2e8:	9101      	str	r1, [sp, #4]
 800b2ea:	f000 f835 	bl	800b358 <sqrtf>
 800b2ee:	9901      	ldr	r1, [sp, #4]
 800b2f0:	e7ab      	b.n	800b24a <arm_cmplx_mag_f32+0x19e>
 800b2f2:	bf00      	nop

0800b2f4 <memset>:
 800b2f4:	4402      	add	r2, r0
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d100      	bne.n	800b2fe <memset+0xa>
 800b2fc:	4770      	bx	lr
 800b2fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b302:	e7f9      	b.n	800b2f8 <memset+0x4>

0800b304 <__errno>:
 800b304:	4b01      	ldr	r3, [pc, #4]	@ (800b30c <__errno+0x8>)
 800b306:	6818      	ldr	r0, [r3, #0]
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	2400210c 	.word	0x2400210c

0800b310 <__libc_init_array>:
 800b310:	b570      	push	{r4, r5, r6, lr}
 800b312:	4d0d      	ldr	r5, [pc, #52]	@ (800b348 <__libc_init_array+0x38>)
 800b314:	4c0d      	ldr	r4, [pc, #52]	@ (800b34c <__libc_init_array+0x3c>)
 800b316:	1b64      	subs	r4, r4, r5
 800b318:	10a4      	asrs	r4, r4, #2
 800b31a:	2600      	movs	r6, #0
 800b31c:	42a6      	cmp	r6, r4
 800b31e:	d109      	bne.n	800b334 <__libc_init_array+0x24>
 800b320:	4d0b      	ldr	r5, [pc, #44]	@ (800b350 <__libc_init_array+0x40>)
 800b322:	4c0c      	ldr	r4, [pc, #48]	@ (800b354 <__libc_init_array+0x44>)
 800b324:	f000 f83a 	bl	800b39c <_init>
 800b328:	1b64      	subs	r4, r4, r5
 800b32a:	10a4      	asrs	r4, r4, #2
 800b32c:	2600      	movs	r6, #0
 800b32e:	42a6      	cmp	r6, r4
 800b330:	d105      	bne.n	800b33e <__libc_init_array+0x2e>
 800b332:	bd70      	pop	{r4, r5, r6, pc}
 800b334:	f855 3b04 	ldr.w	r3, [r5], #4
 800b338:	4798      	blx	r3
 800b33a:	3601      	adds	r6, #1
 800b33c:	e7ee      	b.n	800b31c <__libc_init_array+0xc>
 800b33e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b342:	4798      	blx	r3
 800b344:	3601      	adds	r6, #1
 800b346:	e7f2      	b.n	800b32e <__libc_init_array+0x1e>
 800b348:	0800e268 	.word	0x0800e268
 800b34c:	0800e268 	.word	0x0800e268
 800b350:	0800e268 	.word	0x0800e268
 800b354:	0800e26c 	.word	0x0800e26c

0800b358 <sqrtf>:
 800b358:	b508      	push	{r3, lr}
 800b35a:	ed2d 8b02 	vpush	{d8}
 800b35e:	eeb0 8a40 	vmov.f32	s16, s0
 800b362:	f000 f817 	bl	800b394 <__ieee754_sqrtf>
 800b366:	eeb4 8a48 	vcmp.f32	s16, s16
 800b36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b36e:	d60c      	bvs.n	800b38a <sqrtf+0x32>
 800b370:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b390 <sqrtf+0x38>
 800b374:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b37c:	d505      	bpl.n	800b38a <sqrtf+0x32>
 800b37e:	f7ff ffc1 	bl	800b304 <__errno>
 800b382:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b386:	2321      	movs	r3, #33	@ 0x21
 800b388:	6003      	str	r3, [r0, #0]
 800b38a:	ecbd 8b02 	vpop	{d8}
 800b38e:	bd08      	pop	{r3, pc}
 800b390:	00000000 	.word	0x00000000

0800b394 <__ieee754_sqrtf>:
 800b394:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b398:	4770      	bx	lr
	...

0800b39c <_init>:
 800b39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39e:	bf00      	nop
 800b3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3a2:	bc08      	pop	{r3}
 800b3a4:	469e      	mov	lr, r3
 800b3a6:	4770      	bx	lr

0800b3a8 <_fini>:
 800b3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3aa:	bf00      	nop
 800b3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ae:	bc08      	pop	{r3}
 800b3b0:	469e      	mov	lr, r3
 800b3b2:	4770      	bx	lr
